<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode Hot 100：滑动窗口</title>
    <link href="/2025/04/12/LeetCode-Hot-100%EF%BC%9A%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2025/04/12/LeetCode-Hot-100%EF%BC%9A%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-Hot-100"><a href="#Leetcode-Hot-100" class="headerlink" title="Leetcode Hot 100"></a>Leetcode Hot 100</h1><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h3><ul><li><p>链接：<a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/?envType=study-plan-v2&envId=top-100-liked">3. 无重复字符的最长子串 - 力扣（LeetCode）</a></p></li><li><p>问题：求不含有重复字符的最长子串的长度。比如：abcabcbb是abc，bbbbb是b，pwwekw是wek</p></li><li><p>解决：</p><ul><li><p>滑动窗口：循环遍历字符串，每次左指针向右移动一位；每次循环移动右指针，直到出现重复字符。（原理：右指针肯定是递增的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-comment">// 哈希集合，记录每个字符是否出现过</span><br>    Set&lt;Character&gt; occ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Character&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>    <span class="hljs-comment">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rk</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 左指针向右移动一格，移除一个字符</span><br>            occ.remove(s.charAt(i - <span class="hljs-number">1</span>));<br>        &#125;<br>        <span class="hljs-keyword">while</span> (rk + <span class="hljs-number">1</span> &lt; n &amp;&amp; !occ.contains(s.charAt(rk + <span class="hljs-number">1</span>))) &#123;<br>            <span class="hljs-comment">// 不断地移动右指针</span><br>            occ.add(s.charAt(rk + <span class="hljs-number">1</span>));<br>            ++rk;<br>        &#125;<br>        <span class="hljs-comment">// 第 i 到 rk 个字符是一个极长的无重复字符子串</span><br>        ans = Math.max(ans, rk - i + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="找到字符串中所有字母异位词"><a href="#找到字符串中所有字母异位词" class="headerlink" title="找到字符串中所有字母异位词"></a>找到字符串中所有字母异位词</h3><ul><li><p>链接：<a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/description/?envType=study-plan-v2&envId=top-100-liked">438. 找到字符串中所有字母异位词 - 力扣（LeetCode）</a></p></li><li><p>问题：给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <strong>异位词</strong> 的子串，返回这些子串的起始索引。比如：s &#x3D; “abab”, p &#x3D; “ab”，返回[0,1,2]；s &#x3D; “cbaebabacd”, p &#x3D; “abc”，返回[0, 6]。</p></li><li><p>解决：</p><ul><li>维护滑动窗口，窗口长度固定为p的长度，比较窗口里面的字符是否符合要求（通过count数组存储不同，differ维护不同的个数，differ为0则相同）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">findAnagrams</span><span class="hljs-params">(String s, String p)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sLen</span> <span class="hljs-operator">=</span> s.length(), pLen = p.length();<br>    <span class="hljs-keyword">if</span> (sLen &lt; pLen) &#123;<span class="hljs-comment">//s长度小于p，肯定不符合</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    &#125;<br>    <br>    List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pLen; ++i) &#123;<span class="hljs-comment">//count存储长度为pLen的窗口中，s和p字符的差别</span><br>        ++count[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        --count[p.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">differ</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; ++j) &#123;<span class="hljs-comment">//differ存储哪些字符存在差异</span><br>        <span class="hljs-keyword">if</span> (count[j] != <span class="hljs-number">0</span>) &#123;<br>            ++differ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (differ == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//如果differ为0，说明没有字符存在差异，符合字母异位词</span><br>        ans.add(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sLen - pLen; ++i) &#123;<br>        <span class="hljs-comment">//移除下标为i的字符</span><br>        <span class="hljs-keyword">if</span> (count[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//窗口中字母s[i]的数量与字符串p中的数量从不同变得相同</span><br>            --differ;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//窗口中字母s[i]的数量与字符串p中的数量从相同变得不同</span><br>            ++differ;<br>        &#125;<br>        --count[s.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br><br>        <span class="hljs-comment">//加入下标为i+pen的字符</span><br>        <span class="hljs-keyword">if</span>(count[s.charAt(i+pLen)-<span class="hljs-string">&#x27;a&#x27;</span>] == -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//窗口中字母 s[i+pLen] 的数量与字符串p中的数量从不同变得相同</span><br>            --differ;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count[s.charAt(i+pLen)-<span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//窗口中字母 s[i+pLen] 的数量与字符串p中的数量从相同变得不同</span><br>            ++differ;<br>        &#125;<br>        ++count[s.charAt(i + pLen) - <span class="hljs-string">&#x27;a&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span> (differ == <span class="hljs-number">0</span>) &#123;<br>            ans.add(i + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>LeetCode Hot 100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode Hot 100</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-RabbitMQ：总结</title>
    <link href="/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/"/>
    <url>/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="初始MQ"><a href="#初始MQ" class="headerlink" title="初始MQ"></a>初始MQ</h2><h3 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h3><h3 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h3><h3 id="MQ技术选型"><a href="#MQ技术选型" class="headerlink" title="MQ技术选型"></a>MQ技术选型</h3><p>MQ：消息队列</p><p><img src="/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/MQ%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.png"></p><h2 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><p>RabbitMQ的整体架构及核心概念：</p><ul><li>virtual-host：虚拟主机，起到数据隔离的作用</li><li>publisher：消息发送者</li><li>consumer：消息的消费者</li><li>queue：队列，存储消息</li><li>exchange：交换机，负责路由消息</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li>交换机只能路由消息，无法存储消息</li><li>交换机只会路由消息给与其绑定的队列，因此队列必须与交换机绑定</li></ul><h3 id="数据隔离"><a href="#数据隔离" class="headerlink" title="数据隔离"></a>数据隔离</h3><p>不同virtual host之间的数据是隔离的。</p><h2 id="Java客户端"><a href="#Java客户端" class="headerlink" title="Java客户端"></a>Java客户端</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li>AMQP</li><li>Spring AMQP</li></ul><h4 id="SpringAMQP收发消息"><a href="#SpringAMQP收发消息" class="headerlink" title="SpringAMQP收发消息"></a>SpringAMQP收发消息</h4><ul><li>引入spring-boot-starter-amqp依赖</li><li>配置rabbitmq服务端信息</li><li>利用<strong>RabbitTemplate发送消息</strong></li><li>利用**@RabbitListener注解声明要监听的队列，监听消息**</li></ul><p>发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-comment">// 利用RabbitListener来声明要监听的队列信息</span><br>    <span class="hljs-comment">// 将来一旦监听的队列中有了消息，就会推送给当前服务，调用当前方法，处理消息。</span><br>    <span class="hljs-comment">// 可以看到方法体中接收的就是消息体的内容</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Work-queues"><a href="#Work-queues" class="headerlink" title="Work queues"></a>Work queues</h3><p>Work queues，任务模型。让多个消费者绑定到一个队列，共同消费队列中的消息。</p><ul><li>多个消费者绑定到一个队列，加快消息处理速度</li><li><strong>同一条消息只会被一个消费者处理</strong></li><li>通过设置prefetch来控制消费者预取的消息数量，处理完一条再处理下一条，实现能者多劳</li></ul><h3 id="Fanout交换机"><a href="#Fanout交换机" class="headerlink" title="Fanout交换机"></a>Fanout交换机</h3><p>交换机的作用主要是接收发送者发送的消息，并将消息<strong>路由</strong>到与其绑定的队列。</p><p>常见交换机的类型有以下三种：</p><ul><li>Fanout：广播</li><li>Direct：定向</li><li>Topic：话题</li></ul><p>Fanout Exchange 会将接收到的消息<strong>路由到每一个跟其绑定的queue</strong>，所以也叫广播模式。</p><h3 id="Direct-交换机"><a href="#Direct-交换机" class="headerlink" title="Direct 交换机"></a>Direct 交换机</h3><p>Direct Exchange 会将接收到的消息<strong>根据规则路由</strong>到指定的Queue，因此称为<strong>定向路由</strong>。</p><ul><li>每一个Queue都与Exchange设置一个BindingKey</li><li>发布者发送消息时，指定消息的RoutingKey</li><li>Exchange将消息路由到BindingKey与消息RoutingKey一致的队列</li></ul><p>Direct交换机与Fanout交换机的差异：</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同RoutingKey，则与Fanout功能类似</li></ul><h3 id="Topic交换机"><a href="#Topic交换机" class="headerlink" title="Topic交换机"></a>Topic交换机</h3><p>TopicExchange与DirectExchange类似，区别在于<strong>routingKey可以是多个单词的列表</strong>，并且以<code>.</code>分割。</p><p>Queue与Exchange指定BindingKey时可以使用通配符：</p><ul><li>#：代指0个或多个单词</li><li>*：代指一个单词</li></ul><h3 id="声明队列和交换机"><a href="#声明队列和交换机" class="headerlink" title="声明队列和交换机"></a>声明队列和交换机</h3><p>SpringAMQP提供了几个类，用来声明队列、交换机及其绑定关系：</p><ul><li>Queue：用于声明队列，可以用工厂类QueueBuilder构建</li><li>Exchange：用于声明交换机，可以用工厂类ExchangeBuilder构建</li><li>Binding：用于声明队列和交换机的绑定关系，可以用工厂类BindingBuilder构建</li></ul><p>SpringAMQP提供了基于@RabbitListener注解来声明队列和交换机的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;hmall.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h3><p>Spring的对消息对象的处理是由org.springframework.amqp.support.converter.MessageConverter来处理的。而默认实现是SimpleMessageConverter，基于JDK的ObjectOutputStream完成序列化。</p><p>存在下列问题：</p><ul><li>JDK的序列化有安全风险</li><li>JDK序列化的消息太大</li><li>JDK序列化的消息可读性差</li></ul><p>使用JSON方式来做序列化和反序列化：</p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注入消息转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 1.定义消息转换器</span><br>    <span class="hljs-type">Jackson2JsonMessageConverter</span> <span class="hljs-variable">jackson2JsonMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>    <span class="hljs-comment">// 2.配置自动创建消息id，用于识别不同消息，也可以在业务中基于ID判断是否是重复消息</span><br>    jackson2JsonMessageConverter.setCreateMessageIds(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> jackson2JsonMessageConverter;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="发送者的可靠性"><a href="#发送者的可靠性" class="headerlink" title="发送者的可靠性"></a>发送者的可靠性</h2><h3 id="发送者重连"><a href="#发送者重连" class="headerlink" title="发送者重连"></a>发送者重连</h3><p>有的时候由于网络波动，可能会出现<strong>发送者连接MQ失败</strong>的情况。通过配置可以<strong>开启连接失败后的重连机制（阻塞式）</strong>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">connection-timeout:</span> <span class="hljs-string">1s</span> <span class="hljs-comment"># 设置MQ的连接超时时间</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-attr">retry:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启超时重试机制</span><br>        <span class="hljs-attr">initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 失败后的初始等待时间</span><br>        <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败后下次的等待时长倍数，下次等待时长 = initial-interval * multiplier</span><br>        <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br></code></pre></td></tr></table></figure><h3 id="发送者确认"><a href="#发送者确认" class="headerlink" title="发送者确认"></a>发送者确认</h3><p>SpringAMQP提供了<strong>Publisher Confirm</strong>和<strong>Publisher Return</strong>两种确认机制。开启确机制认后，当发送者发送消息给MQ后，MQ会返回确认结果给发送者。返回的结果有以下几种情况：</p><ul><li>消息投递到了MQ，但是路由失败。此时会通过<strong>PublisherReturn返回路由异常原因</strong>，然后返回ACK，告知投递成功</li><li>临时消息投递到了MQ，并且入队成功，返回ACK，告知投递成功</li><li>持久消息投递到了MQ，并且入队完成持久化，返回ACK ，告知投递成功</li><li>其它情况都会返回NACK，告知投递失败</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span> <span class="hljs-comment"># 开启publisher confirm机制，并设置confirm类型</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启publisher return机制</span><br></code></pre></td></tr></table></figure><p><img src="/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/%E5%8F%91%E9%80%81%E8%80%85%E5%8F%AF%E9%9D%A0%E6%80%A7.png"></p><p>其中<code>ack</code>和<code>nack</code>属于<strong>Publisher Confirm</strong>机制，<code>ack</code>是投递成功；<code>nack</code>是投递失败。而<code>return</code>则属于<strong>Publisher Return</strong>机制。</p><h2 id="MQ的可靠性"><a href="#MQ的可靠性" class="headerlink" title="MQ的可靠性"></a>MQ的可靠性</h2><p>在默认情况下，RabbitMQ会将接收到的信息保存在内存中以降低消息收发的延迟。这样会导致两个问题：</p><ul><li>一旦MQ宕机，内存中的消息会丢失</li><li>内存空间有限，当消费者故障或处理过慢时，会导致消息积压，引发MQ阻塞</li></ul><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>RabbitMQ实现数据持久化包括3个方面：</p><ul><li>交换机持久化：<code>Durable</code></li><li>队列持久化：<code>Durable</code></li><li>消息持久化：<code>Non-persistent</code></li></ul><h3 id="Lazy-Queue"><a href="#Lazy-Queue" class="headerlink" title="Lazy Queue"></a>Lazy Queue</h3><p>从RabbitMQ的3.6.0版本开始增加Lazy Queue，也就是<strong>惰性队列</strong>。</p><p>惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘，不再存储到内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存（可以提前缓存部分消息到内存，最多2048条）</li><li>在3.12版本后，所有队列都是Lazy Queue模式，无法更改。</li></ul><h3 id="RabbitMQ如何保证消息的可靠性"><a href="#RabbitMQ如何保证消息的可靠性" class="headerlink" title="RabbitMQ如何保证消息的可靠性"></a>RabbitMQ如何保证消息的可靠性</h3><ol><li>首先通过配置可以让交换机、队列、以及发送的消息都持久化。这样队列中的<strong>消息会持久化到磁盘，MQ重启消息依然存在</strong>。</li><li>RabbitMQ在3.6版本引入了LazyQueue，并且在3.12版本后会称为队列的默认模式。<strong>LazyQueue会将所有消息都持久化</strong>。</li><li>开启持久化和发送者确认时， RabbitMQ只有在<strong>消息持久化完成后才会给发送者返回ACK回执</strong></li></ol><h2 id="消费者的可靠性"><a href="#消费者的可靠性" class="headerlink" title="消费者的可靠性"></a>消费者的可靠性</h2><h3 id="消费者确认机制"><a href="#消费者确认机制" class="headerlink" title="消费者确认机制"></a>消费者确认机制</h3><p>消费者确认机制（Consumer Acknowledgement）是为了确认消费者是否成功处理消息。当消费者处理消息结束后，应该向RabbitMQ发送一个回执，告知RabbitMQ自己消息处理状态：</p><ul><li>ack：成功处理消息，RabbitMQ从队列中<strong>删除该消息</strong></li><li>nack：消息处理失败，RabbitMQ需要<strong>再次投递消息</strong></li><li>reject：<strong>消息处理失败并拒绝该消息</strong>，RabbitMQ从队列中删除该消息</li></ul><p>SpringAMQP已经实现了消息确认功能。并允许我们通过配置文件选择ACK处理方式，有三种方式：</p><ul><li><p>none：不处理。即消息投递给消费者后立刻ack，消息会立刻从MQ删除。非常不安全，不建议使用</p></li><li><p>manual：手动模式。需要自己在业务代码中调用api，发送ack或reject，存在业务入侵，但更灵活</p></li><li><p>auto：自动模式。SpringAMQP利用AOP对我们的消息处理逻辑做了环绕增强，当业务正常执行时则自动返回ack.  当业务出现异常时，根据异常判断返回不同结果：  </p><ul><li><p>如果是业务异常，会自动返回nack</p></li><li><p>如果是消息处理或校验异常，自动返回reject</p></li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">auto</span> <span class="hljs-comment"># 自动ack</span><br></code></pre></td></tr></table></figure><h3 id="失败重试机制"><a href="#失败重试机制" class="headerlink" title="失败重试机制"></a>失败重试机制</h3><p>SpringAMQP提供了消费者失败重试机制，<strong>在消费者出现异常时利用本地重试，而不是无限的requeue到mq</strong>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">retry:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启消费者失败重试</span><br>          <span class="hljs-attr">initial-interval:</span> <span class="hljs-string">1000ms</span> <span class="hljs-comment"># 初识的失败等待时长为1秒</span><br>          <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span><br>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br>          <span class="hljs-attr">stateless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span><br></code></pre></td></tr></table></figure><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecoverer接口来处理，它包含三种不同的实现：</p><ul><li><p>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式</p></li><li><p>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</p></li><li><p><strong>RepublishMessageRecoverer</strong>：重试耗尽后，将失败消息投递到指定的交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageRecoverer <span class="hljs-title function_">republishMessageRecoverer</span><span class="hljs-params">(RabbitTemplate rabbitTemplate)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="hljs-string">&quot;error.direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="业务幂等性"><a href="#业务幂等性" class="headerlink" title="业务幂等性"></a>业务幂等性</h3><p>幂等：f(x) &#x3D; f(f(x))</p><ul><li>定义：同一个业务，执行一次或多次对业务状态影响一致</li><li>业务：<ul><li>幂等：根据id查询、根据id删除</li><li>非幂等：下单业务扣减库存、退款业务恢复余额</li></ul></li><li>解决：<ul><li>唯一消息id</li><li>业务判断</li></ul></li></ul><h4 id="唯一消息id"><a href="#唯一消息id" class="headerlink" title="唯一消息id"></a>唯一消息id</h4><p>给每个消息都设置一个唯一id，利用id区分<strong>是否是重复消息</strong>：<strong>保证消息只被消费一次</strong></p><ul><li>每一条消息都生成一个唯一的id，与消息一起投递给消费者。</li><li>消费者接收到消息后处理自己的业务，业务处理成功后将消息ID保存到数据库</li><li>如果下次又收到相同消息，去数据库查询判断是否存在，存在则为重复消息放弃处理。</li></ul><h4 id="业务判断"><a href="#业务判断" class="headerlink" title="业务判断"></a>业务判断</h4><p>结合业务逻辑，基于业务本身做判断。</p><p><img src="/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/%E5%B9%82%E7%AD%89%E6%80%A7-%E4%B8%9A%E5%8A%A1%E5%88%A4%E6%96%AD%EF%BC%88%E9%97%AE%E9%A2%98%EF%BC%89.png"></p><p>存在问题：交易服务标记订单已支付，由于网络中断，消费者ACK没有发回消息队列，此时消息重新入队；同时用户申请退款，交给交易服务标记订单为退款；这次网络恢复，消息队列重连，又投递标记订单支付的消息，这时标记订单为已支付，把退款中状态覆盖掉。（非幂等）</p><p><img src="/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/%E5%B9%82%E7%AD%89%E6%80%A7-%E4%B8%9A%E5%8A%A1%E5%88%A4%E6%96%AD.png"></p><p>解决：标记订单为已支付前，先判断订单是否为未支付。</p><h2 id="延迟消息"><a href="#延迟消息" class="headerlink" title="延迟消息"></a>延迟消息</h2><p>延迟消息：发送者发送消息时指定一个时间，消费者不会立刻收到消息，而是在指定时间之后才收到消息。</p><p>延迟任务：设置在一定时间之后才执行的任务。</p><h3 id="死信交换机"><a href="#死信交换机" class="headerlink" title="死信交换机"></a>死信交换机</h3><p>当一个队列中的消息满足下列情况之一时，就会成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明<strong>消费失败</strong>，并且消息的requeue参数设置为false</li><li>消息是一个过期消息（达到了队列或消息本身设置的过期时间），<strong>超时无人消费</strong></li><li>要投递的<strong>队列消息堆积满了</strong>，最早的消息可能成为死信</li></ul><p>如果队列通过dead-letter-exchange属性指定了一个交换机，那么该队列中的死信就会投递到这个交换机中。这个交换机称为死信交换机（Dead Letter Exchange，简称DLX）。</p><h3 id="延迟消息插件"><a href="#延迟消息插件" class="headerlink" title="延迟消息插件"></a>延迟消息插件</h3><p>这个插件可以将普通交换机改造为<strong>支持延迟消息功能的交换机</strong>，当消息投递到交换机后可以暂存一定时间，到期后再投递到队列。</p><h3 id="超时订单问题"><a href="#超时订单问题" class="headerlink" title="超时订单问题"></a>超时订单问题</h3><p><img src="/2025/04/01/Java-RabbitMQ%EF%BC%9A%E6%80%BB%E7%BB%93/%E5%8F%96%E6%B6%88%E8%B6%85%E6%97%B6%E8%AE%A2%E5%8D%95.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java-RabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java-RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Redis：Redis高级</title>
    <link href="/2025/03/29/Java-Redis%EF%BC%9ARedis%E9%AB%98%E7%BA%A7/"/>
    <url>/2025/03/29/Java-Redis%EF%BC%9ARedis%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><ul><li>RDB：数据快照，fork子进程</li><li>AOF：追加文件（命令日志文件）</li><li>混合持久化（Redis 4.0+)</li></ul><h4 id="Redis主从"><a href="#Redis主从" class="headerlink" title="Redis主从"></a>Redis主从</h4><ul><li>全量同步：RDB</li><li>增量同步：repl_backlog（环形数组）</li></ul><h4 id="Redis哨兵"><a href="#Redis哨兵" class="headerlink" title="Redis哨兵"></a>Redis哨兵</h4><ul><li>监控：每隔一秒ping，主观下线、客观下线</li><li>自动故障恢复：<ul><li>选择master依据：slave与master断开时间长短、slave-priority（小）、offset（大）、运行id（小）</li><li>切换：slaveof no one</li></ul></li><li>通知：Redis客户端</li></ul><h4 id="Redis分片集群"><a href="#Redis分片集群" class="headerlink" title="Redis分片集群"></a>Redis分片集群</h4><p>分片集群：多个master，互相ping</p><p>散列插槽：key和插槽绑定，16384个</p><p>集群伸缩：add-node（需要转移插槽）</p><p>故障转移：</p><ul><li>自动故障转移：提升slave为master</li><li>手动故障转移：cluster failover</li></ul><h3 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h3><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h2 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h2><h3 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p>动态字符串SDS：动态扩容、内存预分配</p></li><li><p>intset：升序、唯一、二分查找</p></li><li><p>Dict：</p><ul><li>字典、哈希表、哈希节点</li><li>ht[0]平常用，ht[1]rehash（渐进式）</li><li>伸缩</li></ul></li><li><p>ZipList：连续内存“双向链表”、连锁更新问题</p></li><li><p>QuickList：节点为ZipList的双端链表</p></li><li><p>SkipList：双向链表，score、ele排序，多层指针</p></li><li><p>RedisObject</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>编码方式</strong></th></tr></thead><tbody><tr><td>OBJ_STRING</td><td>int、embstr、raw</td></tr><tr><td>OBJ_LIST</td><td>LinkedList和ZipList(3.2以前)、QuickList（3.2以后）</td></tr><tr><td>OBJ_SET</td><td>intset、HT</td></tr><tr><td>OBJ_ZSET</td><td>ZipList、HT、SkipList</td></tr><tr><td>OBJ_HASH</td><td>ZipList、HT</td></tr></tbody></table></li></ul><h4 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h4><ul><li><p>String：embstr（小于44字节）、raw、int（整数）</p></li><li><p>List：</p><ul><li>3.2前：ZipList（数量＜512，大小＜64字节），LinkedList</li><li>3.2后：QuickList</li></ul></li><li><p>Set：</p><ul><li>intSet：数量＜set-max-intset-entries</li><li>Dict：key存元素、value为null</li></ul></li><li><p>Zset：</p><ul><li>ZipList：数量＜zset_max_ziplist_entries（128），大小＜zset_max_ziplist_value（64）字节，element（前）和score（后）紧挨，按score升序排序</li><li>Dict</li><li>SkipList</li></ul></li><li><p>Hash：</p><ul><li><p>ZipList：数量＜hash-max-ziplist-entries（512），</p><p>大小＜hash-max-ziplist-value（64）</p></li><li><p>Dict</p></li></ul></li></ul><h3 id="Redis网络模型"><a href="#Redis网络模型" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h3><p>进程的寻址空间划分成两部分：<strong>内核空间、用户空间</strong></p><p><img src="/2025/03/29/Java-Redis%EF%BC%9ARedis%E9%AB%98%E7%BA%A7/%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E5%92%8C%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4.png"></p><p>5中网络模型对比：</p><p><img src="/2025/03/29/Java-Redis%EF%BC%9ARedis%E9%AB%98%E7%BA%A7/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94.png"></p><h3 id="Redis通信协议-RESP协议"><a href="#Redis通信协议-RESP协议" class="headerlink" title="Redis通信协议-RESP协议"></a>Redis通信协议-RESP协议</h3><h4 id="过期key处理"><a href="#过期key处理" class="headerlink" title="过期key处理"></a>过期key处理</h4><ul><li><p>惰性清理：查找key时判断</p></li><li><p>定期清理：逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</p><ul><li><p>SLOW（initServer）：执行频率默认为10，每次不超过25ms</p></li><li><p>FAST（beforeSleep）：执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</p></li></ul></li></ul><h4 id="内存淘汰"><a href="#内存淘汰" class="headerlink" title="内存淘汰"></a>内存淘汰</h4><ul><li>noeviction： 不淘汰任何key，内存满时不允许写入新数据，默认。</li><li>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li>allkeys-random：对全体key ，随机进行淘汰。也就是直接从db-&gt;dict中随机挑选</li><li>volatile-random：对设置了TTL的key ，随机进行淘汰。也就是从db-&gt;expires中随机挑选。</li><li>allkeys-lru： 对全体key，基于LRU算法进行淘汰</li><li>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu： 对全体key，基于LFU算法进行淘汰</li><li>volatile-lfu： 对设置了TTL的key，基于LFI算法进行淘汰</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java-Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java-Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Redis：实战篇（3）</title>
    <link href="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/"/>
    <url>/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h3><h4 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h4><p>探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个：</p><ul><li><code>tb_blog</code>：探店笔记表，包含笔记中的标题、文字、图片等。</li><li><code>tb_blog_comments</code>：其他用户对探店笔记的评价。</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97%EF%BC%9A%E6%8E%A2%E5%BA%97%E7%AC%94%E8%AE%B0%E8%A1%A8.png"></p><p>发布探店笔记流程：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97%EF%BC%9A%E5%8F%91%E5%B8%83%E6%8E%A2%E5%BA%97%E7%AC%94%E8%AE%B0%E6%B5%81%E7%A8%8B.png"></p><p>文件上传的设置：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97%EF%BC%9A%E6%8E%A2%E5%BA%97%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%AE%BE%E7%BD%AE.png"></p><p>修改<code>SystemConstants</code>下的图片存储目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IMAGE_UPLOAD_DIR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\software\\nginx-1.18.0-dianping\\html\\hmdp\\imgs\\&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_NICK_NAME_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user_&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_PAGE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_PAGE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例：实现查看发布探店笔记的接口"><a href="#案例：实现查看发布探店笔记的接口" class="headerlink" title="案例：实现查看发布探店笔记的接口"></a>案例：实现查看发布探店笔记的接口</h5><p>需求：点击首页的探店笔记，会进入详情页面，实现该页面的查询接口：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97%EF%BC%9A%E6%9F%A5%E7%9C%8B%E6%8E%A2%E5%BA%97%E7%AC%94%E8%AE%B0%E7%9A%84%E6%8E%A5%E5%8F%A3.png"></p><p>1.<code>BlogController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hot&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current)</span> &#123;<br>        <span class="hljs-keyword">return</span> blogService.queryHotBlog(current);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> blogService.queryBlogById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IBlogService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBlogService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Blog&gt; &#123;<br>    Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(Integer current)</span>;<br>    Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>BlogServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBlogService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(Integer current)</span> &#123;<br>        <span class="hljs-comment">// 根据用户查询</span><br>        Page&lt;Blog&gt; page = query()<br>                .orderByDesc(<span class="hljs-string">&quot;liked&quot;</span>)<br>                .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br>        <span class="hljs-comment">// 获取当前页数据</span><br>        List&lt;Blog&gt; records = page.getRecords();<br>        <span class="hljs-comment">// 查询用户</span><br><span class="hljs-comment">/*        records.forEach(blog -&gt;&#123;</span><br><span class="hljs-comment">            queryBlogUser(blog);</span><br><span class="hljs-comment">        &#125;);*/</span><br>        records.forEach(<span class="hljs-built_in">this</span>::queryBlogUser);<span class="hljs-comment">//是上述方法的简写</span><br>        <span class="hljs-keyword">return</span> Result.ok(records);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.查询blog</span><br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-keyword">if</span> (blog == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;笔记不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.查询blog有关的用户</span><br>        queryBlogUser(blog);<br>        <span class="hljs-keyword">return</span> Result.ok(blog);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBlogUser</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> blog.getUserId();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br>        blog.setName(user.getNickName());<br>        blog.setIcon(user.getIcon());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h4><p>在首页的探店笔记排行榜和探店图文详情页面都有点赞的功能：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97%EF%BC%9A%E7%82%B9%E8%B5%9E%E5%8A%9F%E8%83%BD.png"></p><h5 id="案例：完善点赞功能"><a href="#案例：完善点赞功能" class="headerlink" title="案例：完善点赞功能"></a>案例：完善点赞功能</h5><p>需求：</p><ol><li>同一个用户只能点赞一次，再次点击则取消点赞。</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段<code>Blog</code>类的<code>isLike</code>属性）。</li></ol><p>实现步骤：</p><ol><li>给<code>Blog</code>类中添加一个<code>isLike</code>字段，标示是否被当前用户点赞。</li><li>修改点赞功能，利用<code>Redis</code>的<code>set</code>集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1。</li><li>修改根据<code>id</code>查询<code>Blog</code>的业务，判断当前登录用户是否点赞过，赋值给<code>isLike</code>字段。</li><li>修改分页查询<code>Blog</code>业务，判断当前登录用户是否点赞过，赋值给<code>isLike</code>字段。</li></ol><p>1.<code>BlogController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@PutMapping(&quot;/like/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> blogService.likeBlog(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IBlogService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBlogService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Blog&gt; &#123;<br>    Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>BlogServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBlogService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(Integer current)</span> &#123;<br>        <span class="hljs-comment">// 根据用户查询</span><br>        Page&lt;Blog&gt; page = query()<br>                .orderByDesc(<span class="hljs-string">&quot;liked&quot;</span>)<br>                .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br>        <span class="hljs-comment">// 获取当前页数据</span><br>        List&lt;Blog&gt; records = page.getRecords();<br>        <span class="hljs-comment">// 查询用户</span><br>        records.forEach(blog -&gt;&#123;<br>            queryBlogUser(blog);<br>            isBlogLiked(blog);<br>        &#125;);<br>        <span class="hljs-comment">//records.forEach(this::queryBlogUser);//是上述方法的简写</span><br>        <span class="hljs-keyword">return</span> Result.ok(records);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.查询blog</span><br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-keyword">if</span> (blog == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;笔记不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.查询blog有关的用户</span><br>        queryBlogUser(blog);<br>        <span class="hljs-comment">//3.查询blog是否被点赞</span><br>        isBlogLiked(blog);<br>        <span class="hljs-keyword">return</span> Result.ok(blog);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isBlogLiked</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.判断当前登录用户是否已经点赞</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blog:liked:&quot;</span> + blog.getId();<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isMember</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());<br>        blog.setIsLike(BooleanUtil.isTrue(isMember));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBlogUser</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> blog.getUserId();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br>        blog.setName(user.getNickName());<br>        blog.setIcon(user.getIcon());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.判断当前登录用户是否已经点赞</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blog:liked:&quot;</span> + id;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isMember</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());<br><br>        <span class="hljs-keyword">if</span>(BooleanUtil.isFalse(isMember))&#123;<br>            <span class="hljs-comment">//3.如果未点赞，可以点赞</span><br>            <span class="hljs-comment">//3.1数据库点赞数+1</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked + 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>            <span class="hljs-comment">//3.2保存用户到Redis的set集合</span><br>            <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>                stringRedisTemplate.opsForSet().add(key, userId.toString());<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//4.如果已点赞，取消点赞</span><br>            <span class="hljs-comment">//4.1数据库点赞数-1</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked - 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>            <span class="hljs-comment">//4.2把用户从Redis的set集合移除</span><br>            <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>                stringRedisTemplate.opsForSet().remove(key, userId.toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h4><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97%EF%BC%9A%E7%82%B9%E8%B5%9E%E6%8E%92%E8%A1%8C%E6%A6%9C.png"></p><h5 id="案例：实现查询点赞排行榜的接口"><a href="#案例：实现查询点赞排行榜的接口" class="headerlink" title="案例：实现查询点赞排行榜的接口"></a>案例：实现查询点赞排行榜的接口</h5><p>需求：按照点赞时间先后排序，返回<code>Top5</code>的用户。</p><table><thead><tr><th></th><th><strong>List</strong></th><th><strong>Set</strong></th><th><strong>SortedSet</strong></th></tr></thead><tbody><tr><td><strong>排序方式</strong></td><td>按添加顺序排序</td><td>无法排序</td><td>根据score值排序</td></tr><tr><td><strong>唯一性</strong></td><td>不唯一</td><td>唯一</td><td>唯一</td></tr><tr><td><strong>查找方式</strong></td><td>按索引查找或首尾查找</td><td>根据元素查找</td><td>根据元素查找</td></tr></tbody></table><p>选择<code>SortedSet</code>来存储点赞排行榜。</p><p>1.<code>BlogController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> blogService.queryBlogLikes(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IBlogService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBlogService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Blog&gt; &#123;<br>    Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>BlogServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBlogService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryHotBlog</span><span class="hljs-params">(Integer current)</span> &#123;<br>        <span class="hljs-comment">// 根据用户查询</span><br>        Page&lt;Blog&gt; page = query()<br>                .orderByDesc(<span class="hljs-string">&quot;liked&quot;</span>)<br>                .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br>        <span class="hljs-comment">// 获取当前页数据</span><br>        List&lt;Blog&gt; records = page.getRecords();<br>        <span class="hljs-comment">// 查询用户</span><br>        records.forEach(blog -&gt;&#123;<br>            queryBlogUser(blog);<br>            isBlogLiked(blog);<br>        &#125;);<br>        <span class="hljs-comment">//records.forEach(this::queryBlogUser);//是上述方法的简写</span><br>        <span class="hljs-keyword">return</span> Result.ok(records);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.查询blog</span><br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-keyword">if</span> (blog == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;笔记不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.查询blog有关的用户</span><br>        queryBlogUser(blog);<br>        <span class="hljs-comment">//3.查询blog是否被点赞</span><br>        isBlogLiked(blog);<br>        <span class="hljs-keyword">return</span> Result.ok(blog);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isBlogLiked</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//用户未登录，无需查询是否点赞</span><br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> user.getId();<br>        <span class="hljs-comment">//2.判断当前登录用户是否已经点赞</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> BLOG_LIKED_KEY + blog.getId();<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());<br>        blog.setIsLike(score != <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBlogUser</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> blog.getUserId();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br>        blog.setName(user.getNickName());<br>        blog.setIcon(user.getIcon());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.判断当前登录用户是否已经点赞</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> BLOG_LIKED_KEY + id;<br>        <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());<br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//3.如果未点赞，可以点赞</span><br>            <span class="hljs-comment">//3.1数据库点赞数+1</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked + 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>            <span class="hljs-comment">//3.2保存用户到Redis的set集合 zadd key value score</span><br>            <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>                stringRedisTemplate.opsForZSet().add(key,userId.toString(), System.currentTimeMillis());<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//4.如果已点赞，取消点赞</span><br>            <span class="hljs-comment">//4.1数据库点赞数-1</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked - 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>            <span class="hljs-comment">//4.2把用户从Redis的set集合移除</span><br>            <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>                stringRedisTemplate.opsForZSet().remove(key, userId.toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> BLOG_LIKED_KEY + id;<br>        <span class="hljs-comment">//1.查询top5的点赞用户 zrange key 0 4</span><br>        Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">if</span>(top5 == <span class="hljs-literal">null</span> || top5.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>        &#125;<br>        <span class="hljs-comment">//2.解析出其中的用户id</span><br>        List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>        <span class="hljs-comment">//3.根据用户id查询用户</span><br>        List&lt;UserDTO&gt; userDTOS = userService.query()<br>                .in(<span class="hljs-string">&quot;id&quot;</span>, ids)<br>                .last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list()<br>                .stream()<br>                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>                .collect(Collectors.toList());<br><br><span class="hljs-comment">/*        List&lt;UserDTO&gt; userDTOS = userService.listByIds(ids)</span><br><span class="hljs-comment">                .stream()</span><br><span class="hljs-comment">                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="hljs-comment">                .collect(Collectors.toList());*/</span><br>        <span class="hljs-comment">//这个不能按照点赞顺序来排行</span><br><br>        <span class="hljs-comment">//4.返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(userDTOS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="好友关注"><a href="#好友关注" class="headerlink" title="好友关注"></a>好友关注</h3><h4 id="关注和取关"><a href="#关注和取关" class="headerlink" title="关注和取关"></a>关注和取关</h4><p>在探店图文的详情页面中，可以关注发布笔记的作者：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E5%92%8C%E5%8F%96%E5%85%B3%E6%8E%A5%E5%8F%A3.png"></p><h5 id="案例：实现关注和取关功能"><a href="#案例：实现关注和取关功能" class="headerlink" title="案例：实现关注和取关功能"></a>案例：实现关注和取关功能</h5><p>需求：基于该表数据结构，实现两个接口：</p><ol><li>关注和取关接口</li><li>判断是否关注的接口</li></ol><p>关注是<code>User</code>之间的关系，是博主与粉丝的关系，数据库中有一张<code>tb_follow</code>表来标示：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E8%A1%A8.png"></p><p>注意：这里需要把主键修改为自增长，简化开发。</p><p>1.<code>FollowController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/follow&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FollowController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IFollowService followService;<br><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long followUserId, <span class="hljs-meta">@PathVariable(&quot;isFollow&quot;)</span> Boolean isFollow)</span> &#123;<br>        <span class="hljs-keyword">return</span> followService.follow(followUserId, isFollow);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/or/not/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span> &#123;<br>        <span class="hljs-keyword">return</span> followService.isFollow(followUserId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IFollowService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFollowService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Follow&gt; &#123;<br>    Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span>;<br>    Result <span class="hljs-title function_">isFollow</span><span class="hljs-params">(Long followUserId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>FollowServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FollowServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFollowService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br><br>        <span class="hljs-comment">//1.判断到底是关注还是取关</span><br>        <span class="hljs-keyword">if</span>(isFollow)&#123;<br>            <span class="hljs-comment">//2.关注，新增数据</span><br>            <span class="hljs-type">Follow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Follow</span>();<br>            follow.setUserId(userId);<br>            follow.setFollowUserId(followUserId);<br>            save(follow);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//3.取关，删除 delete from tb_follow where user_id = ? and follow_id = ?</span><br>            remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Follow&gt;()<br>                .eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId));<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">isFollow</span><span class="hljs-params">(Long followUserId)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ?</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId).count();<br>        <span class="hljs-keyword">return</span> Result.ok(count &gt; <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h4><p>点击博主头像，可以进入博主首页：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%8D%9A%E4%B8%BB%E9%A6%96%E9%A1%B5.png"></p><p>博主个人首页依赖两个接口：</p><p>根据<code>id</code>查询<code>user</code>信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// UserController 根据id查询用户</span><br><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;<br><span class="hljs-comment">// 查询详情</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br><span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br><span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);<br><span class="hljs-comment">// 返回</span><br><span class="hljs-keyword">return</span> Result.ok(userDTO);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据<code>id</code>查询博主的探店笔记：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// BlogController</span><br><br><span class="hljs-meta">@GetMapping(&quot;/of/user&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogByUserId</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span><br><span class="hljs-params"><span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;<br><span class="hljs-comment">// 根据用户查询</span><br>Page&lt;Blog&gt; page = blogService.query()<br>.eq(<span class="hljs-string">&quot;user_id&quot;</span>, id).page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br><span class="hljs-comment">// 获取当前页数据</span><br>List&lt;Blog&gt; records = page.getRecords();<br><span class="hljs-keyword">return</span> Result.ok(records);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例：实现共同关注功能"><a href="#案例：实现共同关注功能" class="headerlink" title="案例：实现共同关注功能"></a>案例：实现共同关注功能</h5><p>需求：利用<code>Redis</code>中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同好友。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B1%E5%90%8C%E5%85%B3%E6%B3%A8%E6%8E%A5%E5%8F%A3.png"></p><p>1.<code>FollowController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/follow&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FollowController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IFollowService followService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/common/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">followCommons</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> followService.followCommons(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFollowService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Follow&gt; &#123;<br>    Result <span class="hljs-title function_">followCommons</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>FollowServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FollowServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;FollowMapper, Follow&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IFollowService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br><br>        <span class="hljs-comment">//1.判断到底是关注还是取关</span><br>        <span class="hljs-keyword">if</span>(isFollow)&#123;<br>            <span class="hljs-comment">//2.关注，新增数据</span><br>            <span class="hljs-type">Follow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Follow</span>();<br>            follow.setUserId(userId);<br>            follow.setFollowUserId(followUserId);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(follow);<br>            <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>                <span class="hljs-comment">//把关注用户的id，放入redis的set集合 sadd userId followerUserId</span><br>                stringRedisTemplate.opsForSet().add(key, followUserId.toString());<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//3.取关，删除 delete from tb_follow where user_id = ? and follow_id = ?</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Follow&gt;()<br>                .eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId));<br>            <span class="hljs-comment">//把关注用户的id从Redis集合中移除</span><br>            <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>                stringRedisTemplate.opsForSet().remove(key, followUserId.toString());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">isFollow</span><span class="hljs-params">(Long followUserId)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ?</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId).count();<br>        <span class="hljs-keyword">return</span> Result.ok(count &gt; <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">followCommons</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//1.获取当前用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br>        <span class="hljs-comment">//2.求交集</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + id;<br>        Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);<br>        <span class="hljs-keyword">if</span>(intersect == <span class="hljs-literal">null</span> || intersect.isEmpty())&#123;<br>            <span class="hljs-comment">//无交集</span><br>            <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>        &#125;<br>        <span class="hljs-comment">//3.解析id集合</span><br>        List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());<br>        <span class="hljs-comment">//4.查询用户</span><br>        List&lt;UserDTO&gt; users = userService.listByIds(ids)<br>                .stream()<br>                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>                .collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> Result.ok(users);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h4><p>关注推送也叫做<code>Feed</code>流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81.png"></p><p><code>Feed</code>流产品有两种常见模式：</p><ol><li><p><code>Timeline</code>：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈。</p><p>优点：信息全面，不会有缺失。并且实现也相对简单</p><p>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</p></li><li><p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户。</p><p>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷</p><p>缺点：如果算法不精准，可能起到反作用</p></li></ol><p>本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：</p><ul><li>拉模式</li><li>推模式</li><li>推拉结合</li></ul><h5 id="Feed流的实现方案"><a href="#Feed流的实现方案" class="headerlink" title="Feed流的实现方案"></a>Feed流的实现方案</h5><h6 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h6><p>拉模式：也叫做读扩散。</p><p>发件人都会把消息发到发件箱。只有用户在读取的时候，才会把关注的人的发件箱里的所有消息拉取到收件箱。</p><p>优点：节省内存空间（收件箱读完之后就清空了）、消息只保存一份（消息保存至发件人的发件箱）。</p><p>缺点：每次读消息的时候都需要重新拉取发件人的发件箱的消息，然后进行排序。读取延迟久，耗时高。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81%EF%BC%88%E6%8B%89%E6%A8%A1%E5%BC%8F%EF%BC%89.png"></p><h6 id="推模式"><a href="#推模式" class="headerlink" title="推模式"></a>推模式</h6><p>推模式：也叫做写扩散。</p><p>发件人没有发件箱，当发件人发送消息时，会推送到所有粉丝的收件箱。有几个粉丝就有几份消息。</p><p>优点：延时低。</p><p>缺点：内存占用率高。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81%EF%BC%88%E6%8E%A8%E6%A8%A1%E5%BC%8F%EF%BC%89.png"></p><h6 id="推拉结合模式"><a href="#推拉结合模式" class="headerlink" title="推拉结合模式"></a>推拉结合模式</h6><p>推拉结合模式：也叫做读写混合，兼具推和拉两种模式的优点。</p><p>普通发件人使用推模式，把消息推送给每一个粉丝。</p><p>大V有发件箱，使用推模式把消息发送给活跃粉丝，普通粉丝使用拉模式。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81%EF%BC%88%E6%8E%A8%E6%8B%89%E7%BB%93%E5%90%88%E6%A8%A1%E5%BC%8F%EF%BC%89.png"></p><h6 id="Feed流的实现方案对比"><a href="#Feed流的实现方案对比" class="headerlink" title="Feed流的实现方案对比"></a>Feed流的实现方案对比</h6><table><thead><tr><th></th><th><strong>拉模式</strong></th><th><strong>推模式</strong></th><th><strong>推拉结合</strong></th></tr></thead><tbody><tr><td><strong>写比例</strong></td><td>低</td><td>高</td><td>中</td></tr><tr><td><strong>读比例</strong></td><td>高</td><td>低</td><td>中</td></tr><tr><td><strong>用户读取延迟</strong></td><td>高</td><td>低</td><td>低</td></tr><tr><td><strong>实现难度</strong></td><td>复杂</td><td>简单</td><td>很复杂</td></tr><tr><td><strong>使用场景</strong></td><td>很少使用</td><td>用户量少、没有大V</td><td>过千万的用户量，有大V</td></tr></tbody></table><h6 id="案例：基于推模式实现关注推送功能"><a href="#案例：基于推模式实现关注推送功能" class="headerlink" title="案例：基于推模式实现关注推送功能"></a>案例：基于推模式实现关注推送功能</h6><p>需求：</p><ol><li>修改新增探店笔记的业务，在保存<code>blog</code>到数据库的同时，推送到粉丝的收件箱。</li><li>收件箱满足可以根据时间戳排序，必须用<code>Redis</code>的数据结构实现。（使用<code>SortedSet</code>）</li><li>查询收件箱数据时，可以实现分页查询。</li></ol><p>1.<code>BlogController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Blog blog)</span> &#123;<br>        <span class="hljs-keyword">return</span> blogService.saveBlog(blog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IBlogService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBlogService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Blog&gt; &#123;<br>    Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(Blog blog)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>BlogServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBlogService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IFollowService followService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(Blog blog)</span> &#123;<br>        <span class="hljs-comment">//1.获取登录用户</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>        blog.setUserId(user.getId());<br>        <span class="hljs-comment">//2.保存探店博文</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(blog);<br>        <span class="hljs-keyword">if</span>(!isSuccess)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;新增笔记失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//3.查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ?</span><br>        List&lt;Follow&gt; follows = followService.query().eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, user.getId()).list();<br>        <span class="hljs-comment">//4.推送笔记id给所有粉丝</span><br>        <span class="hljs-keyword">for</span>(Follow follow : follows)&#123;<br>            <span class="hljs-comment">//4.1.获取粉丝id</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> follow.getUserId();<br>            <span class="hljs-comment">//4.2.推送</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;feed:&quot;</span> + userId;<br>            stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());<br>        &#125;<br>        <span class="hljs-comment">//5.返回id</span><br>        <span class="hljs-keyword">return</span> Result.ok(blog.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Feed流的分页问题"><a href="#Feed流的分页问题" class="headerlink" title="Feed流的分页问题"></a>Feed流的分页问题</h5><p>传统分页：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81%EF%BC%88%E4%BC%A0%E7%BB%9F%E5%88%86%E9%A1%B5%EF%BC%89.png"></p><p>滚动分页：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81%EF%BC%88%E6%BB%9A%E5%8A%A8%E5%88%86%E9%A1%B5%EF%BC%89.png"></p><h6 id="案例：实现关注推送页面的分页查询"><a href="#案例：实现关注推送页面的分页查询" class="headerlink" title="案例：实现关注推送页面的分页查询"></a>案例：实现关注推送页面的分页查询</h6><p>需求：在个人主页的“关注”卡片中，查询并展示推送的<code>Blog</code>信息：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8%EF%BC%9A%E5%85%B3%E6%B3%A8%E6%8E%A8%E9%80%81%E9%A1%B5%E9%9D%A2%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3.png"></p><p>滚动分页查询参数：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">max</span>：当前时间戳 | 上一次查询的最小时间戳<br><span class="hljs-built_in">min</span>：<span class="hljs-number">0</span><br><span class="hljs-built_in">offset</span>：<span class="hljs-number">0</span>     | 在上一次的结果中，与最小值一样的元素的个数<br><span class="hljs-built_in">count</span>：<span class="hljs-number">3</span>（每次显示多少个）<br></code></pre></td></tr></table></figure><p>1.<code>BlogController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/of/follow&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(&quot;lastId&quot;)</span> <span class="hljs-type">long</span> max, <span class="hljs-meta">@RequestParam(value = &quot;offset&quot;, defaultValue = &quot;0&quot;)</span> Integer offset)</span>&#123;<br>        <span class="hljs-keyword">return</span> blogService.queryBlogOfFollow(max, offset);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IBlogService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBlogService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Blog&gt; &#123;<br>    Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(<span class="hljs-type">long</span> max, Integer offset)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>BlogServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BlogMapper, Blog&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBlogService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IFollowService followService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(<span class="hljs-type">long</span> max, Integer offset)</span> &#123;<br>        <span class="hljs-comment">//1.获取当前用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.查询收件箱</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> FEED_KEY + userId;<br>        Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet()<br>                .reverseRangeByScoreWithScores(key, <span class="hljs-number">0</span>, max, offset, <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//3.非空判断</span><br>        <span class="hljs-keyword">if</span>(typedTuples == <span class="hljs-literal">null</span> || typedTuples.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> Result.ok();<br>        &#125;<br>        <span class="hljs-comment">//4.解析数据：blogId、minTime（时间戳）、offset</span><br>        List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(typedTuples.size());<br>        <span class="hljs-type">long</span> <span class="hljs-variable">minTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples)&#123;<br>            <span class="hljs-comment">//4.1获取id</span><br>            ids.add(Long.valueOf(tuple.getValue()));<br>            <span class="hljs-comment">//4.2获取分数（时间戳）</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> tuple.getScore().longValue();<br>            <span class="hljs-keyword">if</span>(time == minTime) &#123;<br>                os++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                minTime = time;<br>                os = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//5.根据id查询blog</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>        List&lt;Blog&gt; blogs = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br><br>        <span class="hljs-keyword">for</span>(Blog blog : blogs)&#123;<br>            <span class="hljs-comment">//5.1.查询blog有关的用户</span><br>            queryBlogUser(blog);<br>            <span class="hljs-comment">//5.2.查询blog是否被点赞</span><br>            isBlogLiked(blog);<br>        &#125;<br><br>        <span class="hljs-comment">//5.封装并返回</span><br>        <span class="hljs-type">ScrollResult</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScrollResult</span>();<br>        r.setList(blogs);<br>        r.setOffset(os);<br>        r.setMinTime(minTime);<br><br>        <span class="hljs-keyword">return</span> Result.ok(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="附近商户"><a href="#附近商户" class="headerlink" title="附近商户"></a>附近商户</h3><h4 id="GEO数据结构"><a href="#GEO数据结构" class="headerlink" title="GEO数据结构"></a>GEO数据结构</h4><p><code>GEO</code>就是<code>Geolocation</code>的简写形式，代表地理坐标。<code>Redis</code>在<code>3.2</code>版本中加入了对<code>GEO</code>的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li><code>GEOADD</code>：添加一个地理空间信息，包含：经度（<code>longitude</code>）、纬度（<code>latitude</code>）、值（<code>member</code>）。</li><li><code>GEODIST</code>：计算指定的两个点之间的距离并返回。</li><li><code>GEOHASH</code>：将指定<code>member</code>的坐标转为<code>hash</code>字符串形式并返回。</li><li><code>GEOPOS</code>：返回指定<code>member</code>的坐标。</li><li><code>GEORADIUS</code>：指定圆心、半径，找到该圆内包含的所有<code>member</code>，并按照与圆心之间的距离排序后返回。6.2以后已废弃。</li><li><code>GEOSEARCH</code>：在指定范围内搜索<code>member</code>，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能。</li><li><code>GEOSEARCHSTORE</code>：与<code>GEOSEARCH</code>功能一致，不过可以把结果存储到一个指定的<code>key</code>。 6.2.新功能。</li></ul><h5 id="案例：练习Redis的GEO功能"><a href="#案例：练习Redis的GEO功能" class="headerlink" title="案例：练习Redis的GEO功能"></a>案例：练习Redis的GEO功能</h5><p>需求：</p><ol><li>添加下面几条数据：<ul><li>北京南站（ 116.378248 39.865275 ）</li><li>北京站（ 116.42803 39.903738 ）</li><li>北京西站（ 116.322287 39.893729 ）</li></ul></li><li>计算北京西站到北京站的距离。</li><li>搜索天安门（ 116.397904 39.909005 ）附近10km内的所有火车站，并按照距离升序排序。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Redis">127.0.0.1:6379[1]&gt; GEOADD g1 116.378248 39.865275 bjn 116.42803 39.903738 bjz 116.322287 39.893729 bjx<br>(integer) 3<br>127.0.0.1:6379[1]&gt; GEODIST g1 bjn bjx<br>&quot;5729.9533&quot;<br>127.0.0.1:6379[1]&gt; GEODIST g1 bjn bjx km<br>&quot;5.7300&quot;<br>127.0.0.1:6379[1]&gt; GEODIST g1 bjx bjz km<br>&quot;9.0916&quot;<br>127.0.0.1:6379[1]&gt; GEOSEARCH g1 FROMLONLAT 116.397904 39.909005 BYRADIUS 10 km WITHDIST<br>1) 1) &quot;bjz&quot;<br>   2) &quot;2.6361&quot;<br>2) 1) &quot;bjn&quot;<br>   2) &quot;5.1452&quot;<br>3) 1) &quot;bjx&quot;<br>   2) &quot;6.6723&quot;<br>127.0.0.1:6379[1]&gt; GEOPOS g1 bjz<br>1) 1) &quot;116.42802804708480835&quot;<br>   2) &quot;39.90373880538094653&quot;<br>127.0.0.1:6379[1]&gt; GEOHASH g1 bjz<br>1) &quot;wx4g12k21s0&quot;<br>127.0.0.1:6379[1]&gt;<br></code></pre></td></tr></table></figure><h4 id="附近商户搜索"><a href="#附近商户搜索" class="headerlink" title="附近商户搜索"></a>附近商户搜索</h4><p>1.在首页中点击某个频道，即可看到频道下的商户：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E9%99%84%E8%BF%91%E5%95%86%E6%88%B7%EF%BC%9A%E9%A2%91%E9%81%93%E4%B8%8B%E5%95%86%E6%88%B7%E6%8E%A5%E5%8F%A3.png"></p><p>2.按照商户类型做分组，类型相同的商户作为同一组，以<code>typeId</code>为<code>key</code>存入同一个<code>GEO</code>集合中即可。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E9%99%84%E8%BF%91%E5%95%86%E6%88%B7%EF%BC%9ARedis%E5%AD%98%E5%82%A8%E5%95%86%E6%88%B7.png"></p><p>在测试类中导入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HmDianPingApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ShopServiceImpl shopService;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadShopData</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.查询店铺信息</span><br>        List&lt;Shop&gt; list = shopService.list();<br>        <span class="hljs-comment">//2.把店铺分组，按照typeId分组，id一致的放到一个集合</span><br>        Map&lt;Long, List&lt;Shop&gt;&gt; map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId));<br>        <span class="hljs-comment">//3.分批完成写入Redis</span><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet())&#123;<br>            <span class="hljs-comment">//3.1.获取类型id</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">typeId</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;shop:geo:&quot;</span> + typeId;<br>            <span class="hljs-comment">//3.2.获取同类型的店铺的集合</span><br>            List&lt;Shop&gt; value = entry.getValue();<br>            List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(value.size());<br>            <span class="hljs-comment">//3.3写入Redis GEOADD key 经度 维度 member</span><br>            <span class="hljs-keyword">for</span>(Shop shop : value)&#123;<br>                <span class="hljs-comment">//stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());//单条插入</span><br>                locations.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(<br>                        shop.getId().toString(),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(shop.getX(), shop.getY())<br>                ));<br>            &#125;<br>            stringRedisTemplate.opsForGeo().add(key, locations);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>SpringDataRedis</code>的<code>2.3.9</code>版本并不支持<code>Redis 6.2</code>提供的<code>GEOSEARCH</code>命令，因此我们需要提示其版本，修改自己的<code>POM</code>文件，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.data<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.data<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lettuce-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.lettuce<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.<code>ShopController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/shop&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">public</span> IShopService shopService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据商铺类型分页查询商铺信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> typeId 商铺类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> current 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 商铺列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/of/type&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(&quot;typeId&quot;)</span> Integer typeId,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;x&quot;, required = false)</span> Double x,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;y&quot;, required = false)</span> Double y</span><br><span class="hljs-params">    )</span> &#123;<br>        <span class="hljs-keyword">return</span> shopService.queryShopByType(typeId, current, x, y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.<code>IShopService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IShopService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Shop&gt; &#123;<br>    Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(Integer typeId, Integer current, Double x, Double y)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.<code>ShopServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;<br>        <span class="hljs-comment">//1.判断是否需要根据坐标查询</span><br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-literal">null</span> || y == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 不需要坐标查询，按数据库查询</span><br>            Page&lt;Shop&gt; page = query()<br>                    .eq(<span class="hljs-string">&quot;type_id&quot;</span>, typeId)<br>                    .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));<br>            <span class="hljs-comment">// 返回数据</span><br>            <span class="hljs-keyword">return</span> Result.ok(page.getRecords());<br>        &#125;<br>        <span class="hljs-comment">//2.计算分页参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">from</span> <span class="hljs-operator">=</span> (current - <span class="hljs-number">1</span>) * SystemConstants.DEFAULT_PAGE_SIZE;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> current * SystemConstants.DEFAULT_PAGE_SIZE;<br>        <span class="hljs-comment">//3.查询redis、按照距离排序、分页。结果：shopId、distance</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> SHOP_GEO_KEY + typeId;<br>        <span class="hljs-comment">//GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE</span><br>        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo()<br>                .search(<br>                        key,<br>                        GeoReference.fromCoordinate(x, y),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(<span class="hljs-number">5000</span>),<br>                        RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)<br>                );<br>        <span class="hljs-comment">//4.解析出id</span><br>        <span class="hljs-keyword">if</span>(results == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>        &#125;<br>        List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();<br>        <span class="hljs-keyword">if</span>(list.size() &lt;= from)&#123;<br>            <span class="hljs-comment">//没有下一页了，结束</span><br>            <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>        &#125;<br><br>        <span class="hljs-comment">//4.1截取from-end的部分</span><br>        List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(list.size());<br>        Map&lt;String, Distance&gt; distanceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(list.size());<br>        list.stream().skip(from).forEach(result-&gt;&#123;<br>            <span class="hljs-comment">//4.2获取店铺id</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">shopIdStr</span> <span class="hljs-operator">=</span> result.getContent().getName();<br>            ids.add(Long.valueOf(shopIdStr));<br>            <span class="hljs-comment">//4.3获取距离</span><br>            <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> result.getDistance();<br>            distanceMap.put(shopIdStr, distance);<br>        &#125;);<br>        <span class="hljs-comment">//5.根据id查询shop</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>        List&lt;Shop&gt; shops = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>        <span class="hljs-keyword">for</span>(Shop shop : shops)&#123;<br>            shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());<br>        &#125;<br>        <span class="hljs-comment">//6.返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(shops);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h3><h4 id="BitMap用法"><a href="#BitMap用法" class="headerlink" title="BitMap用法"></a>BitMap用法</h4><p>假如我们用一张表来存储用户签到信息，其结构应该如下：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0%EF%BC%9A%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0%E6%95%B0%E6%8D%AE%E8%A1%A8.png"></p><p>假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为1亿条。</p><p>每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22字节的内存，一个月则最多需要600多字节。</p><p>我们按月来统计用户签到信息，签到记录为1，未签到则记录为0。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0%EF%BC%9ABitMap%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0%E8%A1%A8.png"></p><p>把每一个<code>bit</code>位对应当月的每一天，形成了映射关系。用<code>0</code>和<code>1</code>标示业务状态，这种思路就称为位图（<code>BitMap</code>）。</p><p><code>Redis</code>中是利用<code>string</code>类型数据结构实现<code>BitMap</code>，因此最大上限是<code>512M</code>，转换为<code>bit</code>则是<code>2^32</code>个<code>bit</code>位。</p><p><code>BitMap</code>的操作命令有：</p><ul><li><code>SETBIT</code>：向指定位置（<code>offset</code>）存入一个0或1。</li><li><code>GETBIT</code> ：获取指定位置（<code>offset</code>）的<code>bit</code>值。</li><li><code>BITCOUNT</code> ：统计<code>BitMap</code>中值为1的<code>bit</code>位的数量。</li><li><code>BITFIELD</code>：操作（查询、修改、自增）<code>BitMap</code>中<code>bit</code>数组中的指定位置（<code>offset</code>）的值。</li><li><code>BITFIELD_RO</code>：获取<code>BitMap</code>中<code>bit</code>数组，并以十进制形式返回。</li><li><code>BITOP</code>：将多个<code>BitMap</code>的结果做位运算（与 、或、异或）。</li><li><code>BITPOS</code>：查找<code>bit</code>数组中指定范围内第一个0或1出现的位置。</li></ul><h4 id="签到功能"><a href="#签到功能" class="headerlink" title="签到功能"></a>签到功能</h4><h5 id="案例：实现签到功能"><a href="#案例：实现签到功能" class="headerlink" title="案例：实现签到功能"></a>案例：实现签到功能</h5><p>需求：实现签到接口，将当前用户当天签到信息保存到<code>Redis</code>中。</p><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>请求方式</td><td>Post</td></tr><tr><td>请求路径</td><td>&#x2F;user&#x2F;sign</td></tr><tr><td>请求参数</td><td>无</td></tr><tr><td>返回值</td><td>无</td></tr></tbody></table><p>提示：因为<code>BitMap</code>底层是基于<code>String</code>数据结构，因此其操作也都封装在字符串相关操作中了。</p><p>1.<code>UserController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/sign&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.sign();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IUserService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>    Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>UserServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.获取当前登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.获取日期</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-comment">//3.拼接key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">keySuffix</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> USER_SIGN_KEY + userId + keySuffix;<br>        <span class="hljs-comment">//4.获取今天是本月的第几天</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>        <span class="hljs-comment">//5.写入Redis SETBIT key offset 1</span><br>        stringRedisTemplate.opsForValue().setBit(key, dayOfMonth-<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>1.在<code>Postman</code>中使用<code>http://localhost:8080/api/user/sign</code>的<code>POST</code>请求，请求头带上<code>authorization</code>，即可给该<code>authorization</code>对应的用户进行签到。</p><p>2.在<code>Redis</code>客户端使用<code>SETBIT</code>进行手动添加签到信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Redis">127.0.0.1:6379&gt; SETBIT sign:1010:202412 1 1<br>(integer) 1<br>127.0.0.1:6379&gt; SETBIT sign:1010:202412 2 1<br>(integer) 0<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><h4 id="签到统计"><a href="#签到统计" class="headerlink" title="签到统计"></a>签到统计</h4><ol><li>连续签到天数：从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。</li><li>得到本月到今天为止的所有签到数据：<code>BITFIELD key GET u[dayOfMonth] 0</code>。</li><li>从后向前遍历每个<code>bit</code>位：与 1 做与运算，就能得到最后一个<code>bit</code>位。随后右移1位，下一个<code>bit</code>位就成为了最后一个<code>bit</code>位。</li></ol><h5 id="案例：实现签到统计功能"><a href="#案例：实现签到统计功能" class="headerlink" title="案例：实现签到统计功能"></a>案例：实现签到统计功能</h5><p>需求：实现下面接口，统计当前用户截止当前时间在本月的连续签到天数。</p><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>请求方式</td><td>GET</td></tr><tr><td>请求路径</td><td>&#x2F;user&#x2F;sign&#x2F;count</td></tr><tr><td>请求参数</td><td>无</td></tr><tr><td>返回值</td><td>连续签到天数</td></tr></tbody></table><p>1.<code>UserController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/sign/count&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.signCount();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.<code>IUserService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>    Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>UserServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.获取当前登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//2.获取日期</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-comment">//3.拼接key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">keySuffix</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> USER_SIGN_KEY + userId + keySuffix;<br>        <span class="hljs-comment">//4.获取今天是本月的第几天</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>        <span class="hljs-comment">//5.获取本月截止今天为止的所有的签到记录，返回的是一个十进制的数字 BITFIELD sign:5:202203 GET u14 0</span><br>        List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(<br>                key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">0</span>)<br>        );<br>        <span class="hljs-keyword">if</span>(result == <span class="hljs-literal">null</span> || result.isEmpty())&#123;<br>            <span class="hljs-comment">//没有任何签到结果</span><br>            <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(num == <span class="hljs-literal">null</span> || num == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-comment">//6.循环遍历</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//让这个数字与1做与运算，得到数字的最后一个bit位</span><br>            <span class="hljs-comment">//判断这个bit位是否位0</span><br>            <span class="hljs-keyword">if</span>((num &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//如果为0，说明未签到，结束</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果不为0，说明已签到，计数器+1</span><br>                count++;<br>            &#125;<br>            <span class="hljs-comment">//把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span><br>            num &gt;&gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok(count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>1.在<code>Postman</code>中使用<code>http://localhost:8080/api/user/sign/count</code>的<code>GET</code>请求，请求头带上<code>authorization</code>，即可给该<code>authorization</code>对应的用户进行当前月份截止今天的连续签到时间数。</p><p>响应格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;success&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="UV统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h3><h4 id="HyperLogLog用法"><a href="#HyperLogLog用法" class="headerlink" title="HyperLogLog用法"></a>HyperLogLog用法</h4><p>首先我们搞懂两个概念：</p><ul><li><code>UV</code>：全称<code>Unique Visitor</code>，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li><li><code>PV</code>：全称<code>Page View</code>，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次<code>PV</code>，用户多次打开页面，则记录多次<code>PV</code>。往往用来衡量网站的流量。</li></ul><p><code>UV</code>统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到<code>Redis</code>中，数据量会非常恐怖。</p><p><code>Hyperloglog</code>（<code>HLL</code>）是从<code>Loglog</code>算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a></p><p><code>Redis</code>中的<code>HLL</code>是基于<code>string</code>结构实现的，单个<code>HLL</code>的内存永远小于<code>16kb</code>，内存占用低的令人发指！作为代价，其测量结果是概率性的，有小于<code>0.81％</code>的误差。不过对于<code>UV</code>统计来说，这完全可以忽略。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%883%EF%BC%89/UV%E7%BB%9F%E8%AE%A1%EF%BC%9AHyperLogLog%E7%94%A8%E6%B3%95.png"></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>添加相同的值，也不会重复计数，而且值越少，误差越小，个数估计也越精准。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Redis">127.0.0.1:6379[1]&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 1<br>127.0.0.1:6379[1]&gt; PFCOUNT hl1<br>(integer) 5<br>127.0.0.1:6379[1]&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 0<br>127.0.0.1:6379[1]&gt; PFADD hl1 e1 e2 e3 e4 e5<br>(integer) 0<br>127.0.0.1:6379[1]&gt; PFCOUNT hl1<br>(integer) 5<br></code></pre></td></tr></table></figure><h4 id="实现UV统计"><a href="#实现UV统计" class="headerlink" title="实现UV统计"></a>实现UV统计</h4><p>直接利用单元测试，向<code>HyperLogLog</code>中添加100万条数据，看看内存占用和统计效果如何：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HmDianPingApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHyperLogLog</span><span class="hljs-params">()</span>&#123;<br>        String[] values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">1000</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">1000000</span>; i++)&#123;<br>            j = i % <span class="hljs-number">1000</span>;<br>            values[j] = <span class="hljs-string">&quot;user_&quot;</span> + i;<br>            <span class="hljs-keyword">if</span>(j == <span class="hljs-number">999</span>)&#123;<br>                <span class="hljs-comment">//发送到Redis</span><br>                stringRedisTemplate.opsForHyperLogLog().add(<span class="hljs-string">&quot;hl2&quot;</span>, values);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//统计数量</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForHyperLogLog().size(<span class="hljs-string">&quot;hl2&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;count = &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>HyperLogLog</code>的作用：</p><ul><li>做海量数据的统计工作</li></ul><p><code>HyperLogLog</code>的优点：</p><ul><li>内存占用极低</li><li>性能非常好</li></ul><p><code>HyperLogLog</code>的缺点：</p><ul><li>有一定的误差</li></ul><h5 id="Pipeline导入数据"><a href="#Pipeline导入数据" class="headerlink" title="Pipeline导入数据"></a>Pipeline导入数据</h5><p>如果要导入大量数据到<code>Redis</code>中，可以有多种方式：</p><ul><li>每次一条，<code>for</code>循环写入。</li><li>每次多条，批量写入。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java-Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java-Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Redis：实战篇（2）</title>
    <link href="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/"/>
    <url>/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h3><h4 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h4><p>每个店铺都可以发布优惠券。</p><p>当用户抢购时，就会生成订单并保存到<code>tb_voucher_order</code>这张表中，而订单表如果使用数据库自增<code>ID</code>就存在一些问题：</p><ul><li><code>id</code>的规律性太明显。</li><li>受单表数据量的限制。</li></ul><p>全局<code>ID</code>生成器，是一种在<strong>分布式系统</strong>下用来<strong>生成全局唯一ID的工具</strong>，一般要满足下列特性：</p><ul><li>唯一性</li><li>高可用</li><li>高性能</li><li>递增性</li><li>安全性</li></ul><h5 id="ID组成部分"><a href="#ID组成部分" class="headerlink" title="ID组成部分"></a>ID组成部分</h5><p>为了增加<code>ID</code>的安全性，我们可以不直接使用<code>Redis</code>自增的数值，而是拼接一些其它信息：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80ID.png"></p><p><code>ID</code>的组成部分：</p><ul><li>符号位：<code>1bit</code>，永远为0</li><li>时间戳：<code>31bit</code>，以秒为单位，可以使用69年</li><li>序列号：<code>32bit</code>，秒内的计数器，支持每秒产生2^32个不同<code>ID</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisIdWorker</span> &#123;<br>    <span class="hljs-comment">//开始时间戳</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BEGIN_TIMESTAMP</span> <span class="hljs-operator">=</span> <span class="hljs-number">1640995200L</span>;<br><br>    <span class="hljs-comment">//序列号的位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String keyPrefix)</span> &#123;<br>        <span class="hljs-comment">//1.生成时间戳</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowSecond</span> <span class="hljs-operator">=</span> now.toEpochSecond(ZoneOffset.UTC);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> nowSecond - BEGIN_TIMESTAMP;<br><br>        <span class="hljs-comment">//2.生成序列号</span><br>        <span class="hljs-comment">//2.1 获取当前日期，精确到天</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy:MM:dd&quot;</span>));<br>        <span class="hljs-comment">//2.2 自增长</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="hljs-string">&quot;icr:&quot;</span> + keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + date);<br>        <span class="hljs-comment">// 每天的订单对应一个key，不同的订单对应不同的key，key自增的上限是当天的订单数。</span><br>        <span class="hljs-comment">// 这样避免了全部的订单对应同一个key，可能全部订单数有一天会超出2^32。</span><br><br>        <span class="hljs-comment">//3.拼接并返回</span><br>        <span class="hljs-keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2022</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> time.toEpochSecond(ZoneOffset.UTC);<br>        System.out.println(<span class="hljs-string">&quot;second = &quot;</span> + second);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用测试方法进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HmDianPingApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">500</span>);<span class="hljs-comment">//500个线程</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SpringUtil springUtil;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIdWorker</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">300</span>);<span class="hljs-comment">//使得异步变同步，让计时器有效</span><br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<span class="hljs-comment">//任务：生成100个id</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++)&#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>                System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);<br>            &#125;<br>            latch.countDown();<span class="hljs-comment">//每次任务进行一次，countDown计数器减一</span><br>        &#125;;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">300</span>; i++)&#123;<span class="hljs-comment">//任务提交300次，每次100个id，一共是30000个id</span><br>            es.submit(task);<span class="hljs-comment">//异步</span><br>        &#125;<br>        latch.await();<span class="hljs-comment">//await谁调用就是让谁暂停，要等CountDownLatch计数器为0，才能进行主线程</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;time = &quot;</span> + (end - begin));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>全局唯一<code>ID</code>生成策略：</p><ul><li><code>UUID</code></li><li><code>Redis</code>自增</li><li><code>snowflake</code>算法</li><li>数据库自增</li></ul><p><code>Redis</code>自增<code>ID</code>策略：</p><ul><li>每天一个<code>key</code>，方便统计订单量</li><li><code>ID</code>构造是 时间戳 + 计数器</li></ul><h4 id="实现优惠券秒杀下单"><a href="#实现优惠券秒杀下单" class="headerlink" title="实现优惠券秒杀下单"></a>实现优惠券秒杀下单</h4><h5 id="优惠券"><a href="#优惠券" class="headerlink" title="优惠券"></a>优惠券</h5><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%AE%9E%E7%8E%B0%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%E4%B8%8B%E5%8D%95%EF%BC%88%E5%B9%B3%E4%BB%B7%E5%88%B8%E5%92%8C%E7%89%B9%E4%BB%B7%E5%88%B8%EF%BC%89.png"></p><p>表关系如下：</p><p><code>tb_voucher</code>：优惠券的基本信息，优惠金额、使用规则等。</p><p><code>tb_seckill_voucher</code>：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息。</p><h5 id="添加秒杀优惠券"><a href="#添加秒杀优惠券" class="headerlink" title="添加秒杀优惠券"></a>添加秒杀优惠券</h5><p>在<code>VoucherController</code>中提供了一个接口，可以添加秒杀优惠券：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/voucher&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IVoucherService voucherService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增秒杀券</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> voucher 优惠券信息，包含秒杀信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 优惠券id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;seckill&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Voucher voucher)</span> &#123;<br>        voucherService.addSeckillVoucher(voucher);<br>        <span class="hljs-keyword">return</span> Result.ok(voucher.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%AE%9E%E7%8E%B0%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%E4%B8%8B%E5%8D%95%EF%BC%88%E6%8A%A2%E5%88%B8%EF%BC%89.png"></p><h5 id="实现优惠券秒杀的下单功能"><a href="#实现优惠券秒杀的下单功能" class="headerlink" title="实现优惠券秒杀的下单功能"></a>实现优惠券秒杀的下单功能</h5><p>下单时需要判断两点：</p><ul><li>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单。</li><li>库存是否充足，不足则无法下单。</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%AE%9E%E7%8E%B0%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%E4%B8%8B%E5%8D%95%EF%BC%88%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%89.png"></p><p>1.<code>VoucherOrderController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/voucher-order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IVoucherOrderService voucherOrderService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;seckill/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long voucherId)</span> &#123;<br>        <span class="hljs-keyword">return</span> voucherOrderService.seckillVoucher(voucherId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IVoucherOrderService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IVoucherOrderService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;VoucherOrder&gt; &#123;<br>    Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>VoucherOrderServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoucherOrderService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>        <span class="hljs-comment">//1.查询优惠券</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>        <span class="hljs-comment">//2.判断秒杀是否开始</span><br>        <span class="hljs-keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;<br>            <span class="hljs-comment">//尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//3.判断秒杀是否已经结束</span><br>        <span class="hljs-keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//4.判断库存是否充足</span><br>        <span class="hljs-keyword">if</span>(voucher.getStock() &lt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//库存不足</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//5.扣减库存</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).update();<br>        <span class="hljs-keyword">if</span>(!success)&#123;<br>            <span class="hljs-comment">//扣减失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//6.创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>        <span class="hljs-comment">//6.1 订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        voucherOrder.setId(orderId);<br>        <span class="hljs-comment">//6.2 用户id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        voucherOrder.setUserId(userId);<br>        <span class="hljs-comment">//6.3 代金券id</span><br>        voucherOrder.setVoucherId(voucherId);<br>        save(voucherOrder);<br><br>        <span class="hljs-comment">//7.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>在商店页面点击代金券的<code>限时抢购</code>按钮，抢购成功返回订单号。</p><h4 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h4><h5 id="超卖现象"><a href="#超卖现象" class="headerlink" title="超卖现象"></a>超卖现象</h5><p>1.正常情况下，不出现超卖。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%8D%E5%87%BA%E7%8E%B0%E8%B6%85%E5%8D%96%EF%BC%89.png"></p><p>2.多线程并发下，出现超卖现象。</p><p>分析：因为一开始有很多线程进来，查询库存时，库存是充足的，此时有线程扣减库存进行了更新，但是有很多线程在此之前已经查询到了旧的库存，导致不一致的情况。此后这些线程会在库存不足的情况下还进行扣减，导致出现了超卖现象。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%EF%BC%88%E5%87%BA%E7%8E%B0%E8%B6%85%E5%8D%96%EF%BC%89.png"></p><h6 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h6><p>1.使用<code>Jmeter</code>进行测试，定义<code>线程组</code>，设置200个线程，执行时间为0s。</p><p>2.填写<code>HTTP请求</code>。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%AE%9E%E7%8E%B0%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%E4%B8%8B%E5%8D%95%EF%BC%88Jmeter%E6%B5%8B%E8%AF%95%EF%BC%89.png"></p><p>3.在<code>登录状态头</code>设置<code>Authorization</code>，然后运行。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%AE%9E%E7%8E%B0%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%E4%B8%8B%E5%8D%95%EF%BC%88Jmeter%E6%B5%8B%E8%AF%952%EF%BC%89.png"></p><p>4.运行结束后在<code>查看结果树</code>中查看运行的结果。</p><p>5.在数据库查看库存，可以发现库存是负数，订单数多于100，这是因为出现了超卖现象。</p><h5 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h5><p>超卖问题是典型的<strong>多线程安全问题</strong>，针对这一问题的常见<strong>解决方案就是加锁</strong>。</p><p>1.<strong>悲观锁</strong></p><p>认为线程安全问题一定会发生，因此在操作数据之前先获取锁，确保线程串行执行。</p><ul><li>例如<code>Synchronized</code>、<code>Lock</code>都属于悲观锁。悲观锁添加同步锁，让<strong>线程串行执行</strong>。</li><li>优点：简单粗暴。</li><li>缺点：性能一般。</li></ul><p>2.<strong>乐观锁</strong></p><p>认为线程安全问题不一定会发生，因此不加锁，只是在更新数据时去判断有没有其它线程对数据做了修改。</p><ul><li>如果没有修改则认为是安全的，自己才更新数据。</li><li>如果已经被其它线程修改说明发生了安全问题，此时可以重试或异常。</li></ul><p>乐观锁不加锁，在更新时判断是否有其它线程在修改。</p><ul><li>优点：性能好。</li><li>缺点：存在成功率低的问题。（当一下子涌入多个线程时，每个线程同时到达查询库存，此时多个线程中库存的值都是相同的，当有一个线程修改了库存，那么这些其他线程都无法成功扣减库存，导致成功率过低。）</li></ul><p>乐观锁的关键是<strong>判断之前查询得到的数据是否有被修改过</strong>，常见的方式有两种： </p><p>（1）<strong>版本号法</strong></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%E4%B9%90%E8%A7%82%E9%94%81%EF%BC%88%E7%89%88%E6%9C%AC%E5%8F%B7%E6%B3%95%EF%BC%89.png"></p><p>（2）<strong>CAS法</strong></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98%E4%B9%90%E8%A7%82%E9%94%81%EF%BC%88CAS%E6%B3%95%EF%BC%89.png"></p><h6 id="使用CAS法"><a href="#使用CAS法" class="headerlink" title="使用CAS法"></a>使用CAS法</h6><p>弊端：失败的概率大大增加。一开始有无数的线程涌进来，因为没加锁，线程全部并行运行。所以一堆线程查库存时会查到100个库存。加入100个线程都查到了库存为100，但是只会有一条线程执行扣减语句成功，此时库存为99，则剩下的99个线程因为stock查询时100，和现有库存99不一致，导致无法进行扣减，所以这99个线程都会失败。其实这些线程有些是能够进行扣减的，因此导致了失败率大大增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//5.扣减库存</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>    .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>    .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>    .eq(<span class="hljs-string">&quot;stock&quot;</span>, voucher.getStock()) <span class="hljs-comment">// where id = ? and stock = ?</span><br>    .update();<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><p>1.使用<code>Jmeter</code>进行测试，定义<code>线程组</code>，设置200个线程，执行时间为0s。</p><p>2.填写<code>HTTP请求</code>。在<code>登录状态头</code>设置<code>Authorization</code>，然后运行（和上述超卖现象一样）。</p><p>3.运行结束后在<code>查看结果树</code>中查看运行的结果。</p><p>4.在数据库查看库存，可以发现库存大概在70-80之间，失败率较高。</p><h6 id="只判断库存是否大于0"><a href="#只判断库存是否大于0" class="headerlink" title="只判断库存是否大于0"></a>只判断库存是否大于0</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//5.扣减库存</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>    .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>    .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>    .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>    .update();<br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><p>和上述方法一样使用<code>Jmeter</code>，在数据库查看库存，可以看到刚好库存只剩0，说明没有出现超卖，也没有失败率高的情况。</p><h4 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h4><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%89.png"></p><h5 id="一人一单的并发安全问题"><a href="#一人一单的并发安全问题" class="headerlink" title="一人一单的并发安全问题"></a>一人一单的并发安全问题</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%89.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>    <span class="hljs-comment">//1.查询优惠券</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">//2.判断秒杀是否开始</span><br>    <span class="hljs-keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;<br>        <span class="hljs-comment">//尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.判断秒杀是否已经结束</span><br>    <span class="hljs-keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.判断库存是否充足</span><br>    <span class="hljs-keyword">if</span>(voucher.getStock() &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//库存不足</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//5.一人一单</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">//5.1 查询订单</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>    <span class="hljs-comment">//5.2 判断是否存在</span><br>    <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买一次！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//6.扣减库存</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>        .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>        .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>        .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>        .update();<br>    <span class="hljs-keyword">if</span>(!success)&#123;<br>        <span class="hljs-comment">//扣减失败</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//7.创建订单</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>    <span class="hljs-comment">//7.1 订单id</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    voucherOrder.setId(orderId);<br>    <span class="hljs-comment">//7.2 用户id</span><br>    voucherOrder.setUserId(userId);<br>    <span class="hljs-comment">//7.3 代金券id</span><br>    voucherOrder.setVoucherId(voucherId);<br>    save(voucherOrder);<br><br>    <span class="hljs-comment">//8.返回订单id</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h6><p>和超卖问题一样使用<code>Jmeter</code>，在数据库查看库存，可以看到虽然同一个用户没有把所有库存都减为0，但是一个用户也扣减了10个库存，说明还是存在一人多单的问题。</p><p>分析：这是因为当一个用户的多个线程进入时，同时查询订单都不存在，此时这多个线程都会去扣减库存，直到建立订单之后的线程才会失败，因此出现一人多单的现象。</p><h5 id="解决单点的一人一单并发安全问题"><a href="#解决单点的一人一单并发安全问题" class="headerlink" title="解决单点的一人一单并发安全问题"></a>解决单点的一人一单并发安全问题</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88%E4%BD%BF%E7%94%A8%E4%BA%92%E6%96%A5%E9%94%81%E8%A7%A3%E5%86%B3%EF%BC%89.png"></p><p>1.引入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.<code>IVoucherOrderService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IVoucherOrderService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;VoucherOrder&gt; &#123;<br><br>    Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>;<br>    Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>VoucherOrderServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoucherOrderService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>        <span class="hljs-comment">//1.查询优惠券</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>        <span class="hljs-comment">//2.判断秒杀是否开始</span><br>        <span class="hljs-keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;<br>            <span class="hljs-comment">//尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//3.判断秒杀是否已经结束</span><br>        <span class="hljs-keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//4.判断库存是否充足</span><br>        <span class="hljs-keyword">if</span>(voucher.getStock() &lt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//库存不足</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<span class="hljs-comment">//每个用户一个锁</span><br>        <span class="hljs-comment">// 锁应该锁住整个事务。</span><br>        <span class="hljs-comment">// 原因：如果在事务里面定义锁，当锁执行完释放锁之后，其他线程进来查询订单时，</span><br>        <span class="hljs-comment">// 事务里面新增的订单可能还没有写入数据库，因为还没有提交事务。所有查询时依然可能存在并发安全问题。</span><br>        <span class="hljs-comment">// 因此锁锁定的范围应该是整个事务，在事务提交之后再释放锁。</span><br>        <span class="hljs-keyword">synchronized</span> (userId.toString().intern())&#123;<br>            <span class="hljs-comment">// toString不能保证安装值来加锁，因为toString内部new String，所以每调用一次toString都是一个全新的字符串对象，</span><br>            <span class="hljs-comment">// 因此即使userId一样，toString之后都是全新的对象，都是不一样的锁。</span><br>            <span class="hljs-comment">// 调用intern方法：返回字符串对象的规范表示，去字符串常量池里面找值一样的字符串地址，此时值一样，intern返回结果一样。锁就一样。</span><br><br>            <span class="hljs-comment">// 获取代理对象（事务）</span><br>            <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<span class="hljs-comment">//拿到当前对象的代理对象</span><br>            <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br><br>            <span class="hljs-comment">// return createVoucherOrder(voucherId);</span><br>            <span class="hljs-comment">// 这里return createVoucherOrder(voucherId);相当于调用 return this.createVoucherOrder(voucherId);</span><br>            <span class="hljs-comment">// 这种调用this拿到的是当前VoucherOrderServiceImpl的对象，而不是它的代理对象。</span><br>            <span class="hljs-comment">// 事务要想生效用的是Spring对VoucherOrderServiceImpl这个类做了动态代理，拿到他的代理对象，用代理对象做事务处理</span><br>            <span class="hljs-comment">// 这里的this指的是非代理对象，也就是目标对象，所以他没有事务功能。（事务失效的可能性之一）</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//事务的范围是更新数据库，上述查询数据库不需要加事务，事务的方法必须为public才能生效，不能是private</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">//5.一人一单</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//5.1 查询订单</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>        <span class="hljs-comment">//5.2 判断是否存在</span><br>        <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买一次！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//6.扣减库存</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>                .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>                .update();<br>        <span class="hljs-keyword">if</span>(!success)&#123;<br>            <span class="hljs-comment">//扣减失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//7.创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>        <span class="hljs-comment">//7.1 订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        voucherOrder.setId(orderId);<br>        <span class="hljs-comment">//7.2 用户id</span><br>        voucherOrder.setUserId(userId);<br>        <span class="hljs-comment">//7.3 代金券id</span><br>        voucherOrder.setVoucherId(voucherId);<br>        save(voucherOrder);<br><br>        <span class="hljs-comment">//8.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.启动类<code>HmDianPingApplication</code>暴露代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@EnableAspectJAutoProxy(exposeProxy = true)</span><span class="hljs-comment">//暴露代理对象（默认是不暴露）</span><br><span class="hljs-meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HmDianPingApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(HmDianPingApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h6><p>和超卖问题一样使用<code>Jmeter</code>，在数据库查看库存，可以看到同一个用户只能下单一次，解决了一人一旦问题。</p><p>注意：</p><p>参考链接：<code>Spring</code>事务失效的场景</p><p><a href="https://blog.csdn.net/hanjiaqian/article/details/120501741">spring 事务失效的 12 种场景_spring 截获duplicatekeyexception 不抛异常-CSDN博客</a></p><h5 id="多台JVM下并发安全问题"><a href="#多台JVM下并发安全问题" class="headerlink" title="多台JVM下并发安全问题"></a>多台JVM下并发安全问题</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88%E5%A4%9A%E5%8F%B0JVM%E4%B8%8B%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%89.png"></p><h6 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h6><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。</p><p>我们将服务启动两份，端口分别为8081和8082：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%BB%BD%E6%9C%8D%E5%8A%A1%EF%BC%89.png"></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88%E9%85%8D%E7%BD%AE%E4%B8%A4%E4%B8%AA%E8%8A%82%E7%82%B9%EF%BC%9A%E4%B8%A4%E4%B8%AA%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%89.png"></p><p>然后修改<code>nginx</code>的<code>conf</code>目录下的<code>nginx.conf</code>文件，配置反向代理和负载均衡：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%EF%BC%88nginx%E9%85%8D%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%89.png"></p><p>修改如下两个地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs conf">http &#123;<br>        location /api &#123;  <br>            #proxy_pass http://127.0.0.1:8081;<br>            proxy_pass http://backend;<br>        &#125;<br>    &#125;<br><br>    upstream backend &#123;<br>        server 127.0.0.1:8081 max_fails=5 fail_timeout=10s weight=1;<br>        server 127.0.0.1:8082 max_fails=5 fail_timeout=10s weight=1;<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>改完之后重新加载：（如果还不行就重启<code>nginx</code>和重启电脑）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\software\nginx-1.18.0-dianping&gt;nginx.exe -s reload<br><br>D:\software\nginx-1.18.0-dianping&gt;<br></code></pre></td></tr></table></figure><p>现在，用户请求会在这两个节点上负载均衡，再次测试下是否存在线程安全问题。</p><p><strong>测试：</strong></p><p>通过网页访问<code>http://localhost:8080/api/voucher/list/1</code>，可以发现两个节点上都会出现查询请求。</p><p>使用<code>Jmeter</code>进行测试，查看数据库发现一个人有多个订单。因此，在集群模式下，锁没有锁住，出现了一人多单的情况。</p><p>原因分析：因为多集群下，用户的多个请求可能会被发送到不同的<code>JVM</code>下执行，而不同<code>JVM</code>下的锁监视器是不相同的，因此一个用户可以获得多个锁，从而导致一个用户有多个请求成功，出现一人多单。</p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.png"></p><p><strong>分布式锁</strong>：满足<strong>分布式系统或集群模式下多进程可见并且互斥的锁</strong>。</p><ul><li>多进程可见</li><li>互斥</li><li>高可用</li><li>高性能</li><li>安全性</li></ul><p>分布式锁的核心是<strong>实现多进程之间互斥</strong>，而满足这一点的方式有很多，常见的有三种：</p><table><thead><tr><th></th><th><strong>MySQL</strong></th><th><strong>Redis</strong></th><th><strong>Zookeeper</strong></th></tr></thead><tbody><tr><td>互斥</td><td>利用mysql本身的互斥锁机制<br>例如：业务执行前去mysql申请互斥锁，然后执行业务，当业务执行完以后提交事务，这时锁释放，当业务抛出异常时，会自动触发回滚，锁就释放了。</td><td>利用setnx这样的互斥命令<br>实现互斥：数据不存在时才能set成功，数据存在时set失败。删除key即可释放锁。</td><td>利用节点的唯一性和有序性实现互斥<br>唯一性：创建节点时，节点不能重复<br>有序性：每创建一个节点，节点的id是递增的（约定id最小的获取锁成功，由此来实现互斥。释放锁时把节点删除即可。）</td></tr><tr><td>高可用</td><td>好（mysql支持主从模式）</td><td>好（支持主从、集群模式）</td><td>好（支持集群）</td></tr><tr><td>高性能</td><td>一般（受限于mysql的性能）</td><td>好</td><td>一般（Zookeeper集群强调强一致性，会导致主从之间数据同步消耗时间，性能会比Redis差一些）</td></tr><tr><td>安全性</td><td>断开连接，自动释放锁</td><td>利用锁超时时间，到期释放（分析：服务出现故障，锁不能够自动释放，没有人执行删除动作时，锁会一直在那里得不到释放，其他进程得到锁会产生死锁的现象）</td><td>临时节点，断开连接自动释放</td></tr></tbody></table><h5 id="基于Redis的分布式锁"><a href="#基于Redis的分布式锁" class="headerlink" title="基于Redis的分布式锁"></a>基于Redis的分布式锁</h5><p>实现分布式锁时需要实现的两个基本方法：</p><p>1.获取锁：</p><ul><li>互斥：确保只能有一个线程获取锁。</li><li>非阻塞：尝试一次，成功返回<code>true</code>，失败返回<code>false</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Redis"># 添加锁，利用setnx的互斥特性<br>SETNX lock thread1<br># 添加锁过期时间，避免服务宕机引起的死锁<br>EXPIRE lock 10<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Redis"># 添加锁，NX是互斥、EX是设置超时时间<br>SET lock thread1 NX EX 10<br></code></pre></td></tr></table></figure><p>2.释放锁：</p><ul><li>手动释放。</li><li>超时释放。</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># 释放锁，删除即可</span><br>DEL <span class="hljs-built_in">key</span><br></code></pre></td></tr></table></figure><h6 id="版本一：基于Redis实现分布式锁初级版本"><a href="#版本一：基于Redis实现分布式锁初级版本" class="headerlink" title="版本一：基于Redis实现分布式锁初级版本"></a>版本一：基于Redis实现分布式锁初级版本</h6><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%9F%BA%E4%BA%8ERedis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%88%9D%E7%BA%A7%E7%89%88%E6%9C%AC%EF%BC%89.png"></p><p>需求：定义一个类，实现下面接口，利用<code>Redis</code>实现分布式锁功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILock</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 尝试获取锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeoutSec 锁持有的超时时间，过期后自动释放</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true代表获取锁成功; false代表获取锁失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span>;<br><br>    <span class="hljs-comment">//释放锁</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>SimpleRedisLock</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-comment">//获取线程标识</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>        <span class="hljs-comment">//获取锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadId + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//释放锁</span><br>        stringRedisTemplate.delete(KEY_PREFIX + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>VoucherOrderServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>    <span class="hljs-comment">//1.查询优惠券</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">//2.判断秒杀是否开始</span><br>    <span class="hljs-keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;<br>        <span class="hljs-comment">//尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.判断秒杀是否已经结束</span><br>    <span class="hljs-keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.判断库存是否充足</span><br>    <span class="hljs-keyword">if</span>(voucher.getStock() &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//库存不足</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">//创建锁对象</span><br>    <span class="hljs-type">SimpleRedisLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRedisLock</span>(<span class="hljs-string">&quot;order:&quot;</span> + userId, stringRedisTemplate);<span class="hljs-comment">//每个用户一个锁</span><br>    <span class="hljs-comment">//获取锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1200</span>);<br>    <span class="hljs-comment">//判断是否获取锁成功</span><br>    <span class="hljs-keyword">if</span>(!isLock)&#123;<br>        <span class="hljs-comment">//获取锁失败，返回错误或重试</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取代理对象（事务）</span><br>        <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<span class="hljs-comment">//拿到当前对象的代理对象</span><br>        <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//释放锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>1.在<code>Postman</code>中准备如下两个一样的请求<code>http://localhost:8080/api/voucher-order/seckill/11</code>，<code>Header</code>携带有效的<code>authorization</code>。必须保证两个相同，才能是同一用户。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%9F%BA%E4%BA%8ERedis%E5%A4%B1%E6%95%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%89%88%E6%9C%AC%E4%B8%80%EF%BC%9A%E6%B5%8B%E8%AF%951%EF%BC%89.png"></p><p>2.在<code> VoucherOrderServiceImpl</code>的<code>seckillVoucher</code>方法的判断是否获取锁成功<code>if(!isLock)</code>处打上断点。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%9F%BA%E4%BA%8ERedis%E5%A4%B1%E6%95%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%89%88%E6%9C%AC%E4%B8%80%EF%BC%9A%E6%B5%8B%E8%AF%952%EF%BC%89.png"></p><p>3.运行两个程序，分别在8081和8082端口。同时运行<code>Postman</code>的两个相同的请求，分别进入这两个不同的端口后台进行执行。</p><p>4.可以发现，只有其中一个程序获取到了锁，另一个程序没有获取到锁。这时一个用户只能下一个订单，实现了分布式锁。</p><h6 id="版本二：一个线程释放另一个线程的锁"><a href="#版本二：一个线程释放另一个线程的锁" class="headerlink" title="版本二：一个线程释放另一个线程的锁"></a>版本二：一个线程释放另一个线程的锁</h6><p>问题分析：当线程1获取锁之后发生业务阻塞，阻塞期间触发超时释放锁。此时线程2可以获取锁，并执行业务。在线程2执行业务的过程中，线程1阻塞结束完成业务，并释放了线程2的锁，因此出现了一个释放另一个线程的锁的问题。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E9%87%8A%E6%94%BE%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%94%81%EF%BC%89.png"></p><p>解决一个线程释放另一个线程的锁的问题：当释放锁的时候进行判断，判断当前要释放的锁和该线程的锁是否一致，如果一致才能进行释放。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E9%87%8A%E6%94%BE%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%94%81-%E8%A7%A3%E5%86%B3%EF%BC%89.png"></p><p>流程图：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%9F%BA%E4%BA%8ERedis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%88%9D%E7%BA%A7%E7%89%88%E6%9C%AC-%E8%A7%A3%E5%86%B3%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%89.png"></p><p>需求：修改之前的分布式锁实现，满足：</p><ol><li><p>在获取锁时存入线程标示（可以用<code>UUID</code>表示）。注意：因为不同<code>JVM</code>的线程都是从1开始递增，所以不同<code>JVM</code>的线程有可能出现线程<code>id</code>一样的情况，所以需要用<code>UUID</code>来标识。</p></li><li><p>在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致。</p><ul><li><p>如果一致则释放锁。</p></li><li><p>如果不一致则不释放锁。</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<span class="hljs-comment">//用UUID作为锁</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-comment">//获取线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-comment">//获取锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-comment">//获取锁中的标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);<br>        <span class="hljs-comment">//判断标识是否一致</span><br>        <span class="hljs-keyword">if</span>(threadId.equals(id))&#123;<br>            <span class="hljs-comment">//释放锁</span><br>            stringRedisTemplate.delete(KEY_PREFIX + name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><p>1.和上述一样，在<code>Postman</code>中准备如下两个一样的请求<code>http://localhost:8080/api/voucher-order/seckill/11</code>，<code>Header</code>携带有效的<code>authorization</code>。必须保证两个相同，才能是同一用户。</p><p>2.和上述一样，在<code> VoucherOrderServiceImpl</code>的<code>seckillVoucher</code>方法的判断是否获取锁成功<code>if(!isLock)</code>处打上断点。</p><p>3.首先发送<code>Postman</code>的一个请求1，程序会进入其中一个端口1执行，这时进入断点，可以发现获取锁成功。</p><p>然后去<code>Redis</code>中可以发现该锁的已存在，接下来删除该锁，模拟线程阻塞。</p><p>之后发送<code>Postman</code>的另一条同样的请求2，程序会进入另外一个端口2执行，这时进入断点，因为之前的锁已经被删除，此时也能够获取锁成功。</p><p>此时回到请求1继续执行，释放锁的时候会判断是否是请求1的锁，不是则直接退出。</p><p>回到请求2继续执行，此时判断锁是请求2的锁，会执行释放锁的操作才会退出。</p><p>4.总结：上述执行流程保证了请求1无法释放请求2的锁，只有请求2才能释放请求2的锁，保证了释放锁的正确性。</p><h6 id="版本三：判断锁标识是否一致和释放锁不同步执行"><a href="#版本三：判断锁标识是否一致和释放锁不同步执行" class="headerlink" title="版本三：判断锁标识是否一致和释放锁不同步执行"></a>版本三：判断锁标识是否一致和释放锁不同步执行</h6><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%88%A4%E6%96%AD%E9%94%81%E6%A0%87%E8%AF%86%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4%E5%92%8C%E9%87%8A%E6%94%BE%E9%94%81%E4%B8%8D%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%EF%BC%89.png"></p><p><strong>Redis的Lua脚本</strong></p><p><code>Redis</code>提供了<code>Lua</code>脚本功能，在一个脚本中编写多条<code>Redis</code>命令，确保多条命令执行时的原子性。<code>Lua</code>是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p><p><code>Redis</code>提供的调用函数，语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"># 执行redis命令<br>redis.call(<span class="hljs-string">&#x27;命令名称&#x27;</span>, <span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;其它参数&#x27;</span>, ...)<br></code></pre></td></tr></table></figure><p>例如，我们要执行<code>set name jack</code>，则脚本是这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"># 执行 set name jack<br>redis.call(<span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;jack&#x27;</span>)<br></code></pre></td></tr></table></figure><p>例如，我们要先执行<code>set name Rose</code>，再执行<code>get name</code>，则脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"># 先执行 set name jack<br>redis.call(<span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;jack&#x27;</span>)<br># 再执行 get name<br><span class="hljs-keyword">local</span> name = redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>)<br># 返回<br><span class="hljs-keyword">return</span> name<br></code></pre></td></tr></table></figure><p>写好脚本以后，需要用<code>Redis</code>命令来调用脚本，调用脚本的常见命令如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>&gt; <span class="hljs-built_in">help</span> @scripting<br><br>  EVAL script numkeys key [key ...] arg [arg ...]<br><span class="hljs-function">  summary: <span class="hljs-title">Execute</span> <span class="hljs-title">a</span> <span class="hljs-title">Lua</span> <span class="hljs-title">script</span> <span class="hljs-title">server</span> <span class="hljs-title">side</span></span><br><span class="hljs-function">  <span class="hljs-title">since</span>: 2.6.0</span><br></code></pre></td></tr></table></figure><p>例如，我们要执行<code>redis.call(&#39;set&#39;, &#39;name&#39;, &#39;jack&#39;)</code>这个脚本，语法如下：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E8%B0%83%E7%94%A8lua%E8%84%9A%E6%9C%AC-1%EF%BC%89.png"></p><p>如果脚本中的<code>key</code>、<code>value</code>不想写死，可以作为参数传递。<code>key</code>类型参数会放入<code>KEYS</code>数组，其它参数会放入<code>ARGV</code>数组，在脚本中可以从<code>KEYS</code>和<code>ARGV</code>数组获取这些参数：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E8%B0%83%E7%94%A8lua%E8%84%9A%E6%9C%AC-2%EF%BC%89.png"></p><p>释放锁的业务流程是这样的：</p><ol><li>获取锁中的线程标示。</li><li>判断是否与指定的标示（当前线程标示）一致。</li><li>如果一致则释放锁（删除）。</li><li>如果不一致则什么都不做。</li></ol><p>如果用<code>Lua</code>脚本来表示则是这样的：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Lua"><span class="hljs-comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span><br><span class="hljs-comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;GET&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span><br>  <span class="hljs-comment">-- 一致，则删除锁</span><br>  <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;DEL&#x27;</span>, KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 不一致，则直接返回</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>需求：基于<code>Lua</code>脚本实现分布式锁的释放锁逻辑</p><p>提示：<code>RedisTemplate</code>调用<code>Lua</code>脚本的<code>API</code>如下：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88RedisTemplate%E8%B0%83%E7%94%A8Lua%E8%84%9A%E6%9C%AC%E7%9A%84API%EF%BC%89.png"></p><p>1.新建<code>unlock.lua</code>脚本，位置在：<code>src/main/resources/unlock.lua</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span><br><span class="hljs-comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;GET&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span><br>  <span class="hljs-comment">-- 一致，则删除锁</span><br>  <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;DEL&#x27;</span>, KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 不一致，则直接返回</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>2.修改锁的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<span class="hljs-comment">//用UUID作为锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;<br>    <span class="hljs-keyword">static</span> &#123;<br>        UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));<br>        UNLOCK_SCRIPT.setResultType(Long.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-comment">//获取线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-comment">//获取锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//调用lua脚本</span><br>        stringRedisTemplate.execute(<br>                UNLOCK_SCRIPT,<br>                Collections.singletonList(KEY_PREFIX + name), <span class="hljs-comment">// 参数KEYS集合</span><br>                ID_PREFIX + Thread.currentThread().getId() <span class="hljs-comment">// 参数ARGV</span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h6><p>基于<code>Redis</code>的分布式锁实现思路：</p><ul><li>利用<code>set nx ex</code>获取锁，并设置过期时间，保存线程标示。</li><li>释放锁时先判断线程标示是否与自己一致，一致则删除锁。</li></ul><p>特性：</p><ul><li>利用<code>set nx</code>满足互斥性。</li><li>利用<code>set ex</code>保证故障时锁依然能释放，避免死锁，提高安全性。</li><li>利用<code>Redis</code>集群保证高可用和高并发特性。</li></ul><h6 id="基于setnx实现的分布式锁存在问题"><a href="#基于setnx实现的分布式锁存在问题" class="headerlink" title="基于setnx实现的分布式锁存在问题"></a>基于setnx实现的分布式锁存在问题</h6><p>1.不可重入：同一个线程无法多次获取同一把锁。</p><p>2.不可重试：获取锁只尝试一次就返回<code>false</code>，没有重试机制。</p><p>3.超时释放：锁超时释放虽然可以避免死锁，但如果是业务执行耗时较长，也会导致锁释放，存在安全隐患。</p><p>4.主从一致性：如果<code>Redis</code>提供了主从集群，主从同步存在延迟，当主宕机时，如果从并同步主中的锁数据，则会出现锁实现。</p><h5 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h5><p><code>Redisson</code>是一个在<code>Redis</code>的基础上实现的<code>Java</code>驻内存数据网格（<code>In-Memory Data Grid</code>）。它不仅提供了一系列的分布式的<code>Java</code>常用对象，还提供了许多分布式服务，其中就包含了<strong>各种分布式锁的实现</strong>。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88Redisson%EF%BC%89.png"></p><p>官网地址： <a href="https://redisson.org/">https://redisson.org</a></p><p>GitHub地址： <a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><h6 id="Redisson入门"><a href="#Redisson入门" class="headerlink" title="Redisson入门"></a>Redisson入门</h6><p>1.引入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- redisson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.40.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.配置<code>Redisson</code>客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-comment">// 添加redis地址，这里添加了单点的地址，也可以使用config.useClusterServers()添加集群地址 </span><br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>        <span class="hljs-comment">//创建RedissonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.使用<code>Redisson</code>的分布式锁。（这里只是测试）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 获取锁（可重入），指定锁的名称</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;anyLock&quot;</span>); <br>    <span class="hljs-comment">// 尝试获取锁，参数分别是：获取锁的最大等待时间（期间会重试），锁自动释放时间，时间单位</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-comment">// 判断释放获取成功</span><br>    <span class="hljs-keyword">if</span>(isLock)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;执行业务&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>VoucherOrderServiceImpl</code>中修改<code>seckillVoucher</code>方法，只需要将获取锁的方式修改，将创建锁对象的方式修改即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//创建锁对象</span><br><span class="hljs-comment">//SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);//每个用户一个锁</span><br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<span class="hljs-comment">//只添加这一句，注释上一句</span><br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>    <span class="hljs-comment">//1.查询优惠券</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">//2.判断秒杀是否开始</span><br>    <span class="hljs-keyword">if</span>(voucher.getBeginTime().isAfter(LocalDateTime.now()))&#123;<br>        <span class="hljs-comment">//尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.判断秒杀是否已经结束</span><br>    <span class="hljs-keyword">if</span>(voucher.getEndTime().isBefore(LocalDateTime.now()))&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.判断库存是否充足</span><br>    <span class="hljs-keyword">if</span>(voucher.getStock() &lt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//库存不足</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">//创建锁对象</span><br>    <span class="hljs-comment">//SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);//每个用户一个锁</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<span class="hljs-comment">//只添加这一句，注释上一句</span><br>    <span class="hljs-comment">//获取锁</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<span class="hljs-comment">//释放不等待</span><br>    <span class="hljs-comment">//判断是否获取锁成功</span><br>    <span class="hljs-keyword">if</span>(!isLock)&#123;<br>        <span class="hljs-comment">//获取锁失败，返回错误或重试</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取代理对象（事务）</span><br>        <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<span class="hljs-comment">//拿到当前对象的代理对象</span><br>        <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//释放锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong>和之前一样，使用<code>Jmeter</code>进行测试，同一个用户200个线程，查看数据库发现一个用户只能下一单，库存只减少了1，所以分布式锁设置成功。</p><h6 id="Redisson可重入锁原理"><a href="#Redisson可重入锁原理" class="headerlink" title="Redisson可重入锁原理"></a>Redisson可重入锁原理</h6><p>1.出现死锁的原因：当线程1获取锁之后，调用线程2，线程2也需要获得锁，然而此时锁被线程1获得无法释放，线程2等待线程1执行完毕释放锁，线程1等到线程2执行完毕，造成互相等待的情况，这就是死锁。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%87%BA%E7%8E%B0%E6%AD%BB%E9%94%81%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%89.png"></p><p>2.<code>Redisson</code>可重入锁原理：使用哈希表来存储锁，哈希表的<code>value</code>存储获得锁的线程的个数。每当一个线程获得锁都进行加一操作，每当一个线程释放锁都进行减一操作。当<code>value</code>值为0时，即代表没有线程获得锁，则可以进行释放锁的操作。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88Redisson%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%8E%9F%E7%90%86%EF%BC%89.png"></p><p>3.<code>lua</code>脚本。</p><p>（1）获取锁的<code>Lua</code>脚本。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Lua"><span class="hljs-keyword">local</span> key = KEYS[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 锁的key</span><br><span class="hljs-keyword">local</span> threadId = ARGV[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 线程唯一标识</span><br><span class="hljs-keyword">local</span> releaseTime = ARGV[<span class="hljs-number">2</span>]; <span class="hljs-comment">-- 锁的自动释放时间</span><br><span class="hljs-comment">-- 判断是否存在</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;exists&#x27;</span>, key) == <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 不存在, 获取锁</span><br>    redis.call(<span class="hljs-string">&#x27;hset&#x27;</span>, key, threadId, <span class="hljs-string">&#x27;1&#x27;</span>); <br>    <span class="hljs-comment">-- 设置有效期</span><br>    redis.call(<span class="hljs-string">&#x27;expire&#x27;</span>, key, releaseTime); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 返回结果</span><br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">-- 锁已经存在，判断threadId是否是自己</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 不存在, 获取锁，重入次数+1</span><br>    redis.call(<span class="hljs-string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="hljs-string">&#x27;1&#x27;</span>); <br>    <span class="hljs-comment">-- 设置有效期</span><br>    redis.call(<span class="hljs-string">&#x27;expire&#x27;</span>, key, releaseTime); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">-- 返回结果</span><br><span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">-- 代码走到这里,说明获取锁的不是自己，获取锁失败</span><br></code></pre></td></tr></table></figure><p>（2）释放锁的<code>Lua</code>脚本。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Lua"><span class="hljs-keyword">local</span> key = KEYS[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 锁的key</span><br><span class="hljs-keyword">local</span> threadId = ARGV[<span class="hljs-number">1</span>]; <span class="hljs-comment">-- 线程唯一标识</span><br><span class="hljs-keyword">local</span> releaseTime = ARGV[<span class="hljs-number">2</span>]; <span class="hljs-comment">-- 锁的自动释放时间</span><br><span class="hljs-comment">-- 判断当前锁是否还是被自己持有</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>; <span class="hljs-comment">-- 如果已经不是自己，则直接返回</span><br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">-- 是自己的锁，则重入次数-1</span><br><span class="hljs-keyword">local</span> count = redis.call(<span class="hljs-string">&#x27;HINCRBY&#x27;</span>, key, threadId, <span class="hljs-number">-1</span>);<br><span class="hljs-comment">-- 判断是否重入次数是否已经为0 </span><br><span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 大于0说明不能释放锁，重置有效期然后返回</span><br>    redis.call(<span class="hljs-string">&#x27;EXPIRE&#x27;</span>, key, releaseTime);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">-- 等于0说明可以释放锁，直接删除</span><br>    redis.call(<span class="hljs-string">&#x27;DEL&#x27;</span>, key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br><span class="hljs-keyword">end</span>;<br></code></pre></td></tr></table></figure><p>4.测试<code>Redisson</code>可重入锁代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonTest</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-keyword">private</span> RLock lock;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        lock = redissonClient.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 尝试获取锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            log.error(<span class="hljs-string">&quot;获取锁失败 .... 1&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;获取锁成功 .... 1&quot;</span>);<br>            method2();<br>            log.info(<span class="hljs-string">&quot;开始执行业务 ... 1&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.warn(<span class="hljs-string">&quot;准备释放锁 .... 1&quot;</span>);<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 尝试获取锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            log.error(<span class="hljs-string">&quot;获取锁失败 .... 2&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;获取锁成功 .... 2&quot;</span>);<br>            log.info(<span class="hljs-string">&quot;开始执行业务 ... 2&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.warn(<span class="hljs-string">&quot;准备释放锁 .... 2&quot;</span>);<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong>在<code>method1</code>和<code>method2</code>两个方法的<code>tryLock</code>方法处打上断点，观察<code>Redis</code>中锁的<code>value</code>值变化。<code>method1</code>获取锁时<code>value</code>为1，<code>method2</code>获取锁时<code>value</code>从1变成2，<code>method2</code>释放锁时从2变成1，<code>method1</code>释放锁时<code>value</code>从1变为0，释放掉。</p><h6 id="Redisson分布式锁原理"><a href="#Redisson分布式锁原理" class="headerlink" title="Redisson分布式锁原理"></a>Redisson分布式锁原理</h6><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%8E%9F%E7%90%86%EF%BC%89.png"></p><p><code>Redisson</code>分布式锁原理：</p><ul><li>可重入：利用<code>hash</code>结构记录线程<code>id</code>和重入次数。</li><li>可重试：利用信号量和<code>PubSub</code>功能实现等待、唤醒，获取锁失败的重试机制。</li><li>超时续约：利用<code>watchDog</code>，每隔一段时间（<code>releaseTime / 3</code>），重置超时时间。</li></ul><h6 id="Redisson分布式锁主从一致性问题"><a href="#Redisson分布式锁主从一致性问题" class="headerlink" title="Redisson分布式锁主从一致性问题"></a>Redisson分布式锁主从一致性问题</h6><p>1.主从一致性问题：获取锁之后，主节点发生故障，此时还没有进行主从同步，当从节点变为主节点时，找不到锁，就会发生锁失效，这就是主从一致性问题。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%BB%E4%BB%8E%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%89.png"></p><p>2.<code>Redisson</code>分布式锁主从一致性问题。</p><p>多个独立的<code>Redis</code>节点，必须在所有节点都获取重入锁，才算获取锁成功。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%EF%BC%88Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B8%BB%E4%BB%8E%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%EF%BC%89.png"></p><p>3.创建多个<code>Redis</code>集群：复制多个<code>Redis</code>文件夹，修改每个<code>Redis</code>文件夹下的<code>redis.windows.conf</code>配置不同端口。这里我使用了三个<code>Redis</code>，端口分别为：6379、6380、6381。</p><p>修改<code>RedissonConfig</code>文件，配置不同端口的多个集群。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>        <span class="hljs-comment">//创建RedissonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6380&quot;</span>);<br>        <span class="hljs-comment">//创建RedissonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient3</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6381&quot;</span>);<br>        <span class="hljs-comment">//创建RedissonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>RedissonTest</code>进行联锁测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonTest</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient2;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient3;<br><br><br>    <span class="hljs-keyword">private</span> RLock lock;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock1</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock2</span> <span class="hljs-operator">=</span> redissonClient2.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock3</span> <span class="hljs-operator">=</span> redissonClient3.getLock(<span class="hljs-string">&quot;order&quot;</span>);<br><br>        <span class="hljs-comment">//创建联锁 multiLock</span><br>        lock = redissonClient.getMultiLock(lock1, lock2, lock3);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 尝试获取锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            log.error(<span class="hljs-string">&quot;获取锁失败 .... 1&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;获取锁成功 .... 1&quot;</span>);<br>            method2();<br>            log.info(<span class="hljs-string">&quot;开始执行业务 ... 1&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.warn(<span class="hljs-string">&quot;准备释放锁 .... 1&quot;</span>);<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 尝试获取锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            log.error(<span class="hljs-string">&quot;获取锁失败 .... 2&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;获取锁成功 .... 2&quot;</span>);<br>            log.info(<span class="hljs-string">&quot;开始执行业务 ... 2&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            log.warn(<span class="hljs-string">&quot;准备释放锁 .... 2&quot;</span>);<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试：</strong>和之前可重入锁原理时的测试一样，这次观察三个<code>Redis</code>中锁的值的变化。可以发现在三个<code>Redis</code>节点上，所有的<code>value</code>值是统一变化的：在<code>method1</code>和<code>method2</code>两个方法的<code>tryLock</code>方法处打上断点，观察<code>Redis</code>中锁的<code>value</code>值变化。<code>method1</code>获取锁时<code>value</code>为1，<code>method2</code>获取锁时<code>value</code>从1变成2，<code>method2</code>释放锁时从2变成1，<code>method1</code>释放锁时<code>value</code>从1变为0，释放掉。</p><h6 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h6><p>（1）不可重入<code>Redis</code>分布式锁</p><p>原理：利用<code>setnx</code>的互斥性；利用<code>ex</code>避免死锁；释放锁时判断线程标示。</p><p>缺陷：不可重入、无法重试、锁超时失效。</p><p>（2）可重入的<code>Redis</code>分布式锁</p><p>原理：利用<code>hash</code>结构，记录线程标示和重入次数；利用<code>watchDog</code>延续锁时间；利用信号量控制锁重试等待。</p><p>缺陷：<code>redis</code>宕机引起锁失效问题。</p><p>（3）<code>Redisson</code>的<code>multiLock</code></p><p>原理：多个独立的<code>Redis</code>节点，必须在所有节点都获取重入锁，才算获取锁成功。</p><p>缺陷：运维成本高、实现复杂。</p><h4 id="Redis优化秒杀"><a href="#Redis优化秒杀" class="headerlink" title="Redis优化秒杀"></a>Redis优化秒杀</h4><p><code>Redis</code>优化秒杀思路：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E4%BC%98%E5%8C%96%E7%A7%92%E6%9D%80%EF%BC%88%E6%80%9D%E8%B7%AF%EF%BC%89.png"></p><p><code>Redis</code>优化秒杀流程图：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E4%BC%98%E5%8C%96%E7%A7%92%E6%9D%80%EF%BC%88%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%89.png"></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>1.新增秒杀优惠券的同时，将优惠券信息保存到<code>Redis</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;VoucherMapper, Voucher&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoucherService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;<br>        <span class="hljs-comment">// 保存优惠券</span><br>        save(voucher);<br>        <span class="hljs-comment">// 保存秒杀信息</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();<br>        seckillVoucher.setVoucherId(voucher.getId());<br>        seckillVoucher.setStock(voucher.getStock());<br>        seckillVoucher.setBeginTime(voucher.getBeginTime());<br>        seckillVoucher.setEndTime(voucher.getEndTime());<br>        seckillVoucherService.save(seckillVoucher);<br><br>        <span class="hljs-comment">//保存秒杀库存到Redis中</span><br>        stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.基于<code>Lua</code>脚本，判断秒杀库存、一人一单，决定用户是否抢购成功。</p><p><code>seckill.lua</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Lua"><span class="hljs-comment">-- 1.参数列表</span><br><span class="hljs-comment">-- 1.1.优惠券id</span><br><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 1.2.用户id</span><br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><br><span class="hljs-comment">-- 2.数据key</span><br><span class="hljs-comment">-- 2.1.库存key</span><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-comment">-- 2.2.订单key</span><br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><br><span class="hljs-comment">-- 3.脚本业务</span><br><span class="hljs-comment">-- 3.1.判断库存是否充足 get stockKey</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.2.库存不足，返回1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.3.存在，说明是重复下单，返回2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 3.4.扣库存 incrby stockKey -1</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)<br><span class="hljs-comment">-- 3.5.下单（保存用户）sadd orderKey userId</span><br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>3.如果抢购成功，将优惠券<code>id</code>和用户<code>id</code>封装后存入阻塞队列。</p><p>4.开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoucherOrderService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;<br>    <span class="hljs-keyword">static</span> &#123;<br>        SECKILL_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        SECKILL_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;seckill.lua&quot;</span>));<br>        SECKILL_SCRIPT.setResultType(Long.class);<br>    &#125;<br><br>    <span class="hljs-comment">//阻塞队列</span><br>    <span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>);<span class="hljs-comment">//阻塞队列添加新订单</span><br>    <span class="hljs-comment">//线程池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<span class="hljs-comment">//获取单线程处理订单</span><br><br>    <span class="hljs-meta">@PostConstruct</span><span class="hljs-comment">//在当前类初始化完毕后执行</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//从阻塞队列取出订单信息处理，该方法应该一初始化就开始执行</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//1.获取队列中的订单信息</span><br>                    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> orderTasks.take();<span class="hljs-comment">//take方法获取不到会阻塞</span><br>                    <span class="hljs-comment">//2.创建订单</span><br>                    handleVoucherOrder(voucherOrder);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>        <span class="hljs-comment">//1.获取用户</span><br>        <span class="hljs-comment">//Long userId = UserHolder.getUser().getId();//异步的子线程，不能通过ThreadLocal获得userId</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br><br>        <span class="hljs-comment">//注意：这里其实不用加锁也是可以的。</span><br>        <span class="hljs-comment">//2.创建锁对象</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>        <span class="hljs-comment">//3.获取锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<span class="hljs-comment">//释放不等待</span><br>        <span class="hljs-comment">//4.判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span>(!isLock)&#123;<br>            <span class="hljs-comment">//获取锁失败，返回错误或重试</span><br>            log.error((<span class="hljs-string">&quot;不允许重复下单&quot;</span>));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取代理对象（事务）</span><br>            <span class="hljs-comment">// IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();//拿到当前对象的代理对象</span><br>            <span class="hljs-comment">// 注意：这里是拿不到代理对象的，因为currentProxy底层是通过ThreadLocal获取的，</span><br>            <span class="hljs-comment">// 当前handleVoucherOrder是基于线程做的，现在是子线程，子线程无法从ThreadLocal取出。</span><br>            proxy.createVoucherOrder(voucherOrder);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> IVoucherOrderService proxy;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>        <span class="hljs-comment">//获取用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//1.执行lua脚本</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span>  stringRedisTemplate.execute(<br>                SECKILL_SCRIPT,<br>                Collections.emptyList(),<br>                voucherId.toString(), userId.toString()<br>        );<br>        <span class="hljs-comment">//2.判断结果是否为0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>        <span class="hljs-keyword">if</span>(r != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//2.1 不为0，代表没有购买资格</span><br>            <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.2 为0，有购买资格，把下单信息保存到阻塞队列</span><br>        <span class="hljs-comment">//创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>        <span class="hljs-comment">//2.3 订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        voucherOrder.setId(orderId);<br>        <span class="hljs-comment">//2.4 用户id</span><br>        voucherOrder.setUserId(userId);<br>        <span class="hljs-comment">//2.5 代金券id</span><br>        voucherOrder.setVoucherId(voucherId);<br>        <span class="hljs-comment">//2.6 放入阻塞队列</span><br>        orderTasks.add(voucherOrder);<br><br>        <span class="hljs-comment">//3.获取代理对象</span><br>        proxy = (IVoucherOrderService) AopContext.currentProxy();<span class="hljs-comment">//拿到当前对象的代理对象</span><br><br>        <span class="hljs-comment">//4.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//事务的范围是更新数据库，上述查询数据库不需要加事务，事务的方法必须为public才能生效，不能是private</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>        <span class="hljs-comment">//5.一人一单</span><br>        <span class="hljs-comment">//Long userId = UserHolder.getUser().getId();//异步的子线程，不能通过ThreadLocal获得userId</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br><br>        <span class="hljs-comment">//5.1 查询订单</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();<br>        <span class="hljs-comment">//5.2 判断是否存在</span><br>        <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//用户已经购买过一次</span><br>            log.error(<span class="hljs-string">&quot;用户已经购买过一次&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">//6.扣减库存</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())<br>                .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>                .update();<br>        <span class="hljs-keyword">if</span>(!success)&#123;<br>            <span class="hljs-comment">//扣减失败</span><br>            log.error(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">//7.创建订单</span><br>        save(voucherOrder);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h5><p>在<code>Postman</code>中准备如下两个一样的请求<code>http://localhost:8080/api/voucher-order/seckill/12</code>，<code>Header</code>携带两个不同的有效的<code>authorization</code>。</p><p>发送请求，第一次返回订单号，后续请求返回不能重复下单，即为测试成功。</p><p>也有使用<code>Jmeter</code>进行高并发测试，但我没有进行测试。</p><h4 id="Redis消息队列实现异步秒杀"><a href="#Redis消息队列实现异步秒杀" class="headerlink" title="Redis消息队列实现异步秒杀"></a>Redis消息队列实现异步秒杀</h4><p>消息队列（<code>Message Queue</code>），字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：</p><ul><li>消息队列：存储和管理消息，也被称为消息代理（<code>Message Broker</code>）。</li><li>生产者：发送消息到消息队列。</li><li>消费者：从消息队列获取消息并处理消息。</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%A7%92%E6%9D%80.png"></p><p><code>Redis</code>提供了三种不同的方式来实现消息队列：</p><ul><li><code>list</code>结构：基于<code>List</code>结构模拟消息队列。</li><li><code>PubSub</code>：基本的点对点消息模型。</li><li><code>Stream</code>：比较完善的消息队列模型。</li></ul><h5 id="基于List结构模拟消息队列"><a href="#基于List结构模拟消息队列" class="headerlink" title="基于List结构模拟消息队列"></a>基于List结构模拟消息队列</h5><p>消息队列（<code>Message Queue</code>），字面意思就是存放消息的队列。而<code>Redis</code>的<code>list</code>数据结构是一个双向链表，很容易模拟出队列效果。</p><p>队列是入口和出口不在一边，因此我们可以利用：<code>LPUSH</code>结合<code>RPOP</code>、或者<code>RPUSH</code>结合<code>LPOP</code>来实现。</p><p>不过要注意的是，当队列中没有消息时<code>RPOP</code>或<code>LPOP</code>操作会返回<code>null</code>，并不像<code>JVM</code>的阻塞队列那样会阻塞并等待消息。因此这里应该使用<code>BRPOP</code>或者<code>BLPOP</code>来实现阻塞效果。</p><p>优点：</p><ul><li>利用<code>Redis</code>存储，不受限于<code>JVM</code>内存上限。</li><li>基于<code>Redis</code>的持久化机制，数据安全性有保证。</li><li>可以满足消息有序性。</li></ul><p>缺点：</p><ul><li>无法避免消息丢失。（消费者取到消息后没有处理就挂掉了，这条数据就丢失了。）</li><li>只支持单消费者。（消息一旦被一个消费者取走，则从队列里移除，其他消费者无法取到。）</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E5%9F%BA%E4%BA%8EList%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%89.png"></p><h5 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h5><p><code>PubSub</code>（发布订阅）是<code>Redis2.0</code>版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个<code>channel</code>，生产者向对应<code>channel</code>发送消息后，所有订阅者都能收到相关消息。</p><p><code>SUBSCRIBE channel [channel]</code>：订阅一个或多个频道。</p><p><code>PUBLISH channel msg</code>：向一个频道发送消息。</p><p><code>PSUBSCRIBE pattern[pattern]</code>：订阅与<code>pattern</code>格式匹配的所有频道。</p><p>优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费。</li></ul><p>缺点：</p><ul><li>不支持数据持久化。（<code>List</code>结构本质不是消息队列，就是一个链表用于数据存储的，是当成消息队列来用了。<code>Redis</code>中用于存储的数据都支持持久化。而<code>PubSub</code>本身设计出来就是用于消息发送的，当发送一条消息时，这条消息所在的频道没有被订阅，则这条消息就丢失了。发出的所有消息都不会在<code>Redis</code>中保存。）</li><li>无法避免消息丢失。</li><li>消息堆积有上限，超出时数据丢失。（消费者缓存空间是有上限的。）</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E5%9F%BA%E4%BA%8EPubSub%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%89.png"></p><h5 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h5><p><code>Stream</code>是<code>Redis 5.0</code>引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p>发送消息的命令：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E5%9F%BA%E4%BA%8EStream%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%EF%BC%89.png"></p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Redis">## 创建名为 users 的队列，并向其中发送一个消息，内容是：&#123;name=jack,age=21&#125;，并且使用Redis自动生成ID<br>127.0.0.1:6379&gt; XADD users * name jack age 21<br>&quot;1644805700523-0&quot;<br></code></pre></td></tr></table></figure><h6 id="XREAD"><a href="#XREAD" class="headerlink" title="XREAD"></a>XREAD</h6><p>读取消息的方式之一：<code>XREAD</code></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E5%9F%BA%E4%BA%8EStream%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E8%AF%BB%E5%8F%96%E6%B6%88%E6%81%AF%EF%BC%89.png"></p><p>例如，使用<code>XREAD</code>读取第一个消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Redis">127.0.0.1:6379[1]&gt; XREAD COUNT 1 STREAMS users 0<br>1) 1) &quot;users&quot;<br>   2) 1) 1) &quot;1734487324128-0&quot;<br>         2) 1) &quot;name&quot;<br>            2) &quot;jack&quot;<br>            3) &quot;age&quot;<br>            4) &quot;21&quot;<br></code></pre></td></tr></table></figure><p><code>XREAD</code>阻塞方式，读取最新的消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Redis">## 指定起始ID为$时，代表读取最新的消息<br>127.0.0.1:6379[1]&gt; XREAD COUNT 1 BLOCK 1000 STREAMS users $<br>(nil)<br>(1.10s)<br></code></pre></td></tr></table></figure><p>在业务开发中，我们可以循环的调用<code>XREAD</code>阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E5%9F%BA%E4%BA%8EStream%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E6%9F%A5%E8%AF%A2%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E4%BC%AA%E4%BB%A3%E7%A0%81%EF%BC%89.png"></p><p>注意：当我们指定起始<code>ID</code>为<code>$</code>时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题。</p><p><code>STREAM</code>类型消息队列的<code>XREAD</code>命令特点：</p><ul><li>消息可回溯。（消息读完后不丢失，永久保存在队列中。可以随时读取）</li><li>一个消息可以被多个消费者读取。</li><li>可以阻塞读取。</li><li>有消息漏读的风险。</li></ul><h6 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h6><p>消费者组（<code>Consumer Group</code>）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p><ol><li><strong>消息分流</strong>：队列中的消息会分流给组内的不同消费者，而不是重复消费，从而加快消息处理的速度。</li><li><strong>消息标示</strong>：消费者组会维护一个标示，记录最后一个被处理的消息，哪怕消费者宕机重启，还会从标示之后读取消息。确保每一个消息都会被消费。</li><li><strong>消息确认</strong>：消费者获取消息后，消息处于<code>pending</code>状态，并存入一个<code>pending-list</code>。当处理完成后需要通过<code>XACK</code>来确认消息，标记消息为已处理，才会从<code>pending-list</code>移除。</li></ol><p>（1）创建消费者组：<code>XGROUP CREATE  key groupName ID [MKSTREAM]</code></p><ul><li><code>key</code>：队列名称。</li><li><code>groupName</code>：消费者组名称。</li><li><code>ID</code>：起始<code>ID</code>标示，<code>$</code>代表队列中最后一个消息，<code>0</code>则代表队列中第一个消息。</li><li><code>MKSTREAM</code>：队列不存在时自动创建队列。</li></ul><p>（2）其它常见命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Redis"># 删除指定的消费者组<br>XGROUP DESTORY key groupName<br><br># 给指定的消费者组添加消费者<br>XGROUP CREATECONSUMER key groupname consumername<br><br># 删除消费者组中的指定消费者<br>XGROUP DELCONSUMER key groupname consumername<br></code></pre></td></tr></table></figure><p>（3）从消费者组读取消息：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">XREADGROUP GROUP group consumer <span class="hljs-selector-attr">[COUNT count]</span> <span class="hljs-selector-attr">[BLOCK milliseconds]</span> <span class="hljs-selector-attr">[NOACK]</span> STREAMS key <span class="hljs-selector-attr">[key ...]</span> ID <span class="hljs-selector-attr">[ID ...]</span><br></code></pre></td></tr></table></figure><ul><li><p><code>group</code>：消费组名称。</p></li><li><p><code>consumer</code>：消费者名称，如果消费者不存在，会自动创建一个消费者。</p></li><li><p><code>count</code>：本次查询的最大数量。</p></li><li><p><code>BLOCK milliseconds</code>：当没有消息时最长等待时间。</p></li><li><p><code>NOACK</code>：无需手动<code>ACK</code>，获取到消息后自动确认。</p></li><li><p><code>STREAMS key</code>：指定队列名称。</p></li><li><p><code>ID</code>：获取消息的起始<code>ID</code>：</p><ul><li><p>“&gt;”：从下一个未消费的消息开始</p></li><li><p>其它：根据指定<code>id</code>从<code>pending-list</code>中获取已消费但未确认的消息，例如<code>0</code>，是从<code>pending-list</code>中的第一个消息开始。</p></li></ul></li></ul><p>（4）消费者监听消息的基本思路：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%882%EF%BC%89/%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80%EF%BC%9ARedis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%EF%BC%88%E5%9F%BA%E4%BA%8EStream%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E6%B6%88%E8%B4%B9%E8%80%85%E7%BB%84%E7%9B%91%E5%90%AC%E6%B6%88%E6%81%AF%EF%BC%89.png"></p><p><strong>使用实例：</strong></p><p>1.创建消息队列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Redis">&gt; xadd s1 * k1 v1<br>1734511630654-0<br>&gt; xadd s1 * k2 v2<br>1734511640519-0<br>&gt; xadd s1 * k3 v3<br>1734511906934-0<br>&gt; XGROUP CREATE s1 g1 0<br>OK<br></code></pre></td></tr></table></figure><p>2.创建消费者组，组内有两个消费者读取消息。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:6379</span>&gt; select <span class="hljs-number">1</span><br>OK<br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xreadgroup group g1 c1 count <span class="hljs-number">1</span> block <span class="hljs-number">2000</span> streams s1 &gt;<br><span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;s1&quot;</span><br>   <span class="hljs-number">2</span>) <span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;1734511630654-0&quot;</span><br>         <span class="hljs-number">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;k1&quot;</span><br>            <span class="hljs-number">2</span>) <span class="hljs-string">&quot;v1&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xreadgroup group g1 c2 count <span class="hljs-number">1</span> block <span class="hljs-number">2000</span> streams s1 &gt;<br><span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;s1&quot;</span><br>   <span class="hljs-number">2</span>) <span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;1734511640519-0&quot;</span><br>         <span class="hljs-number">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;k2&quot;</span><br>            <span class="hljs-number">2</span>) <span class="hljs-string">&quot;v2&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xack s1 g1 <span class="hljs-number">1734511630654</span>-<span class="hljs-number">0</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xpending s1 g1 - + <span class="hljs-number">10</span><br><span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;1734511640519-0&quot;</span><br>   <span class="hljs-number">2</span>) <span class="hljs-string">&quot;c2&quot;</span><br>   <span class="hljs-number">3</span>) (integer) <span class="hljs-number">61958</span><br>   <span class="hljs-number">4</span>) (integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xreadgroup group g1 c1 count <span class="hljs-number">1</span> block <span class="hljs-number">2000</span> streams s1 <span class="hljs-number">0</span><br><span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;s1&quot;</span><br>   <span class="hljs-number">2</span>) (empty array)<br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xreadgroup group g1 c2 count <span class="hljs-number">1</span> block <span class="hljs-number">2000</span> streams s1 <span class="hljs-number">0</span><br><span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;s1&quot;</span><br>   <span class="hljs-number">2</span>) <span class="hljs-number">1</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;1734511640519-0&quot;</span><br>         <span class="hljs-number">2</span>) <span class="hljs-number">1</span>) <span class="hljs-string">&quot;k2&quot;</span><br>            <span class="hljs-number">2</span>) <span class="hljs-string">&quot;v2&quot;</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xack s1 g1 <span class="hljs-number">1734511640519</span>-<span class="hljs-number">0</span><br>(integer) <span class="hljs-number">1</span><br><span class="hljs-number">127.0.0.1:6379</span><span class="hljs-string">[1]</span>&gt; xpending s1 g1 - + <span class="hljs-number">10</span><br>(empty array)<br></code></pre></td></tr></table></figure><p><code>STREAM</code>类型消息队列的<code>XREADGROUP</code>命令特点：</p><ul><li>消息可回溯。</li><li>可以多消费者争抢消息，加快消费速度。</li><li>可以阻塞读取。</li><li>没有消息漏读的风险。</li><li>有消息确认机制，保证消息至少被消费一次。</li></ul><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>基于<code>Redis</code>的<code>Stream</code>结构作为消息队列，实现异步秒杀下单。</p><p>需求：</p><p>1.创建一个<code>Stream</code>类型的消息队列，名为<code>stream.orders</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Redis">&gt; xgroup create stream.orders g1 0 mkstream<br>OK<br></code></pre></td></tr></table></figure><p>2.修改之前的秒杀下单<code>Lua</code>脚本，在认定有抢购资格后，直接向<code>stream.orders</code>中添加消息，内容包含<code>voucherId</code>、<code>userId</code>、<code>orderId</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Lua"><span class="hljs-comment">-- 1.参数列表</span><br><span class="hljs-comment">-- 1.1.优惠券id</span><br><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 1.2.用户id</span><br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><span class="hljs-comment">-- 1.3.订单id</span><br><span class="hljs-keyword">local</span> orderId = ARGV[<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">-- 2.数据key</span><br><span class="hljs-comment">-- 2.1.库存key</span><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-comment">-- 2.2.订单key</span><br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><br><span class="hljs-comment">-- 3.脚本业务</span><br><span class="hljs-comment">-- 3.1.判断库存是否充足 get stockKey</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.2.库存不足，返回1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.3.存在，说明是重复下单，返回2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 3.4.扣库存 incrby stockKey -1</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)<br><span class="hljs-comment">-- 3.5.下单（保存用户）sadd orderKey userId</span><br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><span class="hljs-comment">-- 3.6.发送到消息队列中， XADD stream.orders * k1 v1 k2 v2 ...</span><br>redis.call(<span class="hljs-string">&#x27;xadd&#x27;</span>, <span class="hljs-string">&#x27;stream.orders&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;userId&#x27;</span>, userId, <span class="hljs-string">&#x27;voucherId&#x27;</span>, voucherId, <span class="hljs-string">&#x27;id&#x27;</span>, orderId)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>3.项目启动时，开启一个线程任务，尝试获取<code>stream.orders</code>中的消息，完成下单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoucherOrderService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;<br>    <span class="hljs-keyword">static</span> &#123;<br>        SECKILL_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        SECKILL_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;seckill.lua&quot;</span>));<br>        SECKILL_SCRIPT.setResultType(Long.class);<br>    &#125;<br><br>    <span class="hljs-comment">//线程池</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<span class="hljs-comment">//获取单线程处理订单</span><br><br>    <span class="hljs-meta">@PostConstruct</span><span class="hljs-comment">//在当前类初始化完毕后执行</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stream.orders&quot;</span>;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//从阻塞队列取出订单信息处理，该方法应该一初始化就开始执行</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS streams.order &gt;</span><br>                    List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                            Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                            StreamReadOptions.empty().count(<span class="hljs-number">1</span>).block(Duration.ofSeconds(<span class="hljs-number">2</span>)),<br>                            StreamOffset.create(queueName, ReadOffset.lastConsumed())<br>                    );<br>                    <span class="hljs-comment">//2.判断消息是否获取成功</span><br>                    <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span> || list.isEmpty())&#123;<br>                        <span class="hljs-comment">//如果获取失败，说明没有消息，继续下一次循环</span><br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-comment">//解析消息中的订单信息</span><br>                    MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                    Map&lt;Object, Object&gt; values = record.getValue();<br>                    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                    <span class="hljs-comment">//3.如果获取成功，可以下单</span><br>                    handleVoucherOrder(voucherOrder);<br>                    <span class="hljs-comment">//4.ACK确认 SACK stream.orders g1 id</span><br>                    stringRedisTemplate.opsForStream().acknowledge(queueName, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>                    handlePendingList();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlePendingList</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 STREAMS streams.order 0</span><br>                    List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                            Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                            StreamReadOptions.empty().count(<span class="hljs-number">1</span>),<br>                            StreamOffset.create(queueName, ReadOffset.from(<span class="hljs-string">&quot;0&quot;</span>))<br>                    );<br>                    <span class="hljs-comment">//2.判断消息是否获取成功</span><br>                    <span class="hljs-keyword">if</span>(list == <span class="hljs-literal">null</span> || list.isEmpty())&#123;<br>                        <span class="hljs-comment">//如果获取失败，说明pending-list没有异常消息，结束循环</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-comment">//解析消息中的订单信息</span><br>                    MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                    Map&lt;Object, Object&gt; values = record.getValue();<br>                    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                    <span class="hljs-comment">//3.如果获取成功，可以下单</span><br>                    handleVoucherOrder(voucherOrder);<br>                    <span class="hljs-comment">//4.ACK确认 SACK stream.orders g1 id</span><br>                    stringRedisTemplate.opsForStream().acknowledge(queueName, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                    log.error(<span class="hljs-string">&quot;处理pending-list订单异常&quot;</span>, e);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">20</span>);<span class="hljs-comment">//防止抛出异常太频繁，可以休眠一下</span><br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>                        ex.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>        <span class="hljs-comment">//1.获取用户</span><br>        <span class="hljs-comment">//Long userId = UserHolder.getUser().getId();//异步的子线程，不能通过ThreadLocal获得userId</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br><br>        <span class="hljs-comment">//注意：这里其实不用加锁也是可以的。</span><br>        <span class="hljs-comment">//2.创建锁对象</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>        <span class="hljs-comment">//3.获取锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<span class="hljs-comment">//释放不等待</span><br>        <span class="hljs-comment">//4.判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span>(!isLock)&#123;<br>            <span class="hljs-comment">//获取锁失败，返回错误或重试</span><br>            log.error((<span class="hljs-string">&quot;不允许重复下单&quot;</span>));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取代理对象（事务）</span><br>            <span class="hljs-comment">// IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();//拿到当前对象的代理对象</span><br>            <span class="hljs-comment">// 注意：这里是拿不到代理对象的，因为currentProxy底层是通过ThreadLocal获取的，</span><br>            <span class="hljs-comment">// 当前handleVoucherOrder是基于线程做的，现在是子线程，子线程无法从ThreadLocal取出。</span><br>            proxy.createVoucherOrder(voucherOrder);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> IVoucherOrderService proxy;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span>&#123;<br>        <span class="hljs-comment">//获取用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//获取订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-comment">//1.执行lua脚本</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span>  stringRedisTemplate.execute(<br>                SECKILL_SCRIPT,<br>                Collections.emptyList(),<br>                voucherId.toString(), userId.toString(), String.valueOf(orderId)<br>        );<br>        <span class="hljs-comment">//2.判断结果是否为0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>        <span class="hljs-keyword">if</span>(r != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//2.1 不为0，代表没有购买资格</span><br>            <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//3.获取代理对象</span><br>        proxy = (IVoucherOrderService) AopContext.currentProxy();<span class="hljs-comment">//拿到当前对象的代理对象</span><br><br>        <span class="hljs-comment">//4.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//事务的范围是更新数据库，上述查询数据库不需要加事务，事务的方法必须为public才能生效，不能是private</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>        <span class="hljs-comment">//5.一人一单</span><br>        <span class="hljs-comment">//Long userId = UserHolder.getUser().getId();//异步的子线程，不能通过ThreadLocal获得userId</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br><br>        <span class="hljs-comment">//5.1 查询订单</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();<br>        <span class="hljs-comment">//5.2 判断是否存在</span><br>        <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//用户已经购买过一次</span><br>            log.error(<span class="hljs-string">&quot;用户已经购买过一次&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">//6.扣减库存</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())<br>                .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>                .update();<br>        <span class="hljs-keyword">if</span>(!success)&#123;<br>            <span class="hljs-comment">//扣减失败</span><br>            log.error(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">//7.创建订单</span><br>        save(voucherOrder);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h6><p>在<code>Postman</code>中准备如下两个一样的请求<code>http://localhost:8080/api/voucher-order/seckill/12</code>，<code>Header</code>携带两个不同的有效的<code>authorization</code>。</p><p>发送请求，第一次返回订单号，后续请求返回不能重复下单，即为测试成功。</p><p>也有使用<code>Jmeter</code>进行高并发测试，但我没有进行测试。</p><h5 id="三种消息队列对比"><a href="#三种消息队列对比" class="headerlink" title="三种消息队列对比"></a>三种消息队列对比</h5><table><thead><tr><th></th><th><strong>List</strong></th><th><strong>PubSub</strong></th><th><strong>Stream</strong></th></tr></thead><tbody><tr><td><strong>消息持久化</strong></td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td><strong>阻塞读取</strong></td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td><strong>消息堆积处理</strong></td><td>受限于内存空间，可以利用多消费者加快处理</td><td>受限于消费者缓冲区</td><td>受限于队列长度，可以利用消费者组提高消费速度，减少堆积</td></tr><tr><td><strong>消息确认机制</strong></td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td><strong>消息回溯</strong></td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java-Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java-Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Redis：实战篇（1）</title>
    <link href="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/"/>
    <url>/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="实战篇"><a href="#实战篇" class="headerlink" title="实战篇"></a>实战篇</h2><h3 id="黑马点评"><a href="#黑马点评" class="headerlink" title="黑马点评"></a>黑马点评</h3><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.png"></p><h4 id="导入黑马点评项目"><a href="#导入黑马点评项目" class="headerlink" title="导入黑马点评项目"></a>导入黑马点评项目</h4><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p><h5 id="黑马点评项目框架"><a href="#黑马点评项目框架" class="headerlink" title="黑马点评项目框架"></a>黑马点评项目框架</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6.png"></p><h5 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h5><p>利用<code>idea</code>打开项目源码<code>hm-dianping</code>。</p><p>1.修改<code>yaml</code>文件下<code>datasource</code>的<code>password</code>，<code>redis</code>下的<code>host</code>和<code>password</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/hmdp?useSSL=false&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br></code></pre></td></tr></table></figure><p>2.修改<code>pom.xml</code>文件，讲<code>lombok</code>的版本修改为<code>1.18.30</code>版本。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_36829761/article/details/136287081">【已解决】java: java.lang.NoSuchFieldError: Class com.sun.tools.javac.tree.JCTree$JCImport does not have-CSDN博客</a></p><p>解决：将<code>Lombok</code>库升级到<code>1.18.30</code>或更高版本。该版本已经修复了这个问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.启动项目后，在浏览器访问：<a href="http://localhost:8081/shop-type/list">http://localhost:8081/shop-type/list</a> ，如果可以看到数据则证明运行没有问题。</p><h5 id="导入前端项目"><a href="#导入前端项目" class="headerlink" title="导入前端项目"></a>导入前端项目</h5><p>打开前端项目所在的<code>nginx</code>文件夹，将其复制到任意目录，要确保该目录不包含中文、特殊字符和空格。在<code>nginx</code>所在目录下打开一个<code>CMD</code>窗口，输入命令：<code>start nginx.exe</code>，或者直接点击<code>nginx.exe</code>运行。</p><p>打开<code>chrome</code>浏览器，打开开发者工具手机模式：访问: <a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a> ，即可看到页面。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2.png"></p><h3 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h3><h4 id="基于Session实现登录"><a href="#基于Session实现登录" class="headerlink" title="基于Session实现登录"></a>基于Session实现登录</h4><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E5%9F%BA%E4%BA%8ESession%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95.png"></p><h5 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81.png"></p><h5 id="短信验证码登录"><a href="#短信验证码登录" class="headerlink" title="短信验证码登录"></a>短信验证码登录</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95.png"></p><h5 id="登录验证功能"><a href="#登录验证功能" class="headerlink" title="登录验证功能"></a>登录验证功能</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD%EF%BC%881%EF%BC%89.png"></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD%EF%BC%882%EF%BC%89.png"></p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>1.<code>UserController</code>中实现发送验证码，登录，和<code>/me</code>访问自己的功能。</p><p>其中，<code>/me</code>只需要从当前线程<code>ThreadLocal</code>中获取当前用户并且返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserInfoService userInfoService;<br><br>    <span class="hljs-comment">//发送手机验证码</span><br>    <span class="hljs-meta">@PostMapping(&quot;code&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;<br>        <span class="hljs-comment">//发送短信验证码并保存验证码</span><br>        <span class="hljs-keyword">return</span> userService.sendCode(phone, session);<br>    &#125;<br><br>    <span class="hljs-comment">//登录功能：登录参数，包含手机号、验证码；或者手机号、密码</span><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;<br>        <span class="hljs-comment">// 实现登录功能</span><br>        <span class="hljs-keyword">return</span> userService.login(loginForm, session);<br>    &#125;<br><br>    <span class="hljs-comment">//登出功能</span><br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// TODO 实现登出功能</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;功能未完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/me&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">me</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 获取当前登录的用户并返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(UserHolder.getUser());<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/info/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">info</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;<br>        <span class="hljs-comment">// 查询详情</span><br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> userInfoService.getById(userId);<br>        <span class="hljs-keyword">if</span> (info == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 没有详情，应该是第一次查看详情</span><br>            <span class="hljs-keyword">return</span> Result.ok();<br>        &#125;<br>        info.setCreateTime(<span class="hljs-literal">null</span>);<br>        info.setUpdateTime(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(info);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IUserService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br><br>    Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span>;<br><br>    Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>UserServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>        <span class="hljs-comment">//1.校验手机号</span><br>        <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>            <span class="hljs-comment">//2.如果不符合，返回错误信息</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//3.符合，生成验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomString(<span class="hljs-number">6</span>);<br><br>        <span class="hljs-comment">//4.保存验证码到session</span><br>        session.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,code);<br><br>        <span class="hljs-comment">//5.发送验证码</span><br>        log.debug(<span class="hljs-string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>, code);<br><br>        <span class="hljs-comment">//返回ok</span><br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>        <span class="hljs-comment">//1.校验手机号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>        <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>            <span class="hljs-comment">//2.如果不符合，返回错误信息</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//2.校验验证码</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>        <span class="hljs-keyword">if</span>(cacheCode == <span class="hljs-literal">null</span> || !cacheCode.equals(code))&#123;<br>            <span class="hljs-comment">//3.不一致，报错</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<span class="hljs-comment">//MyBatisPlus查询用户</span><br><br>        <span class="hljs-comment">//5.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//6.不存在，创建新用户并保存</span><br>            user = createUserWithPhone(phone);<br>        &#125;<br><br>        <span class="hljs-comment">//7.保存用户信息到session中</span><br>        session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, BeanUtil.copyProperties(user, UserDTO.class));<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> User <span class="hljs-title function_">createUserWithPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-comment">//1.创建用户</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setPhone(phone);<br>        user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="hljs-number">10</span>));<br>        <span class="hljs-comment">//2.保存用户</span><br>        save(user);<span class="hljs-comment">//MyBatisPlus保存用户到数据库</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>LoginInterceptor</code>，设置拦截器进行拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><br>        <span class="hljs-comment">//2.获取session中的用户</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><br>        <span class="hljs-comment">//3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//4.不存在，拦截，返回401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5.存在，保存用户信息到ThreadLocal</span><br>        UserHolder.saveUser((UserDTO) user);<span class="hljs-comment">//保存到当前线程里</span><br><br>        <span class="hljs-comment">//6.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//移除用户</span><br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.<code>MvcConfig</code>，注册拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>                .excludePathPatterns(<br>                        <span class="hljs-string">&quot;/shop/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/voucher/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/shop-type/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/upload/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/blog/hot&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/code&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/login&quot;</span><br>                );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p>1.<code>Cookie</code>。</p><p><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html">前端安全系列（二）：如何防止CSRF攻击？ - 美团技术团队</a></p><p><a href="https://blog.csdn.net/qq_45888932/article/details/124002586">为什么token能够防止CSRF（修正版）_token防止csrf-CSDN博客</a></p><p>2.<code>localstorage</code>、<code>sessionstorage</code>、<code>cookie</code>的区别。</p><p><a href="https://blog.csdn.net/Cat0926/article/details/135658617">Cookie、LocalStorage和SessionStorage：一次非常详细的对比!_cookie localstorage sessionstorage-CSDN博客</a></p><p>3.<code>HttpSession</code>。</p><p><a href="https://blog.csdn.net/hcz666/article/details/108916119">HttpSession详解(简称session)-CSDN博客</a></p><p><a href="https://blog.csdn.net/yiminghd2861/article/details/116120766">Java Web之HttpSession详解-CSDN博客</a></p><h4 id="集群的session共享问题"><a href="#集群的session共享问题" class="headerlink" title="集群的session共享问题"></a>集群的session共享问题</h4><p><code>session</code>共享问题：多台<code>Tomcat</code>并不共享<code>session</code>存储空间，当请求切换到不同<code>tomcat</code>服务时导致数据丢失的问题。</p><p><code>session</code>的替代方案应该满足：</p><ul><li>数据共享</li><li>内存存储</li><li><code>key</code>、<code>value</code>结构</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E9%9B%86%E7%BE%A4%E7%9A%84session%E5%85%B1%E4%BA%AB%E9%97%AE%E9%A2%98.png"></p><h4 id="基于Redis实现共享session登录"><a href="#基于Redis实现共享session登录" class="headerlink" title="基于Redis实现共享session登录"></a>基于Redis实现共享session登录</h4><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E5%9F%BA%E4%BA%8ERedis%E5%AE%9E%E7%8E%B0%E5%85%B1%E4%BA%ABsession%E7%99%BB%E5%BD%95%EF%BC%881%EF%BC%89.png"></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E5%9F%BA%E4%BA%8ERedis%E5%AE%9E%E7%8E%B0%E5%85%B1%E4%BA%ABsession%E7%99%BB%E5%BD%95%EF%BC%882%EF%BC%89.png"></p><p><code>Redis</code>代替<code>session</code>需要考虑的问题：</p><ul><li>选择合适的数据结构</li><li>选择合适的key</li><li>选择合适的存储粒度</li></ul><h5 id="前端页面携带token"><a href="#前端页面携带token" class="headerlink" title="前端页面携带token"></a>前端页面携带token</h5><p>前端<code>login.html</code>页面。发送登录请求时保存用户信息到<code>session</code>。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%90%BA%E5%B8%A6token%EF%BC%881%EF%BC%89.png"></p><p>前端<code>common.js</code>文件。每次发送请求时讲<code>token</code>作为放入请求头。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%90%BA%E5%B8%A6token%EF%BC%882%EF%BC%89.png"></p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><p>1.<code>UserServiceImpl</code>，使用<code>Redis</code>存储登录信息。</p><p>将验证码保存到<code>Redis</code>中，<code>key</code>值为<code>login:code+手机号码</code>。</p><p>随机生成<code>token</code>，将新用户保存到<code>Redis</code>中<code>key</code>值为<code>login:token+token值</code>。并设置有效期。需要将<code>token</code>值返回给前端，前端会将<code>token</code>保存到<code>sessionStorage</code>，在以后每次的请求中都会携带请求头<code>authorization</code>，值为<code>token</code>的值回到后端。后续后端拦截器每次要验证请求头<code>authorization</code>的值是否为<code>token</code>的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>        <span class="hljs-comment">//1.校验手机号</span><br>        <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>            <span class="hljs-comment">//2.如果不符合，返回错误信息</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//3.符合，生成验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomString(<span class="hljs-number">6</span>);<br><br>        <span class="hljs-comment">//4.保存验证码到redis</span><br>        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);<br><br>        <span class="hljs-comment">//5.发送验证码</span><br>        log.debug(<span class="hljs-string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>, code);<br><br>        <span class="hljs-comment">//返回ok</span><br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>        <span class="hljs-comment">//1.校验手机号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>        <span class="hljs-keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;<br>            <span class="hljs-comment">//2.如果不符合，返回错误信息</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//3.从redis获取验证码并校验</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>        <span class="hljs-keyword">if</span>(cacheCode == <span class="hljs-literal">null</span> || !cacheCode.equals(code))&#123;<br>            <span class="hljs-comment">//3.不一致，报错</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<span class="hljs-comment">//MyBatisPlus查询用户</span><br><br>        <span class="hljs-comment">//5.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//6.不存在，创建新用户并保存</span><br>            user = createUserWithPhone(phone);<br>        &#125;<br><br>        <span class="hljs-comment">//7.保存用户信息到redis中</span><br>        <span class="hljs-comment">//7.1 随机生成token，作为登录令牌</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//7.1 将User对象转为HashMap存储</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.toBean(user, UserDTO.class);<br>        Map&lt;String,Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(),<br>                CopyOptions.create().<br>                        setIgnoreNullValue(<span class="hljs-literal">true</span>).<br>                        setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));<br>        <span class="hljs-comment">//7.3 存储</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">tokenKey</span> <span class="hljs-operator">=</span> LOGIN_USER_KEY + token;<br>        stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);<br>        <span class="hljs-comment">//7.4 设置token有效期</span><br>        stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);<br><br>        <span class="hljs-comment">//8. 返回token</span><br>        <span class="hljs-keyword">return</span> Result.ok(token);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> User <span class="hljs-title function_">createUserWithPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-comment">//1.创建用户</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setPhone(phone);<br>        user.setNickName(USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="hljs-number">10</span>));<br>        <span class="hljs-comment">//2.保存用户</span><br>        save(user);<span class="hljs-comment">//MyBatisPlus保存用户到数据库</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>LoginInterceptor</code>。拦截器判断<code>token</code>是否存在，通过<code>token</code>从<code>Redis</code>中获取用户信息，并将保存用户信息到<code>ThreadLocal</code>。刷新<code>Redis</code>中的<code>token</code>有效期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-comment">// 这里不能使用@Resource注解来注入，只能使用构造函数来注入。</span><br>    <span class="hljs-comment">// 因为LoginInterceptor类的对象是手动new出来的，不是通过Spring创建的，无法做依赖注入</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoginInterceptor</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取请求头中的token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-keyword">if</span>(StrUtil.isBlank(token)) &#123;<br>            <span class="hljs-comment">//不存在，拦截，返回401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            log.info(<span class="hljs-string">&quot;info&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2.基于token获取redis中的用户</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> RedisConstants.LOGIN_USER_KEY + token;<br>        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);<br><br>        <span class="hljs-comment">//3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(userMap.isEmpty()) &#123;<br>            <span class="hljs-comment">//4.不存在，拦截，返回401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 将查询到的Hash数据转为UserDTO对象</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">//6.存在，保存用户信息到ThreadLocal</span><br>        UserHolder.saveUser(userDTO);<span class="hljs-comment">//保存到当前线程里</span><br><br>        <span class="hljs-comment">//7. 刷新token有效期</span><br>        stringRedisTemplate.expire(key, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);<br><br>        <span class="hljs-comment">//8.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//移除用户</span><br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>MvcConfig</code>，要注入<code>StringRedisTemplate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">// 该类加了@Configuration注解，由Spring来构建，可以做依赖注入</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>(stringRedisTemplate))<br>                .excludePathPatterns(<br>                        <span class="hljs-string">&quot;/shop/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/voucher/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/shop-type/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/upload/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/blog/hot&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/code&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/login&quot;</span><br>                );<br>        <span class="hljs-comment">// 注意这里每个链接必须得前面加/</span><br>        <span class="hljs-comment">// 比如：如果是user/code还是会被拦截，/user/code才不会被拦截</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="登录拦截器的优化"><a href="#登录拦截器的优化" class="headerlink" title="登录拦截器的优化"></a>登录拦截器的优化</h5><p>登录拦截器优化前：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BC%98%E5%8C%96%E5%89%8D.png"></p><p>登录拦截器优化后：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%EF%BC%9A%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BC%98%E5%8C%96%E5%90%8E.png"></p><p>优化方法：使用<code>RefreshTokenInterceptor</code>拦截一切路径，在这里刷新<code>token</code>有效期。</p><p>1.<code>RefreshTokenInterceptor</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-comment">// 这里不能使用@Resource注解来注入，只能使用构造函数来注入。</span><br>    <span class="hljs-comment">// 因为LoginInterceptor类的对象是手动new出来的，不是通过Spring创建的，无法做依赖注入</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefreshTokenInterceptor</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取请求头中的token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-keyword">if</span>(StrUtil.isBlank(token)) &#123;<span class="hljs-comment">//为空放行到下一个拦截器</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2.基于token获取redis中的用户</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> RedisConstants.LOGIN_USER_KEY + token;<br>        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);<br><br>        <span class="hljs-comment">//3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(userMap.isEmpty()) &#123;<span class="hljs-comment">//为空放行到下一个拦截器</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 将查询到的Hash数据转为UserDTO对象</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">//6.存在，保存用户信息到ThreadLocal</span><br>        UserHolder.saveUser(userDTO);<span class="hljs-comment">//保存到当前线程里</span><br><br>        <span class="hljs-comment">//7. 刷新token有效期</span><br>        stringRedisTemplate.expire(key, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);<br><br>        <span class="hljs-comment">//8.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//移除用户</span><br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>LoginInterceptor</code>拦截需要进行登录验证的路径，判断是否存在用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.判断是否需要拦截（ThreadLocal中是否有用户</span><br>        <span class="hljs-keyword">if</span>(UserHolder.getUser() == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//没有，需要拦截，设置状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-comment">//拦截</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//有用户，则放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>MvcConfig</code>，注册两个拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">// 该类加了@Configuration注解，由Spring来构建，可以做依赖注入</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//登录拦截器</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>                .excludePathPatterns(<br>                        <span class="hljs-string">&quot;/shop/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/voucher/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/shop-type/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/upload/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/blog/hot&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/code&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/login&quot;</span><br>                ).order(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 注意这里每个链接必须得前面加/</span><br>        <span class="hljs-comment">// 比如：如果是user/code还是会被拦截，/user/code才不会被拦截</span><br><br>        <span class="hljs-comment">//token刷新的拦截器</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshTokenInterceptor</span>(stringRedisTemplate))<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).order(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//默认拦截所有请求</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h3><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>缓存就是数据交换的缓冲区（称作<code>Cache</code>），是存贮数据的临时地方，一般读写性能较高。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98.png"></p><p>缓存的作用：降低后端负载，提高读写效率，降低响应时间。</p><p>缓存的成本：数据一致性成本、代码维护成本、运维成本。</p><h4 id="添加Redis缓存"><a href="#添加Redis缓存" class="headerlink" title="添加Redis缓存"></a>添加Redis缓存</h4><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E6%B7%BB%E5%8A%A0Redis%E7%BC%93%E5%AD%98.png"></p><h5 id="给根据id查询商铺添加缓存"><a href="#给根据id查询商铺添加缓存" class="headerlink" title="给根据id查询商铺添加缓存"></a>给根据id查询商铺添加缓存</h5><p>1.<code>ShopController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询商铺信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 商铺id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 商铺详情数据</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> shopService.queryById(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IShopService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>ShopServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopServiceImpl</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>            <span class="hljs-keyword">return</span> Result.ok(shop);<br>        &#125;<br>        <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">//5.不存在，返回错误</span><br>        <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//6.存在，写入Redis</span><br>        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop));<br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="给店铺类型查询业务添加缓存"><a href="#给店铺类型查询业务添加缓存" class="headerlink" title="给店铺类型查询业务添加缓存"></a>给店铺类型查询业务添加缓存</h5><p>需求：修改<code>ShopTypeController</code>中的<code>queryTypeList</code>方法，添加查询缓存。</p><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_45721579/article/details/125347371">【黑马点评】给店铺类型查询业务添加缓存【业务实现】_黑马点评商品类型-CSDN博客</a></p><p><a href="https://www.cnblogs.com/chendsome/p/18580663">【黑马点评】实战篇-作业-店铺类型缓存-List实现 - chendsome - 博客园</a></p><p>1.<code>ShopTypeController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;list&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryTypeList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*        List&lt;ShopType&gt; typeList = typeService</span><br><span class="hljs-comment">                .query().orderByAsc(&quot;sort&quot;).list();*/</span><br>    <span class="hljs-keyword">return</span> typeService.queryTypeList();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IShopTypeService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Result <span class="hljs-title function_">queryTypeList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>3.<code>ShopTypeServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopTypeServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopTypeMapper, ShopType&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopTypeService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryTypeList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.从redis中查询店铺类型缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopType</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(RedisConstants.CACHE_SHOPTYPE_KEY);<br>        <span class="hljs-comment">//2.判断是否为空</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(shopType)) &#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            List&lt;ShopType&gt; shopTypes = JSONUtil.toList(shopType, ShopType.class);<br>            <span class="hljs-keyword">return</span> Result.ok(shopTypes);<br>        &#125;<br>        <span class="hljs-comment">//4.不存在，从数据库中查询写入redis</span><br>        List&lt;ShopType&gt; shopTypes = query().orderByAsc(<span class="hljs-string">&quot;sort&quot;</span>).list();<br>        <span class="hljs-comment">//5.不存在，返回错误</span><br>        <span class="hljs-keyword">if</span> (shopTypes == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;分类不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//6.存在，写入redis</span><br>        stringRedisTemplate.opsForValue().set(RedisConstants.CACHE_SHOPTYPE_KEY,JSONUtil.toJsonStr(shopTypes));<br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(shopTypes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h4><table><thead><tr><th></th><th align="left"><strong>内存淘汰</strong></th><th><strong>超时剔除</strong></th><th><strong>主动更新</strong></th></tr></thead><tbody><tr><td><strong>说明</strong></td><td align="left">不用自己维护，利用Redis的内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。</td><td>给缓存数据添加TTL时间，到期后自动删除缓存。下次查询时更新缓存。</td><td>编写业务逻辑，在修改数据库的同时，更新缓存。</td></tr><tr><td><strong>一致性</strong></td><td align="left">差</td><td>一般</td><td>好</td></tr><tr><td><strong>维护成本</strong></td><td align="left">无</td><td>低</td><td>高</td></tr></tbody></table><p>业务场景：</p><ul><li><strong>低一致性</strong>需求：使用<strong>内存淘汰</strong>机制。例如店铺类型的查询缓存。</li><li><strong>高一致性</strong>需求：<strong>主动更新</strong>，并以<strong>超时剔除</strong>作为兜底方案。例如店铺详情查询的缓存。</li></ul><h5 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h5><h6 id="1-Cache-Aside-Pattern"><a href="#1-Cache-Aside-Pattern" class="headerlink" title="1. Cache Aside Pattern"></a>1. Cache Aside Pattern</h6><p><strong>由缓存的调用者，在更新数据库的同时更新缓存。</strong></p><p>操作缓存和数据库时有三个问题需要考虑：</p><p>删除缓存还是更新缓存：选择<strong>删除缓存</strong>。</p><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多。</li><li><strong>删除缓存：更新数据库时让缓存失效，查询时再更新缓存</strong>。</li></ul><p>如何保证缓存与数据库的操作的同时成功或失败？</p><ul><li>单体系统，将缓存与数据库操作放在一个事务。</li><li>分布式系统，利用TCC等分布式事务方案。</li></ul><p>先操作缓存还是先操作数据库：<strong>先写数据库，然后再删除缓存</strong>。</p><ul><li>先删除缓存，再操作数据库。</li><li>先操作数据库，再删除缓存。</li></ul><p><strong>案例：</strong></p><p>1.一开始缓存和数据库均为10，正常操作的流程如下：线程1删除缓存后更新数据库为20，此时线程2查询缓存，未命中之后查询数据库，得到的值为20，将该值写入缓存。在这种情况下两次得到的值都是正确的。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5%EF%BC%881%EF%BC%89.png"></p><p>2.一开始缓存和数据库均为10，线程1执行先删除缓存再更新数据库的操作。当线程1删除缓存后，更新数据库之前，此时线程2查询缓存，未命中并查询数据库，得到的值为20，并将20写入缓存。在线程2操作完毕之后，线程1更新数据库为20，此时缓存和数据库的值不一样，就造成了数据不一致的情况。</p><p>这种情况发生的可能性会比较高，因为更新数据库的操作会比较长，此时线程2更容易进来执行。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5%EF%BC%882%EF%BC%89.png"></p><p>3.开始缓存和数据库均为10，正常操作的流程如下：线程2更新数据库为20，然后再将缓存删除，此时线程1查询缓存，未命中之后查询数据库，得到的值为20，将该值写入缓存。在这种情况下两次得到的值都是正确的。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5%EF%BC%883%EF%BC%89.png"></p><p>4.一开始缓存和数据库均为10，线程2执行先更新数据库再删除缓存的操作。首先线程1查询缓存，未命中并查询数据库值为10。此时线程2更新数据库为20，并删除缓存。此时切换到线程1执行写入缓存的操作，因为之前线程1查询缓存结果为10，此时写入缓存的值为10。此时缓存和数据库的值不一样，就造成了数据不一致的情况。</p><p>这种情况发生的可能性非常低，因为写入缓存的操作非常快，而更新数据库的操作时间较长，此时几乎不会切换到线程2执行更新数据库操作之后再切换到进程1更新缓存，而是直接在线程1更新缓存。</p><p>综上分析，选择<strong>先操作数据库，再删除缓存</strong>的方式进行更新。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E4%B8%BB%E5%8A%A8%E6%9B%B4%E6%96%B0%E7%AD%96%E7%95%A5%EF%BC%884%EF%BC%89.png"></p><h6 id="2-Read-Write-Through-Pattern"><a href="#2-Read-Write-Through-Pattern" class="headerlink" title="2. Read&#x2F;Write Through Pattern"></a>2. Read&#x2F;Write Through Pattern</h6><p>缓存与数据库整合为一个服务，由<strong>服务来维护一致性</strong>。调用者调用该服务，无需关心缓存一致性问题。</p><h6 id="3-Write-Behind-Caching-Pattern"><a href="#3-Write-Behind-Caching-Pattern" class="headerlink" title="3. Write Behind Caching Pattern"></a>3. Write Behind Caching Pattern</h6><p><strong>调用者只操作缓存</strong>，由<strong>其它线程异步的将缓存数据持久化到数据库</strong>，保证最终一致。</p><h5 id="缓存更新策略的最佳实践方案"><a href="#缓存更新策略的最佳实践方案" class="headerlink" title="缓存更新策略的最佳实践方案"></a>缓存更新策略的最佳实践方案</h5><ul><li>低一致性需求：使用<code>Redis</code>自带的<strong>内存淘汰</strong>机制。</li><li>高一致性需求：<strong>主动更新</strong>，并以<strong>超时剔除</strong>作为兜底方案。</li></ul><p>读操作：</p><ul><li>缓存命中则直接返回。</li><li>缓存未命中则查询数据库，并写入缓存，设定超时时间。</li></ul><p>写操作：</p><ul><li><strong>先写数据库，然后再删除缓存</strong>。</li><li>要确保数据库与缓存<strong>操作的原子性</strong>。</li></ul><h5 id="给查询商铺的缓存添加超时剔除和主动更新的策略"><a href="#给查询商铺的缓存添加超时剔除和主动更新的策略" class="headerlink" title="给查询商铺的缓存添加超时剔除和主动更新的策略"></a>给查询商铺的缓存添加超时剔除和主动更新的策略</h5><p>修改<code>ShopController</code>中的业务逻辑，满足下面的需求：</p><ul><li>根据<code>id</code>查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间。</li></ul><p><code>ShopServiceImpl</code>中<code>queryById</code>设置超时时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>    <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">//2.判断是否存在</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>        <span class="hljs-comment">//3.存在，直接返回</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br>    <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">//5.不存在，返回错误</span><br>    <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//6.存在，写入Redis（设置超时时间）</span><br>    stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">//7.返回</span><br>    <span class="hljs-keyword">return</span> Result.ok(shop);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试方法</strong>：查看<code>Redis</code>下过期时间是否更新。</p><ul><li>根据<code>id</code>修改店铺时，先修改数据库，再删除缓存。</li></ul><p>1.<code>ShopController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@PutMapping</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateShop</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Shop shop)</span> &#123;<br>    <span class="hljs-comment">// 写入数据库</span><br>    <span class="hljs-comment">//shopService.updateById(shop);</span><br>    <span class="hljs-keyword">return</span> shopService.update(shop);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>IShopService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Result <span class="hljs-title function_">update</span><span class="hljs-params">(Shop shop)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>ShopServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(Shop shop)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> shop.getId();<br>    <span class="hljs-keyword">if</span>(id == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺id不能为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//1.更新数据库</span><br>    updateById(shop);<br>    <span class="hljs-comment">//2.删除缓存</span><br>    stringRedisTemplate.delete(CACHE_SHOP_KEY + id);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试方法</strong>：</p><p>通过<code>Postman</code>更新店铺：<code>http://localhost:8080/api/shop</code>，使用<code>PUT</code>方法，使用<code>raw</code>填写<code>JSON</code>修改数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;area&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;大关&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;openHours&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10:00-22:00&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sold&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4215</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;金华路锦昌文华苑29号&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;comments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3035</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;avgPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">80</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">37</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;101茶餐厅&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typeId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>修改之后再次查看数据，会发现缓存已经被删除。此时重新查询数据库，并写入缓存。以后再访问则直接访问缓存。</p><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p><strong>缓存穿透</strong>是指<strong>客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库</strong>。</p><p>常见的解决方案有两种：</p><ol><li><p><strong>缓存空对象</strong></p><ul><li><p>优点：实现简单，维护方便</p></li><li><p>缺点：</p><ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li><p><strong>布隆过滤</strong></p><ul><li><p>优点：内存占用较少，没有多余<code>key</code></p></li><li><p>缺点：</p><ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ol><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png"></p><h5 id="使用缓存空对象解决缓存穿透"><a href="#使用缓存空对象解决缓存穿透" class="headerlink" title="使用缓存空对象解决缓存穿透"></a>使用缓存空对象解决缓存穿透</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%EF%BC%88%E7%BC%93%E5%AD%98%E7%A9%BA%E5%AF%B9%E8%B1%A1%EF%BC%89.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>    <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">//2.判断是否存在</span><br>    <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>        <span class="hljs-comment">//3.存在，直接返回</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, Shop.class);<br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br>    <span class="hljs-comment">// 判断命中的是否是空值</span><br>    <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//返回一个错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺信息不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">//5.不存在，返回错误</span><br>    <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">// 将空值写入Redis</span><br>        stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//6.存在，写入Redis</span><br>    stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>    <span class="hljs-comment">//7.返回</span><br>    <span class="hljs-keyword">return</span> Result.ok(shop);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试方法：</strong></p><p>访问不存在的店铺<code>id</code>为0，链接：<a href="http://localhost:8080/api/shop/0">http://localhost:8080/api/shop/0</a></p><p>第一次访问时，查询了数据库，并将空值存入缓存。后续访问均不查询数据库，直接访问缓存，直到缓存过期再重新访问数据库。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>缓存穿透产生的原因：用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力。</p><p>缓存穿透的解决方案有哪些？</p><ul><li>缓存<code>null</code>值</li><li>布隆过滤</li><li>增强<code>id</code>的复杂度，避免被猜测<code>id</code>规律</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p><strong>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</strong></p><p>解决方案：</p><ul><li>给不同的<code>Key</code>的<code>TTL</code>添加随机值（针对<code>key</code>同时失效。在批量导入<code>key</code>的时候，给<code>TTL</code>后面加入随机数，比如设置有效期为30分钟，可以随机加上1-5分钟，使得<code>TTL</code>在30-35之间波动，可以使<code>key</code>失效的时间在一个时间段内，而不是一起失效。）</li><li>利用<code>Redis</code>集群提高服务的可用性（针对<code>Redis</code>服务宕机，比如<code>Redis</code>哨兵机制）</li><li>给缓存业务添加降级限流策略（提前做好容错处理，当发现<code>Redis</code>故障时，及时做服务降级，快速失败拒绝服务。而不是把请求压到数据库，这样子做牺牲部分服务，保护数据库。）</li><li>给业务添加多级缓存（浏览器、<code>nginx</code>、<code>redis</code>、<code>jvm</code>、数据库多个层面进行缓存。）</li></ul><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.png"></p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p><strong>缓存击穿问题</strong>也叫<strong>热点Key问题</strong>，就是<strong>一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</strong></p><p>常见的解决方案有两种：</p><ul><li>互斥锁</li><li>逻辑过期</li></ul><table><thead><tr><th><strong>解决方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>互斥锁</strong></td><td>没有额外的内存消耗保证一致性实现简单</td><td>线程需要等待，性能受影响可能有死锁风险</td></tr><tr><td><strong>逻辑过期</strong></td><td>线程无需等待，性能较好</td><td>不保证一致性有额外内存消耗实现复杂</td></tr></tbody></table><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png"></p><h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E4%BA%92%E6%96%A5%E9%94%81%EF%BC%89.png"></p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p><strong>案例：基于互斥锁方式解决缓存击穿问题</strong></p><p>需求：修改根据<code>id</code>查询商铺的业务，基于互斥锁方式来解决缓存击穿问题。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E4%BA%92%E6%96%A5%E9%94%81%E6%B5%81%E7%A8%8B%EF%BC%89.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopServiceImpl</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//缓存穿透</span><br>        <span class="hljs-comment">//Shop shop = queryWithPassThrough(id);</span><br><br>        <span class="hljs-comment">//互斥锁解决缓存击穿</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> queryWithMutex(id);<br>        <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//4.实现缓存重建</span><br>            <span class="hljs-comment">//4.1 获取互斥锁</span><br>            lockKey = LOCK_SHOP_KEY + id;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>            <span class="hljs-comment">//4.2 判断是否获取成功</span><br>            <span class="hljs-keyword">if</span>(!isLock)&#123;<br>                <span class="hljs-comment">//4.3 失败，则休眠并重试</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-keyword">return</span> queryWithMutex(id);<br>            &#125;<br><br>            <span class="hljs-comment">//获取锁成功，再次检测redis缓存是否存在，做DoubleCheck，如果存在则无需重建缓存。</span><br>            <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>            shopJson = stringRedisTemplate.opsForValue().get(key);<br>            <span class="hljs-comment">//2.判断是否存在</span><br>            <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>                <span class="hljs-comment">//3.存在，直接返回</span><br>                <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>            &#125;<br>            <span class="hljs-comment">//不存在，再根据id查询数据库</span><br><br>            <span class="hljs-comment">//4.4成功，根据id查询数据库</span><br>            shop = getById(id);<br><br>            <span class="hljs-comment">//模拟重建的延时，延时越高，并发出现的线程越多</span><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-comment">//5.不存在，返回错误</span><br>            <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">// 将空值写入Redis</span><br>                stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>                <span class="hljs-comment">// 返回错误信息</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//6.存在，写入Redis</span><br>            stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7.释放互斥锁</span><br>            unlock(lockKey);<br>        &#125;<br><br>        <span class="hljs-comment">//8.返回</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">//5.不存在，返回错误</span><br>        <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 将空值写入Redis</span><br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//6.存在，写入Redis</span><br>        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">//锁的有效时长比正常业务执行的时间长10-20倍就好，这里设置为10s，避免异常情况。</span><br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<span class="hljs-comment">//flag可能出现null值</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(Shop shop)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> shop.getId();<br>        <span class="hljs-keyword">if</span>(id == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺id不能为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//1.更新数据库</span><br>        updateById(shop);<br>        <span class="hljs-comment">//2.删除缓存</span><br>        stringRedisTemplate.delete(CACHE_SHOP_KEY + id);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>1.使用<code>Jmeter</code>进行测试，定义<code>线程组</code>，设置1000个线程，执行时间为5s。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E4%BA%92%E6%96%A5%E9%94%81-Jmeter%E6%B5%8B%E8%AF%951%EF%BC%89.png"></p><p>2.填写<code>HTTP请求</code>，然后点击运行。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E4%BA%92%E6%96%A5%E9%94%81-Jmeter%E6%B5%8B%E8%AF%952%EF%BC%89.png"></p><p>3.运行结束后在<code>查看结果树</code>中查看运行的结果。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E4%BA%92%E6%96%A5%E9%94%81-Jmeter%E6%B5%8B%E8%AF%953%EF%BC%89.png"></p><p>4.查看后台程序，可以发现访问数据库语句只执行了一条，说明互斥锁程序没有问题。</p><h5 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h5><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E9%80%BB%E8%BE%91%E8%BF%87%E6%9C%9F%EF%BC%89.png"></p><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><p><strong>案例：基于逻辑过期方式解决缓存击穿问题</strong></p><p>需求：修改根据<code>id</code>查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%881%EF%BC%89/%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%9A%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%88%E9%80%BB%E8%BE%91%E8%BF%87%E6%9C%9F%E6%B5%81%E7%A8%8B%EF%BC%89.png"></p><p><strong>注意：</strong>因为会在测试时，提前准备好数据，所以上述如果访问缓存不命中的话，直接返回空，然后在<code>test</code>方法中，调用<code>ShopServiceImpl</code>的<code>saveShop2Redis</code>方法提前在缓存中准备好数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HmDianPingApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ShopServiceImpl shopService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveShop</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<span class="hljs-comment">//测试提前准备好预热数据</span><br>        shopService.saveShop2Redis(<span class="hljs-number">1L</span>, <span class="hljs-number">10L</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ShopServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopServiceImpl</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//缓存穿透</span><br>        <span class="hljs-comment">//Shop shop = queryWithPassThrough(id);</span><br><br>        <span class="hljs-comment">//互斥锁解决缓存击穿</span><br><span class="hljs-comment">/*        Shop shop = queryWithMutex(id);</span><br><span class="hljs-comment">        if(shop == null)&#123;</span><br><span class="hljs-comment">            return Result.fail(&quot;店铺不存在！&quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">//逻辑过期解决缓存击穿</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> queryWithLogicalExpire(id);<br>        <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isBlank(shopJson))&#123;<br>            <span class="hljs-comment">//3.不存在，直接返回null</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//4.命中，需要先把json发序列化为对象</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);<br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br><br>        <span class="hljs-comment">//5.判断是否过期</span><br>        <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>            <span class="hljs-comment">//5.1 未过期，直接返回店铺信息</span><br>            <span class="hljs-keyword">return</span> shop;<br>        &#125;<br><br>        <span class="hljs-comment">//5.2 已过期，需要缓存重建</span><br>        <span class="hljs-comment">//6.缓存重建</span><br>        <span class="hljs-comment">//6.1 获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br><br>        <span class="hljs-comment">//6.2 判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span>(isLock)&#123;<br>            <span class="hljs-comment">//获取锁成功应该再次检测redis缓存是否过期，做DoubleCheck。如果存在则无需重建缓存。</span><br>            <span class="hljs-comment">//判断是否过期</span><br>            <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>                <span class="hljs-comment">//5.1 未过期，直接返回店铺信息</span><br>                <span class="hljs-keyword">return</span> shop;<br>            &#125;<br>            <span class="hljs-comment">//6.3 成功，开启独立线程，实现缓存重建</span><br>            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//重建缓存</span><br>                    <span class="hljs-built_in">this</span>.saveShop2Redis(id, <span class="hljs-number">20L</span>);<span class="hljs-comment">//测试的时候用20s（期待缓存过期做缓存重建查看是否触发线程安全问题），实际过期时间设置为30min。</span><br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">//释放锁</span><br>                    unlock(lockKey);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">//6.4返回过期的商铺信息</span><br><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//4.实现缓存重建</span><br>            <span class="hljs-comment">//4.1 获取互斥锁</span><br>            lockKey = LOCK_SHOP_KEY + id;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>            <span class="hljs-comment">//4.2 判断是否获取成功</span><br>            <span class="hljs-keyword">if</span>(!isLock)&#123;<br>                <span class="hljs-comment">//4.3 失败，则休眠并重试</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-keyword">return</span> queryWithMutex(id);<br>            &#125;<br><br>            <span class="hljs-comment">//获取锁成功，再次检测redis缓存是否存在，做DoubleCheck，如果存在则无需重建缓存。</span><br>            <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>            shopJson = stringRedisTemplate.opsForValue().get(key);<br>            <span class="hljs-comment">//2.判断是否存在</span><br>            <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>                <span class="hljs-comment">//3.存在，直接返回</span><br>                <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>            &#125;<br>            <span class="hljs-comment">//不存在，再根据id查询数据库</span><br><br>            <span class="hljs-comment">//4.4成功，根据id查询数据库</span><br>            shop = getById(id);<br><br>            <span class="hljs-comment">//模拟重建的延时，延时越高，并发出现的线程越多</span><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-comment">//5.不存在，返回错误</span><br>            <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">// 将空值写入Redis</span><br>                stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>                <span class="hljs-comment">// 返回错误信息</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//6.存在，写入Redis</span><br>            stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7.释放互斥锁</span><br>            unlock(lockKey);<br>        &#125;<br><br>        <span class="hljs-comment">//8.返回</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(shopJson))&#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span>(shopJson != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">//5.不存在，返回错误</span><br>        <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 将空值写入Redis</span><br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//6.存在，写入Redis</span><br>        stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">//锁的有效时长比正常业务执行的时间长10-20倍就好，这里设置为10s，避免异常情况。</span><br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<span class="hljs-comment">//flag可能出现null值</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveShop2Redis</span><span class="hljs-params">(Long id, Long expireSeconds)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<span class="hljs-comment">//提前将高并发数据存入Redis中</span><br>        <span class="hljs-comment">//1.查询店铺数据</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br><br>        <span class="hljs-comment">//模拟延迟，休眠200ms</span><br>        Thread.sleep(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">//2.封装逻辑过期时间</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>        redisData.setData(shop);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));<br>        <span class="hljs-comment">//3.写入Redis</span><br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(Shop shop)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> shop.getId();<br>        <span class="hljs-keyword">if</span>(id == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺id不能为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//1.更新数据库</span><br>        updateById(shop);<br>        <span class="hljs-comment">//2.删除缓存</span><br>        stringRedisTemplate.delete(CACHE_SHOP_KEY + id);<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h6><p>1.使用<code>Jmeter</code>进行测试，定义<code>线程组</code>，设置200个线程，执行时间为1s。</p><p>2.填写<code>HTTP请求</code>（和上述互斥锁的一样），然后点击运行。</p><p>3.运行结束后在<code>查看结果树</code>中查看运行的结果。</p><p>4.查看后台程序，可以发现访问数据库语句只执行了一条，说明互斥锁程序没有问题。</p><p>执行流程分析：提前预存好的缓存很快过期（有效期10s），运行<code>Jmeter</code>测试后，当<code>Java</code>程序命中缓存判断缓存失效后，会先返回当前结果，然后再访问数据库更新缓存。所以一开始的<code>Jmeter</code>线程读取到的是过期数据，等过了一段时间完成缓存更新后，<code>Jmeter</code>线程读取到的即为最新数据。</p><h4 id="缓存工具封装"><a href="#缓存工具封装" class="headerlink" title="缓存工具封装"></a>缓存工具封装</h4><p>基于<code>StringRedisTemplate</code>封装一个缓存工具类，满足下列需求：</p><ul><li>方法1：将任意<code>Java</code>对象序列化为<code>json</code>并存储在<code>string</code>类型的<code>key</code>中，并且可以设置<code>TTL</code>过期时间。</li><li>方法2：将任意<code>Java</code>对象序列化为<code>json</code>并存储在<code>string</code>类型的<code>key</code>中，并且可以设置逻辑过期时间，用于处理缓存击穿问题。</li><li>方法3：根据指定的<code>key</code>查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题。</li><li>方法4：根据指定的<code>key</code>查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题。</li></ul><p>1.缓存工具类：<code>CacheClient</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.hmdp.utils;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<span class="hljs-comment">//也可以用@Resource注解注入</span><br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicalExpire</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-comment">//设置逻辑过期</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>        redisData.setData(value);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br><br>        <span class="hljs-comment">//写入Redis</span><br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type,</span><br><span class="hljs-params">                                          Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>            <span class="hljs-comment">//3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//4.不存在，根据id查询数据库</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>        <span class="hljs-comment">//5.不存在，返回错误</span><br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 将空值写入Redis</span><br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//6.存在，写入Redis</span><br>        <span class="hljs-built_in">this</span>.set(key, r, time, unit);<br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R  <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; type,</span><br><span class="hljs-params">                                             Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">//1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isBlank(json))&#123;<br>            <span class="hljs-comment">//3.不存在，直接返回null</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//4.命中，需要先把json发序列化为对象</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br><br>        <span class="hljs-comment">//5.判断是否过期</span><br>        <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>            <span class="hljs-comment">//5.1 未过期，直接返回信息</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br><br>        <span class="hljs-comment">//5.2 已过期，需要缓存重建</span><br>        <span class="hljs-comment">//6.缓存重建</span><br>        <span class="hljs-comment">//6.1 获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br><br>        <span class="hljs-comment">//6.2 判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span>(isLock)&#123;<br>            <span class="hljs-comment">//获取锁成功应该再次检测redis缓存是否过期，做DoubleCheck。如果存在则无需重建缓存。</span><br>            <span class="hljs-comment">//判断是否过期</span><br>            <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>                <span class="hljs-comment">//5.1 未过期，直接返回店铺信息</span><br>                <span class="hljs-keyword">return</span> r;<br>            &#125;<br>            <span class="hljs-comment">//6.3 成功，开启独立线程，实现缓存重建</span><br>            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//重建缓存</span><br>                    <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>                    <span class="hljs-comment">//写入Redis</span><br>                    <span class="hljs-built_in">this</span>.setWithLogicalExpire(key, r1, time, unit);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">//释放锁</span><br>                    unlock(lockKey);<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">//6.4返回过期的信息</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-comment">//锁的有效时长比正常业务执行的时间长10-20倍就好，这里设置为10s，避免异常情况。</span><br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<span class="hljs-comment">//flag可能出现null值</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.使用缓存工具类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ShopMapper, Shop&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IShopService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CacheClient cacheClient;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopServiceImpl</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//缓存穿透</span><br>        <span class="hljs-comment">//Shop shop = queryWithPassThrough(id);</span><br><br>        <span class="hljs-comment">//使用cacheClient传入函数有两种写法，都对</span><br><span class="hljs-comment">/*        Shop shop = cacheClient.queryWithPassThrough(</span><br><span class="hljs-comment">                CACHE_SHOP_KEY, id, Shop.class, id2 -&gt; getById(id2), CACHE_SHOP_TTL, TimeUnit.MINUTES);*/</span><br><span class="hljs-comment">/*        Shop shop = cacheClient.queryWithPassThrough(</span><br><span class="hljs-comment">                CACHE_SHOP_KEY, id, Shop.class, this::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);*/</span><br><br><br>        <span class="hljs-comment">//互斥锁解决缓存击穿</span><br><span class="hljs-comment">/*        Shop shop = queryWithMutex(id);</span><br><span class="hljs-comment">        if(shop == null)&#123;</span><br><span class="hljs-comment">            return Result.fail(&quot;店铺不存在！&quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">//逻辑过期解决缓存击穿</span><br>        <span class="hljs-comment">//Shop shop = queryWithLogicalExpire(id);</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> cacheClient.queryWithLogicalExpire(<br>                CACHE_SHOP_KEY, id, Shop.class, <span class="hljs-built_in">this</span>::getById, <span class="hljs-number">20L</span>, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java-Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java-Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Redis：入门篇</title>
    <link href="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <url>/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h3><h4 id="认识NoSQL"><a href="#认识NoSQL" class="headerlink" title="认识NoSQL"></a>认识NoSQL</h4><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/SQL%E5%92%8CNoSQL%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><h4 id="认识Redis"><a href="#认识Redis" class="headerlink" title="认识Redis"></a>认识Redis</h4><p><code>Redis</code>诞生于<code>2009</code>年，全称是<code>Remote Dictionary Server</code>，远程词典服务器，是一个<strong>基于内存</strong>的<strong>键值型</strong><code>NoSQL</code>数据库。</p><p>特征：</p><ul><li>键值（<code>key-value</code>）型，<code>value</code>支持多种不同数据结构，功能丰富。</li><li>单线程，每个命令具备原子性。</li><li><strong>低延迟，速度快</strong>（基于内存、IO多路复用、良好的编码）。<code>Redis</code>速度快的最主要原因是<strong>基于内存</strong>。</li><li>支持数据持久化。</li><li>支持主从集群、分片集群。</li><li>支持多语言客户端。</li></ul><h3 id="Redis常见命令"><a href="#Redis常见命令" class="headerlink" title="Redis常见命令"></a>Redis常见命令</h3><h4 id="Redis数据结构介绍"><a href="#Redis数据结构介绍" class="headerlink" title="Redis数据结构介绍"></a>Redis数据结构介绍</h4><p><code>Redis</code>是一个<code>key-value</code>的数据库，<code>key</code>一般是<code>String</code>类型，不过<code>value</code>的类型多种多样。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><p><code>Redis</code>为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands</a> ）可以查看到不同的命令。通过<code>help [command]</code>可以查看一个命令的具体用法，例如：<code>help keys</code>。</p><h4 id="Redis通用命令"><a href="#Redis通用命令" class="headerlink" title="Redis通用命令"></a>Redis通用命令</h4><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li><code>KEYS</code>：查看符合模板的所有<code>key</code>。</li><li><code>DEL</code>：删除一个指定的<code>key</code>。</li><li><code>EXISTS</code>：判断<code>key</code>是否存在。</li><li><code>EXPIRE</code>：给一个<code>key</code>设置有效期，有效期到期时该<code>key</code>会被自动删除。</li><li><code>TTL</code>：查看一个<code>KEY</code>的剩余有效期。</li></ul><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p><code>String</code>类型，也就是字符串类型，是<code>Redis</code>中最简单的存储类型。</p><p>其<code>value</code>是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串。</li><li><code>int</code>：整数类型，可以做自增、自减操作。</li><li><code>float</code>：浮点类型，可以做自增、自减操作。</li></ul><p>不管是哪种格式，底层都是<strong>字节数组形式存储</strong>，只不过是<strong>编码方式不同</strong>。字符串类型的最大空间不能超过<code>512m</code>。</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>msg</td><td>hello world</td></tr><tr><td>num</td><td>10</td></tr><tr><td>score</td><td>92.5</td></tr></tbody></table><h5 id="String的常见命令"><a href="#String的常见命令" class="headerlink" title="String的常见命令"></a>String的常见命令</h5><ul><li><code>SET</code>：添加或者修改已经存在的一个<code>String</code>类型的键值对。</li><li><code>GET</code>：根据<code>key</code>获取<code>String</code>类型的<code>value</code>。</li><li><code>MSET</code>：批量添加多个<code>String</code>类型的键值对。</li><li><code>MGET</code>：根据多个<code>key</code>获取多个<code>String</code>类型的<code>value</code>。</li><li><code>INCR</code>：让一个整型的<code>key</code>自增1。</li><li><code>INCRBY</code>：让一个整型的<code>key</code>自增并指定步长，例如：<code>incrby num 2</code>让<code>num</code>值自增2。</li><li><code>INCRBYFLOAT</code>：让一个浮点类型的数字自增并指定步长。</li><li><code>SETNX</code>：添加一个<code>String</code>类型的键值对，前提是这个<code>key</code>不存在，否则不执行。</li><li><code>SETEX</code>：添加一个<code>String</code>类型的键值对，并且指定有效期。</li></ul><h5 id="key的结构"><a href="#key的结构" class="headerlink" title="key的结构"></a>key的结构</h5><p><code>Redis</code>的<code>key</code>允许有多个单词形成层级结构，多个单词之间用<code>:</code>隔开，格式如下：<code>项目名:业务名:类型:id</code>。这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫<code>heima</code>，有<code>user</code>和<code>product</code>两种不同类型的数据，我们可以这样定义<code>key</code>：</p><ul><li><code>user</code>相关的<code>key</code>：<code>heima:user:1</code></li><li><code>product</code>相关的<code>key</code>：<code>heima:product:1</code></li></ul><p>如果<code>Value</code>是一个<code>Java</code>对象，例如一个<code>User</code>对象，则可以将对象序列化为<code>JSON</code>字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><h4 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h4><p><code>Hash</code>类型，也叫散列，其<code>value</code>是一个无序字典，类似于<code>Java</code>中的<code>HashMap</code>结构。</p><p><code>String</code>结构是将对象序列化为<code>JSON</code>字符串后存储，当需要修改对象某个字段时很不方便：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{name:”Jack”, age:21}</td></tr><tr><td>heima:user:2</td><td>{name:”Rose”, age:18}</td></tr></tbody></table><p><code>Hash</code>结构可以将对象中的每个字段独立存储，可以针对单个字段做<code>CRUD</code>：</p><table>    <tr>        <td rowspan="2">KEY</td>         <td colspan="2">VALUE</td>   </tr>    <tr>           <td>field</td>         <td>value</td>       </tr>    <tr>        <td rowspan="2">heima:user:1</td>        <td>name</td>        <td>jack</td>       </tr>    <tr>        <td>age</td>        <td>21</td>       </tr>        <tr>        <td rowspan="2">heima:user:2</td>        <td>name</td>        <td>rose</td>       </tr>    <tr>        <td>age</td>        <td>18</td>       </tr></table><h5 id="Hash的常见命令"><a href="#Hash的常见命令" class="headerlink" title="Hash的常见命令"></a>Hash的常见命令</h5><ul><li><code>HSET key field value</code>：添加或者修改<code>hash</code>类型<code>key</code>的<code>field</code>的值。</li><li><code>HGET key field</code>：获取一个<code>hash</code>类型<code>key</code>的<code>field</code>的值。</li><li><code>HMSET</code>：批量添加多个<code>hash</code>类型<code>key</code>的<code>field</code>的值。</li><li><code>HMGET</code>：批量获取多个<code>hash</code>类型<code>key</code>的<code>field</code>的值。</li><li><code>HGETALL</code>：获取一个<code>hash</code>类型的<code>key</code>中的所有的<code>field</code>和<code>value</code>。</li><li><code>HKEYS</code>：获取一个<code>hash</code>类型的<code>key</code>中的所有的<code>field</code>。</li><li><code>HVALS</code>：获取一个<code>hash</code>类型的<code>key</code>中的所有的<code>value</code>。</li><li><code>HINCRBY</code>：让一个<code>hash</code>类型<code>key</code>的字段值自增并指定步长。</li><li><code>HSETNX</code>：添加一个<code>hash</code>类型的<code>key</code>的<code>field</code>值，前提是这个<code>field</code>不存在，否则不执行。</li></ul><h4 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h4><p><code>Redis</code>中的<code>List</code>类型与<code>Java</code>中的<code>LinkedList</code>类似，可以看做是一个<strong>双向链表</strong>结构。既可以支持<strong>正向检索</strong>和也可以支持<strong>反向检索</strong>。</p><p>特征也与<code>LinkedList</code>类似：</p><ul><li>有序。</li><li>元素可以重复。</li><li>插入和删除快。</li><li>查询速度一般。</li></ul><p>常用来存储一个有序数据，例如：<strong>朋友圈点赞列表</strong>，<strong>评论列表</strong>等。</p><h5 id="List的常见命令"><a href="#List的常见命令" class="headerlink" title="List的常见命令"></a>List的常见命令</h5><ul><li><code>LPUSH key  element ... </code>：向列表左侧插入一个或多个元素。</li><li><code>LPOP key</code>：移除并返回列表左侧的第一个元素，没有则返回<code>nil</code>。</li><li><code>RPUSH key  element ... </code>：向列表右侧插入一个或多个元素。</li><li><code>RPOP key</code>：移除并返回列表右侧的第一个元素。</li><li><code>LRANGE key star end</code>：返回一段角标范围内的所有元素。</li><li><code>BLPOP</code>和<code>BRPOP</code>：与<code>LPOP</code>和<code>RPOP</code>类似，只不过在没有元素时等待指定时间，而不是直接返回<code>nil</code>。</li></ul><ol><li>利用<code>List</code>结构模拟一个栈：入口和出口在同一边。</li><li>利用<code>List</code>结构模拟一个队列：入口和出口在不同边。</li><li>利用<code>List</code>结构模拟一个阻塞队列：入口和出口在不同边，出队时采用<code>BLPOP</code>或<code>BRPOP</code>。</li></ol><h4 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h4><p><code>Redis</code>的<code>Set</code>结构与<code>Java</code>中的<code>HashSet</code>类似，可以看做是一个<code>value</code>为<code>null</code>的<code>HashMap</code>。因为也是一个<code>hash</code>表，因此具备与<code>HashSet</code>类似的特征：</p><ul><li>无序。</li><li>元素不可重复。</li><li>查找快。</li><li>支持交集、并集、差集等功能。</li></ul><h5 id="Set的常见命令"><a href="#Set的常见命令" class="headerlink" title="Set的常见命令"></a>Set的常见命令</h5><ul><li><code>SADD key member ... </code>：向<code>set</code>中添加一个或多个元素。</li><li><code>SREM key member ...</code> : 移除<code>set</code>中的指定元素。</li><li><code>SCARD key</code>： 返回<code>set</code>中元素的个数。</li><li><code>SISMEMBER key member</code>：判断一个元素是否存在于<code>set</code>中。</li><li><code>SMEMBERS</code>：获取<code>set</code>中的所有元素。</li><li><code>SINTER key1 key2 ...</code>：求<code>key1</code>与<code>key2</code>的交集。</li><li><code>SDIFF key1 key2 ...</code>：求<code>key1</code>与<code>key2</code>的差集。</li><li><code>SUNION key1 key2 ...</code>：求<code>key1</code>和<code>key2</code>的并集。</li></ul><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>将下列数据用<code>Redis</code>的<code>Set</code>集合来存储：</p><ul><li>张三的好友有：李四、王五、赵六</li><li>李四的好友有：王五、麻子、二狗</li></ul><p>利用Set的命令实现下列功能：</p><ul><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Redis">127.0.0.1:6379&gt; sadd zs lisi wangwu zhaoliu<br>(integer) 3<br>127.0.0.1:6379&gt; sadd ls wangwu mazi ergou<br>(integer) 3<br>127.0.0.1:6379&gt; scard zs<br>(integer) 3<br>127.0.0.1:6379&gt; sinter zs ls<br>1) &quot;wangwu&quot;<br>127.0.0.1:6379&gt; sdiff zs ls<br>1) &quot;lisi&quot;<br>2) &quot;zhaoliu&quot;<br>127.0.0.1:6379&gt; sunion zs ls<br>1) &quot;wangwu&quot;<br>2) &quot;ergou&quot;<br>3) &quot;zhaoliu&quot;<br>4) &quot;lisi&quot;<br>5) &quot;mazi&quot;<br>127.0.0.1:6379&gt; sismember zs lisi<br>(integer) 1<br>127.0.0.1:6379&gt; sismember ls zhangsan<br>(integer) 0<br>127.0.0.1:6379&gt; srem zs lisi<br>(integer) 1<br>127.0.0.1:6379&gt; smembers zs<br>1) &quot;zhaoliu&quot;<br>2) &quot;wangwu&quot;<br></code></pre></td></tr></table></figure><h4 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h4><p><code>Redis</code>的<code>SortedSet</code>是一个可排序的<code>set</code>集合，与<code>Java</code>中的<code>TreeSet</code>有些类似，但底层数据结构却差别很大。<code>SortedSet</code>中的每一个元素都带有一个<code>score</code>属性，可以基于<code>score</code>属性对元素排序，<strong>底层的实现是一个跳表（SkipList）加hash表</strong>。</p><p><code>SortedSet</code>具备下列特性：</p><ul><li>可排序。</li><li>元素不重复。</li><li>查询速度快。</li></ul><p>因为<code>SortedSet</code>的可排序特性，经常被用来实现<strong>排行榜</strong>这样的功能。</p><h5 id="SortedSet的常见命令"><a href="#SortedSet的常见命令" class="headerlink" title="SortedSet的常见命令"></a>SortedSet的常见命令</h5><ul><li><code>ZADD key score member</code>：添加一个或多个元素到<code>sorted set</code>，如果已经存在则更新其<code>score</code>值。</li><li><code>ZREM key member</code>：删除<code>sorted set</code>中的一个指定元素。</li><li><code>ZSCORE key member </code>: 获取<code>sorted set</code>中的指定元素的<code>score</code>值。</li><li><code>ZRANK key member</code>：获取<code>sorted set</code>中的指定元素的排名。</li><li><code>ZCARD key</code>：获取<code>sorted set</code>中的元素个数。</li><li><code>ZCOUNT key min max</code>：统计<code>score</code>值在给定范围内的所有元素的个数。</li><li><code>ZINCRBY key increment member</code>：让<code>sorted set</code>中的指定元素自增，步长为指定的<code>increment</code>值。</li><li><code>ZRANGE key min max</code>：按照<code>score</code>排序后，获取指定排名范围内的元素。</li><li><code>ZRANGEBYSCORE key min max</code>：按照<code>score</code>排序后，获取指定<code>score</code>范围内的元素。</li><li><code>ZDIFF、ZINTER、ZUNION</code>：求差集、交集、并集。</li></ul><p>注意：所有的排名默认都是<strong>升序</strong>，<strong>序号从0开始</strong>，如果要降序则在命令的<code>Z</code>后面添加<code>REV</code>即可。</p><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p>将班级的下列学生得分存入<code>Redis</code>的<code>SortedSet</code>中：</p><p><code>Jack 85, Lucy 89, Rose 82, Tom 95, Jerry 78, Amy 92, Miles 76</code></p><p>并实现下列功能：</p><ul><li>删除Tom同学</li><li>获取Amy同学的分数</li><li>获取Rose同学的排名</li><li>查询80分以下有几个学生</li><li>给Amy同学加2分</li><li>查出成绩前3名的同学</li><li>查出成绩80分以下的所有同学</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Redis">127.0.0.1:6379&gt; zadd stus 85 Jack 89 lucy 82 Rose 95 Tom 78 Jerry 92 Amy 76 Miles<br>(integer) 7<br>127.0.0.1:6379&gt; zrem stus Tom<br>(integer) 1<br>127.0.0.1:6379&gt; zrank stus Rose<br>(integer) 2<br>127.0.0.1:6379&gt; zrevrank stus Rose<br>(integer) 3<br>127.0.0.1:6379&gt; zcard stus<br>(integer) 6<br>127.0.0.1:6379&gt; zcount stus 0 80<br>(integer) 2<br>127.0.0.1:6379&gt; zincrby stus 2 Amy<br>&quot;94&quot;<br>127.0.0.1:6379&gt; zrange stus 0 2<br>1) &quot;Miles&quot;<br>2) &quot;Jerry&quot;<br>3) &quot;Rose&quot;<br>127.0.0.1:6379&gt; zrevrange stus 0 2<br>1) &quot;Amy&quot;<br>2) &quot;lucy&quot;<br>3) &quot;Jack&quot;<br>127.0.0.1:6379&gt; zrangebyscore stus 0 80<br>1) &quot;Miles&quot;<br>2) &quot;Jerry&quot;<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><h3 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h3><p>在<code>Redis</code>官网中提供了各种语言的客户端，地址：<a href="https://redis.io/clients">https://redis.io/clients</a></p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/Redis%E7%9A%84Java%E5%AE%A2%E6%88%B7%E7%AB%AF.png"></p><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p><code>Jedis</code>的官网地址： <a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a></p><h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><p><code>Jedis</code>使用的基本步骤：</p><p>1.引入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建<code>Jedis</code>对象，建立连接。</p><p>使用<code>Jedis</code>，方法名与<code>Redis</code>命令一致。</p><p>释放资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.heima.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//2.设置密码</span><br><span class="hljs-comment">//        jedis.auth(&quot;&quot;);//没有设置密码，所以不需要这一步</span><br>        <span class="hljs-comment">//3.选择库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//存入数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;美女&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        <span class="hljs-comment">//获取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//插入hash数据</span><br>        jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;jacketlove&quot;</span>);<br>        jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>);<br><br>        <span class="hljs-comment">//获取</span><br>        Map&lt;String, String&gt; map = jedis.hgetAll(<span class="hljs-string">&quot;user:1&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(jedis != <span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h5><p><code>Jedis</code>本身是<strong>线程不安全</strong>的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家<strong>使用Jedis连接池代替Jedis的直连方式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.heima.jedis.util;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<span class="hljs-comment">//Jedis官方提供的连接池对象</span><br><br>    <span class="hljs-keyword">static</span>&#123;<span class="hljs-comment">//初始化</span><br>        <span class="hljs-comment">//配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<span class="hljs-comment">//最大连接数</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<span class="hljs-comment">//最大空闲连接</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<span class="hljs-comment">//最小空闲连接：一段时间后一致没有连接，则空闲连接被释放直到为0</span><br>        poolConfig.setMaxWaitMillis(<span class="hljs-number">1000</span>);<span class="hljs-comment">//设置最长等待时间（ms）；没有连接时等待一段时间报错</span><br>        <span class="hljs-comment">//创建连接池对象</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<span class="hljs-comment">//拿到连接池对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//1.建立连接</span><br>    <span class="hljs-comment">//jedis = new Jedis(&quot;localhost&quot;, 6379);</span><br>    jedis = JedisConnectionFactory.getJedis();<span class="hljs-comment">//从连接池获取连接</span><br>    <span class="hljs-comment">//2.设置密码</span><br>    <span class="hljs-comment">//jedis.auth(&quot;&quot;);//没有设置密码，所以不需要这一步</span><br>    <span class="hljs-comment">//3.选择库</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h4><p><code>SpringData</code>是<code>Spring</code>中数据操作的模块，包含对各种数据库的集成，其中对<code>Redis</code>的集成模块就叫做<code>SpringDataRedis</code>，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（<code>Lettuce</code>和<code>Jedis</code>）。</li><li>提供了<code>RedisTemplate</code>统一<code>API</code>来操作<code>Redis</code>。</li><li>支持<code>Redis</code>的发布订阅模型。</li><li>支持<code>Redis</code>哨兵和<code>Redis</code>集群。</li><li>支持基于<code>Lettuce</code>的响应式编程。</li><li>支持基于<code>JDK</code>、<code>JSON</code>、字符串、<code>Spring</code>对象的数据序列化及反序列化。</li><li>支持基于<code>Redis</code>的<code>JDKCollection</code>实现。</li></ul><h5 id="SpringDataRedis快速入门"><a href="#SpringDataRedis快速入门" class="headerlink" title="SpringDataRedis快速入门"></a>SpringDataRedis快速入门</h5><p><code>SpringDataRedis</code>中提供了<code>RedisTemplate</code>工具类，其中封装了各种对<code>Redis</code>的操作。并且将不同数据类型的操作<code>API</code>封装到了不同的类型中。</p><table><thead><tr><th><strong>API</strong></th><th><strong>返回值类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>redisTemplate</strong>.opsForValue()</td><td>ValueOperations</td><td>操作String类型数据</td></tr><tr><td><strong>redisTemplate</strong>.opsForHash()</td><td>HashOperations</td><td>操作Hash类型数据</td></tr><tr><td><strong>redisTemplate</strong>.opsForList()</td><td>ListOperations</td><td>操作List类型数据</td></tr><tr><td><strong>redisTemplate</strong>.opsForSet()</td><td>SetOperations</td><td>操作Set类型数据</td></tr><tr><td><strong>redisTemplate</strong>.opsForZSet()</td><td>ZSetOperations</td><td>操作SortedSet类型数据</td></tr><tr><td><strong>redisTemplate</strong></td><td></td><td>通用的命令</td></tr></tbody></table><p><code>SpringBoot</code>已经提供了对<code>SpringDataRedis</code>的支持，使用非常简单：</p><p>1.引入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span> <span class="hljs-comment"># 最大连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span> <span class="hljs-comment"># 最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100</span> <span class="hljs-comment"># 连接等待时间</span><br></code></pre></td></tr></table></figure><p>3.注入<code>RedisTemplate</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br></code></pre></td></tr></table></figure><p>4.编写测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisDemoApplicationTests</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;surround&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="SpringDataRedis的序列化方式"><a href="#SpringDataRedis的序列化方式" class="headerlink" title="SpringDataRedis的序列化方式"></a>SpringDataRedis的序列化方式</h5><p><code>RedisTemplate</code>可以接收任意<code>Object</code>作为值写入<code>Redis</code>，只不过写入前会把<code>Object</code>序列化为字节形式，默认是采用<code>JDK</code>序列化，得到的结果是这样的：<br><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/SpringDataRedis%E7%9A%84JDK%E5%BA%8F%E5%88%97%E5%8C%96.png"></p><p>缺点：</p><ul><li>可读性差。</li><li>内存占用较大。</li></ul><p>自定义<code>RedisTemplate</code>的序列化方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.redis.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        <span class="hljs-comment">//创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//设置连接工厂</span><br>        template.setConnectionFactory(connectionFactory);<br><br>        <span class="hljs-comment">//创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br><br>        <span class="hljs-comment">//设置key的序列化：String</span><br>        template.setKeySerializer(RedisSerializer.string());<span class="hljs-comment">//RedisSerializer.string()返回StringRedisSerializer.UTF_8，是一个常量</span><br>        template.setHashKeySerializer(RedisSerializer.string());<br><br>        <span class="hljs-comment">//设置Value的序列化</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.redis.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JaVA"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisDemoApplicationTests</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;surround&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//写入数据</span><br>redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:3&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;柔姐&quot;</span>, <span class="hljs-number">21</span>));<br><span class="hljs-comment">//获取数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:3&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>【注意】需要添加<code>Jackon</code>依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--Jackson依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h5><p>尽管<code>JSON</code>的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/SpringDataRedis%E7%9A%84JSON%E5%BA%8F%E5%88%97%E5%8C%96.png"></p><p>为了在反序列化时知道对象的类型，<code>JSON</code>序列化器会将类的<code>class</code>类型写入<code>json</code>结果中，存入<code>Redis</code>，会带来<strong>额外的内存开销</strong>。</p><p>为了节省内存空间，我们并不会使用<code>JSON</code>序列化器来处理<code>value</code>，而是统一使用<code>String</code>序列化器，要求只能存储<code>String</code>类型的<code>key</code>和<code>value</code>。当需要存储<code>Java</code>对象时，手动完成对象的序列化和反序列化。</p><p><img src="/2024/12/19/Java-Redis%EF%BC%9A%E5%85%A5%E9%97%A8%E7%AF%87/StringRedisTemplate%E7%BB%9F%E4%B8%80%E4%BD%BF%E7%94%A8String%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8.png"></p><p><code>Spring</code>默认提供了一个<code>StringRedisTemplate</code>类，它的<code>key</code>和<code>value</code>的序列化方式默认就是<code>String</code>方式。省去了我们自定义<code>RedisTemplate</code>的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;surround&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<span class="hljs-comment">//SpringMVC默认使用的JSON处理工具</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><span class="hljs-comment">//创建对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;柔姐&quot;</span>, <span class="hljs-number">21</span>);<br><span class="hljs-comment">//手动序列化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user);<br><span class="hljs-comment">//写入数据</span><br>stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:4&quot;</span>, json);<br><span class="hljs-comment">//获取数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:4&quot;</span>);<br><span class="hljs-comment">//手动反序列化</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> objectMapper.readValue(jsonUser, User.class);<br>System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user1);<br>&#125;<br>    <br>    <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br>stringRedisTemplate.opsForHash().put(<span class="hljs-string">&quot;user:5&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;surround&quot;</span>);<br>stringRedisTemplate.opsForHash().put(<span class="hljs-string">&quot;user:5&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);<br><br>Map&lt;Object,Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="hljs-string">&quot;user:5&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;entries = &quot;</span> + entries);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RedisTemplate的两种序列化实践方案"><a href="#RedisTemplate的两种序列化实践方案" class="headerlink" title="RedisTemplate的两种序列化实践方案"></a>RedisTemplate的两种序列化实践方案</h5><p>方案一：</p><ul><li>自定义<code>RedisTemplate</code>。</li><li>修改<code>RedisTemplate</code>的序列化器为<code>GenericJackson2JsonRedisSerializer</code>。</li></ul><p>方案二：</p><ul><li>使用<code>StringRedisTemplate</code>。</li><li>写入<code>Redis</code>时，手动把对象序列化为<code>JSON</code>。</li><li>读取<code>Redis</code>时，手动把读取到的<code>JSON</code>反序列化为对象。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java-Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java-Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Hot 100：哈希</title>
    <link href="/2024/11/22/LeetCode-Hot-100%EF%BC%9A%E5%93%88%E5%B8%8C/"/>
    <url>/2024/11/22/LeetCode-Hot-100%EF%BC%9A%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-Hot-100"><a href="#Leetcode-Hot-100" class="headerlink" title="Leetcode Hot 100"></a>Leetcode Hot 100</h1><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p>链接：<a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,7,11,15]</span>, target = 9<br>输出：<span class="hljs-comment">[0,1]</span><br>解释：因为 nums<span class="hljs-comment">[0]</span> + nums<span class="hljs-comment">[1]</span> == 9 ，返回 <span class="hljs-comment">[0, 1]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,2,4]</span>, target = 6<br>输出：<span class="hljs-comment">[1,2]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[3,3]</span>, target = 6<br>输出：<span class="hljs-comment">[0,1]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n^2)</code> 的算法吗？</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><h5 id="我的题解"><a href="#我的题解" class="headerlink" title="我的题解"></a>我的题解</h5><p>首先将数据全部存入哈希表中，哈希表的<code>key</code>是<code>nums</code>，<code>value</code>是一个数组<code>ArrayList</code>，存储相同的<code>nums</code>所在的位置，因为同一个数组可能存在于不同的位置。</p><p>在查找<code>target</code>的时候，首先遍历哈希表，每次拿到一个数k，通过<code>get</code>方法查找<code>target-k</code>，如果存在则查到到正确结果。因为有可能是相同的两个数加起来为<code>target</code>，所以需要拿到<code>ArrayList</code>的两个不同的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            ArrayList&lt;Integer&gt; arrayList = map.get(nums[i]);<br>            <span class="hljs-keyword">if</span>(arrayList == <span class="hljs-literal">null</span>)&#123;<br>                arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            &#125;<br>            arrayList.add(i);<br>            map.put(nums[i], arrayList);<br>        &#125;<br>        <span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br><br>        Set&lt;Integer&gt; mykey = map.keySet();<span class="hljs-comment">//1.键找值</span><br>        <span class="hljs-keyword">for</span> (Integer k : mykey) &#123;<br>            <span class="hljs-keyword">if</span>(map.get(target - k) != <span class="hljs-literal">null</span>)&#123;<br>                results[<span class="hljs-number">0</span>] = map.get(k).get(<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">if</span>(target - k == k)&#123;<br>                    results[<span class="hljs-number">1</span>] = map.get(k).get(<span class="hljs-number">1</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    results[<span class="hljs-number">1</span>] = map.get(target-k).get(<span class="hljs-number">0</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> results;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> results;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h5><p>使用哈希表，可以将寻找<code>target - x</code>的时间复杂度降低到从<code>O(N)</code>降低到<code>O(1)</code>。</p><p>创建一个哈希表，对于每一个<code>x</code>，首先查询哈希表中是否存在<code>target - x</code>，然后将<code>x</code>插入到哈希表中，即可保证不会让<code>x</code>和自己匹配。</p><p><strong>复杂度分析</strong></p><p>时间复杂度：<code>O(N)</code>，其中<code>N</code>是数组中的元素数量。对于每一个元素<code>x</code>，可以<code>O(1)</code>地寻找<code>target - x</code>。</p><p>空间复杂度：<code>O(N)</code>，其中<code>N</code>是数组中的元素数量。主要为哈希表的开销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(target - nums[i]))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;map.get(target - nums[i]), i&#125;;<br>            &#125;<br>            map.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h3><p>链接：<a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></p><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例 1:</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入: strs = [<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-string">&quot;tea&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;ate&quot;</span>, <span class="hljs-string">&quot;nat&quot;</span>, <span class="hljs-string">&quot;bat&quot;</span>]<br>输出: [[<span class="hljs-string">&quot;bat&quot;</span>],[<span class="hljs-string">&quot;nat&quot;</span>,<span class="hljs-string">&quot;tan&quot;</span>],[<span class="hljs-string">&quot;ate&quot;</span>,<span class="hljs-string">&quot;eat&quot;</span>,<span class="hljs-string">&quot;tea&quot;</span>]]<br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: strs = [<span class="hljs-string">&quot;&quot;</span>]<br>输出: <span class="hljs-string">[[&quot;&quot;]]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入: strs = [<span class="hljs-string">&quot;a&quot;</span>]<br>输出: <span class="hljs-string">[[&quot;a&quot;]]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 104</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅包含小写字母</li></ul><p>数据输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    String [] list = &#123;<span class="hljs-string">&quot;eat&quot;</span>, <span class="hljs-string">&quot;tea&quot;</span>, <span class="hljs-string">&quot;tan&quot;</span>, <span class="hljs-string">&quot;ate&quot;</span>, <span class="hljs-string">&quot;nat&quot;</span>, <span class="hljs-string">&quot;bat&quot;</span>&#125;;<br>    <span class="hljs-comment">//        list = new String[]&#123;&quot;&quot;&#125;;</span><br>    <span class="hljs-comment">//        list = new String[]&#123;&quot;a&quot;&#125;;</span><br>    List&lt;List&lt;String&gt;&gt; results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    results = groupAnagrams(list);<br>    System.out.println(results);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><h5 id="我的题解-1"><a href="#我的题解-1" class="headerlink" title="我的题解"></a>我的题解</h5><p>因为字母异味词的字母成分是相同的，可以重载哈希表的<code>equals</code>和<code>hashCode</code>方法，让字母异味词的<code>key</code>值的<code>equals</code>和<code>hashCode</code>返回结果相同，从而<code>put</code>的时候找到相同的位置，<code>value</code>值是一个数组，存储字母异味词的数组下标。</p><p>参考链接：</p><p>1.哈希表的存储原理。</p><p><a href="https://blog.csdn.net/qq_66468682/article/details/123100338">彻底搞懂equals以及hashCode方法（源码级分析）_equalsandhashcode-CSDN博客</a></p><p>2.<code>String</code>重写<code>hashCode</code>和<code>equals</code>方法。</p><p><a href="https://blog.csdn.net/weixin_52385232/article/details/124239499">String重写hashCode和equals方法_string重写了hashcode吗-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_42971035/article/details/113761961">一文说透String的hashCode_string hashcode-CSDN博客</a></p><p>3.<code>Java</code>将字符串中字符按从小到大排序。</p><p><a href="https://blog.51cto.com/u_16213391/10419413">java将字符串中字符按从小到大排序_mob64ca12e6b22d的技术博客_51CTO博客</a></p><p>4.<code>Java</code>初始化<code>List</code>。</p><p><a href="https://blog.csdn.net/qq_39101581/article/details/88393876">Java 中初始化 List 集合的 8 种方式!_java list初始化赋值-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        Map&lt;MyString, List&lt;Integer&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;strs.length; i++) &#123;<br>            <span class="hljs-type">MyString</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyString</span>(strs[i]);<br>            <span class="hljs-keyword">if</span>(map.get(m) != <span class="hljs-literal">null</span>) &#123;<br>                map.get(m).add(i);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                list.add(i);<br>                map.put(m, list);<br>            &#125;<br>        &#125;<br><br>        List&lt;List&lt;String&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        map.forEach((k, v) -&gt; &#123;<br>            List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            List&lt;Integer&gt; indexs = map.get(k);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;indexs.size(); i++) &#123;<br>                list.add(strs[indexs.get(i)]);<br>            &#125;<br>            result.add(list);<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyString</span>&#123;<span class="hljs-comment">//自定义MyString类，重载String类型的equals和hashCode方法</span><br>        String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyString</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-built_in">this</span>.name = name;&#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">MyString</span> <span class="hljs-variable">oString</span> <span class="hljs-operator">=</span> (MyString) o;<br>            <span class="hljs-type">char</span> [] thisName = name.toCharArray();<br>            <span class="hljs-type">char</span> [] oName = oString.name.toCharArray();<br>            Arrays.sort(thisName);<br>            Arrays.sort(oName);<br>            <span class="hljs-keyword">return</span> Arrays.equals(thisName, oName);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">char</span> [] thisName = name.toCharArray();<br>            Arrays.sort(thisName);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Arrays.toString(thisName);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> value.hashCode();<br>            <span class="hljs-keyword">return</span> h;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="官方题解-1"><a href="#官方题解-1" class="headerlink" title="官方题解"></a>官方题解</h5><p><strong>两个字符串互为字母异位词，当且仅当两个字符串包含的字母相同。</strong>同一组字母异位词中的字符串具备相同点，可以使用相同点作为一组字母异位词的标志，使用哈希表存储每一组字母异位词，哈希表的键为一组字母异位词的标志，哈希表的值为一组字母异位词列表。</p><p>遍历每个字符串，对于每个字符串，得到该字符串所在的一组字母异位词的标志，将当前字符串加入该组字母异位词的列表中。遍历全部字符串之后，哈希表中的每个键值对即为一组字母异位词。</p><p>以下的两种方法分别使用排序和计数作为哈希表的键。</p><h6 id="方法一：排序"><a href="#方法一：排序" class="headerlink" title="方法一：排序"></a>方法一：排序</h6><p>由于互为字母异位词的两个字符串包含的字母相同，因此对两个字符串分别进行排序之后得到的字符串一定是相同的，故可以将排序之后的字符串作为哈希表的键。</p><p><strong>复杂度分析</strong></p><p>时间复杂度：<code>O(nklogk)</code>，其中<code>n</code>是<code>strs</code>中的字符串的数量，<code>k</code>是<code>strs</code>中的字符串的的最大长度。需要遍历<code>n</code>个字符串，对于每个字符串，需要<code>O(klogk)</code>的时间进行排序以及<code>O(1)</code>的时间更新哈希表，因此总时间复杂度是<code>O(nklogk)</code>。</p><p>空间复杂度：<code>O(nk)</code>，其中<code>n</code>是<code>strs</code>中的字符串的数量，<code>k</code>是<code>strs</code>中的字符串的的最大长度。需要用哈希表存储全部字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        <span class="hljs-comment">// 创建一个哈希映射，键是排序后的字符串，值是所有对应的异位词</span><br>        Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();<br><br>        <span class="hljs-comment">// 遍历输入的字符串数组</span><br>        <span class="hljs-keyword">for</span> (String str : strs) &#123;<br>            <span class="hljs-comment">// 将当前字符串转换为字符数组</span><br>            <span class="hljs-type">char</span>[] array = str.toCharArray();<br>            <span class="hljs-comment">// 对字符数组进行排序</span><br>            Arrays.sort(array);<br>            <span class="hljs-comment">// 将排序后的字符数组转换回字符串，作为哈希映射的键</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(array);<br>            <span class="hljs-comment">// 从哈希映射中获取键对应的异位词列表，如果不存在则返回一个新的列表</span><br>            List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;());<br>            <span class="hljs-comment">// 将当前字符串添加到异位词列表中</span><br>            list.add(str);<br>            <span class="hljs-comment">// 将异位词列表放回哈希映射中</span><br>            map.put(key, list);<br>        &#125;<br>        <span class="hljs-comment">// 将哈希映射中的所有值（即所有的异位词列表）转换为一个列表返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());<br>    &#125;<br></code></pre></td></tr></table></figure><h6 id="方法二：计数"><a href="#方法二：计数" class="headerlink" title="方法二：计数"></a>方法二：计数</h6><p>由于互为字母异位词的两个字符串包含的字母相同，因此两个字符串中的相同字母出现的次数一定是相同的，故可以将每个字母出现的次数使用字符串表示，作为哈希表的键。</p><p>由于字符串只包含小写字母，因此对于每个字符串，可以使用长度为<code>26</code>的数组记录每个字母出现的次数。</p><p><strong>复杂度分析</strong></p><p>时间复杂度：<code>O(n(k+∣Σ∣))</code>，其中<code>n</code>是<code>strs</code>中的字符串的数量，<code>k</code>是<code>strs</code>中的字符串的的最大长度，<code>Σ</code>是字符集，在本题中字符集为所有小写字母，<code>∣Σ∣=26</code>。需要遍历<code>n</code>个字符串，对于每个字符串，需要<code>O(k)</code>的时间计算每个字母出现的次数，<code>O(∣Σ∣)</code>的时间生成哈希表的键，以及<code>O(1)</code>的时间更新哈希表，因此总时间复杂度是<code>O(n(k+∣Σ∣))</code>。</p><p>空间复杂度：<code>O(n(k+∣Σ∣))</code>，其中<code>n</code>是<code>strs</code>中的字符串的数量，<code>k</code>是<code>strs</code>中的字符串的的最大长度，<code>Σ</code>是字符集，在本题中字符集为所有小写字母，<code>∣Σ∣=26</code>。需要用哈希表存储全部字符串，而记录每个字符串中每个字母出现次数的数组需要的空间为<code>O(∣Σ∣)</code>，在渐进意义下小于<code>O(n(k+∣Σ∣))</code>，可以忽略不计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        <span class="hljs-comment">// 创建一个哈希映射，键是字符计数字符串，值是所有对应的异位词</span><br>        Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();<br><br>        <span class="hljs-comment">// 遍历输入的字符串数组</span><br>        <span class="hljs-keyword">for</span> (String str : strs) &#123;<br>            <span class="hljs-comment">// 创建一个长度为26的数组，用于记录每个字符的出现次数</span><br>            <span class="hljs-type">int</span>[] counts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">26</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> str.length();<br>            <span class="hljs-comment">// 遍历当前字符串，更新字符计数数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>                counts[str.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            &#125;<br>            <span class="hljs-comment">// 创建一个字符串缓冲区，用于构建字符计数字符串</span><br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>            <span class="hljs-comment">// 将每个出现次数大于 0 的字母和出现次数按顺序拼接成字符串，作为哈希表的键</span><br>            <span class="hljs-comment">// 遍历字符计数数组，将每个出现次数大于0的字符和出现次数按顺序拼接成字符串</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (counts[i] != <span class="hljs-number">0</span>) &#123;<br>                    sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + i));<br>                    sb.append(counts[i]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 将字符计数字符串作为哈希映射的键</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> sb.toString();<br>            <span class="hljs-comment">// 从哈希映射中获取键对应的异位词列表，如果不存在则返回一个新的列表</span><br>            List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;());<br>            <span class="hljs-comment">// 将当前字符串添加到异位词列表中</span><br>            list.add(str);<br>            <span class="hljs-comment">// 将异位词列表放回哈希映射中</span><br>            map.put(key, list);<br>        &#125;<br>        <span class="hljs-comment">// 将哈希映射中的所有值（即所有的异位词列表）转换为一个列表返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="最长连续序列"><a href="#最长连续序列" class="headerlink" title="最长连续序列"></a>最长连续序列</h3><p>链接：<a href="https://leetcode.cn/problems/longest-consecutive-sequence/">128. 最长连续序列</a></p><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[100,4,200,1,3,2]</span><br>输出：<span class="hljs-number">4</span><br>解释：最长数字连续序列是 <span class="hljs-string">[1, 2, 3, 4]</span>。它的长度为 <span class="hljs-number">4</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,3,7,2</span>,<span class="hljs-number">5,8,4,6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><h5 id="我的题解-2"><a href="#我的题解-2" class="headerlink" title="我的题解"></a>我的题解</h5><p>我的只对了<code>72/76</code>，有些样例时间超限了，时间复杂度太高了。（不一定正确）</p><p>思路：用并查集的思想。</p><p>首先用哈希表存储该数组，<code>key</code>和<code>value</code>值相同。</p><p>然后遍历哈希表，如果该数前面有相邻的数，将该数的<code>value</code>改为前一位数的<code>value</code>，代表他们属于同一个集合。如果该数后面有相邻的数，将后面数的<code>value</code>改为该数的<code>value</code>，也代表他们属于同一个集合。这样，该数和左边右边邻居都属于一个集合。</p><p>因为同一个集合的数的<code>value</code>都不一定相同，所以要将同一个集合的<code>value</code>统一。所以接着用并查集的思想遍历，将一个集合的所有<code>value</code>值统一。</p><p>最后统计<code>value</code>值最多的，即为最长的连续数字。</p><p>参考链接：</p><p>1.并查集</p><p><a href="https://zhuanlan.zhihu.com/p/93647900">算法学习笔记(1) : 并查集 - 知乎</a></p><p><a href="https://blog.csdn.net/the_zed/article/details/105126583">【算法与数据结构】—— 并查集-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>                HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<span class="hljs-comment">//哈希表存储，key和value相同，各自为一个集合</span><br>            map.put(nums[i], nums[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<span class="hljs-comment">//每个数和邻居都是一个集合</span><br>            <span class="hljs-keyword">if</span>(map.get(nums[i] - <span class="hljs-number">1</span>) != <span class="hljs-literal">null</span>)&#123;<br>                map.put(nums[i], map.get(nums[i] - <span class="hljs-number">1</span>));<br>            &#125;<br>            <span class="hljs-keyword">if</span>(map.get(nums[i] + <span class="hljs-number">1</span>) != <span class="hljs-literal">null</span>)&#123;<br>                map.put(nums[i] + <span class="hljs-number">1</span>, map.get(nums[i]));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<span class="hljs-comment">//因为同一个集合的数的value都不一定相同，所以要将同一个集合的value统一</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> nums[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> map.get(nums[i]);<br>            <span class="hljs-keyword">while</span> (k != v)&#123;<br>                k = map.get(v);<br>                v = map.get(k);<br>            &#125;<br>            map.put(nums[i], k);<br>        &#125;<br>        HashMap&lt;Integer,Integer&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.forEach((k,v) -&gt;&#123;<span class="hljs-comment">//统计每个集合的个数</span><br>            <span class="hljs-keyword">if</span>(map2.get(v) == <span class="hljs-literal">null</span>)&#123;<br>                map2.put(v,<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                map2.put(v,map2.get(v)+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map2.entrySet()) &#123;<span class="hljs-comment">//找出集合最多的即为结果。</span><br>            <span class="hljs-keyword">if</span> (entry.getValue() &gt; max) &#123;<br>                max = entry.getValue();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//map.forEach((k,v) -&gt; System.out.println(k+&quot;:&quot;+v));</span><br><br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="官方题解-2"><a href="#官方题解-2" class="headerlink" title="官方题解"></a>官方题解</h5><h6 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h6><p>我们考虑枚举数组中的每个数<code>x</code>，考虑以其为起点，不断尝试匹配<code>x+1</code>,<code>x+2</code>,<code>⋯</code>是否存在，假设最长匹配到了<code>x+y</code>，那么以<code>x</code>为起点的最长连续序列即为<code>x</code>,<code>x+1</code>,<code>x+2</code>,<code>⋯</code>,<code>x+y</code>，其长度为<code>y+1</code>，我们不断枚举并更新答案即可。</p><p>对于匹配的过程，暴力的方法是<code>O(n)</code>遍历数组去看是否存在这个数，但其实更高效的方法是用一个哈希表存储数组中的数，这样查看一个数是否存在即能优化至<code>O(1)</code>的时间复杂度。</p><p>仅仅是这样我们的算法时间复杂度最坏情况下还是会达到<code>O(n^2)</code>（即外层需要枚举<code>O(n)</code>个数，内层需要暴力匹配<code>O(n)</code>次），无法满足题目的要求。但仔细分析这个过程，我们会发现其中执行了很多不必要的枚举，如果已知有一个<code>x</code>,<code>x+1</code>,<code>x+2</code>,<code>⋯</code>,<code>x+y</code>的连续序列，而我们却重新从<code>x+1</code>，<code>x+2</code>或者是<code>x+y</code>处开始尝试匹配，那么得到的结果肯定不会优于枚举<code>x</code>为起点的答案，因此我们在外层循环的时候碰到这种情况跳过即可。</p><p>那么怎么判断是否跳过呢？由于我们要枚举的数<code>x</code>一定是在数组中不存在前驱数<code>x−1</code>的，不然按照上面的分析我们会从<code>x−1</code>开始尝试匹配，因此我们每次在哈希表中检查是否存在<code>x−1</code>即能判断是否需要跳过了。</p><p>增加了判断跳过的逻辑之后，时间复杂度是多少呢？外层循环需要<code>O(n)</code>的时间复杂度，只有当一个数是连续序列的第一个数的情况下才会进入内层循环，然后在内层循环中匹配连续序列中的数，因此数组中的每个数只会进入内层循环一次。根据上述分析可知，总时间复杂度为<code>O(n)</code>，符合题目要求。</p><p><strong>复杂度分析</strong></p><p>时间复杂度：<code>O(n)</code>，其中<code>n</code>为数组的长度。具体分析已在上面正文中给出。</p><p>空间复杂度：<code>O(n)</code>。哈希表存储数组中所有的数需要<code>O(n)</code>的空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        Set&lt;Integer&gt; num_set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            num_set.add(num);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">longestStreak</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : num_set) &#123;<br>            <span class="hljs-keyword">if</span> (!num_set.contains(num - <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">currentNum</span> <span class="hljs-operator">=</span> num;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">currentStreak</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>                <span class="hljs-keyword">while</span> (num_set.contains(currentNum + <span class="hljs-number">1</span>)) &#123;<br>                    currentNum += <span class="hljs-number">1</span>;<br>                    currentStreak += <span class="hljs-number">1</span>;<br>                &#125;<br><br>                longestStreak = Math.max(longestStreak, currentStreak);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> longestStreak;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="方法二：哈希表记录右边界"><a href="#方法二：哈希表记录右边界" class="headerlink" title="方法二：哈希表记录右边界"></a>方法二：哈希表记录右边界</h6><p>这种方法其实也是方法一的变种，用于减少遍历次数。做法是建立一个哈希表，记录每个元素<code>num</code>能够连续到达的右边界，这样在内层循环遍历到一个新元素时，无需经过多次+1「遍历+判断」才能到达右边界，直接取值即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// key表示num，value表示num最远到达的连续右边界</span><br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 初始化每个num的右边界为自己</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            map.put(num, num);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (!map.containsKey(num - <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> map.get(num);<br>                <span class="hljs-comment">// 遍历得到最远的右边界</span><br>                <span class="hljs-keyword">while</span> (map.containsKey(right + <span class="hljs-number">1</span>)) &#123;<br>                    right = map.get(right + <span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-comment">// 更新右边界</span><br>                map.put(num, right);<br>                <span class="hljs-comment">// 更新答案</span><br>                ans = Math.max(ans, right - num + <span class="hljs-number">1</span>);<br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="方法三：哈希表记录连续区间长度（动态规划）"><a href="#方法三：哈希表记录连续区间长度（动态规划）" class="headerlink" title="方法三：哈希表记录连续区间长度（动态规划）"></a>方法三：哈希表记录连续区间长度（动态规划）</h6><p>这是一种非常巧妙的做法，与方法二相同的一点是也利用了<code>Map</code>减小遍历次数。但很重要的一点不同是其<code>value</code>表示的是<code>num</code>所在的连续区间长度。举个例子，当<code>Map</code>的<code>key</code>为<code>5</code>，<code>value</code>为<code>3</code>时，这就表明当前有一个包含<code>5</code>且长度为<code>3</code>的连续区间，当然有多种可能，可以是<code>[3,5]</code>,<code>[4,6]</code>,<code>[5,7]</code>。</p><p>具体做法是：</p><p>遍历<code>nums</code>数组中的所有数字<code>num</code>，</p><p>当<code>num</code>是第一次出现时：</p><p>（1）分别获取到左相邻数字<code>num-1</code>的连续区间长度<code>left</code>和右相邻数字<code>num+1</code>的连续区间长度<code>right</code>；</p><p>（2）计算得到当前的区间长度为<code>curLen=left+right+1</code>；</p><p>（3）更新最长区间长度<code>ans</code>以及左右边界的区间长度。</p><p>在代码中的<code>left</code>和<code>right</code>能够分别代表<code>num-1</code>的左连续区间的长度和<code>num+1</code>的右连续区间长度，那么为什么<code>map</code>中的<code>value</code>能够时而表示左区间的长度，时而表示右区间的长度呢？</p><p>关键在于判断条件上：<code>if (!map.containsKey(num))</code>，这行代码表示<code>num</code>之前并未出现过。那么对于<code>key=num-1</code>来说，它的<code>value</code>表示的区间就只能是<code>[num-value,num-1]</code>，<code>num-1</code>只能是该区间的左边界值，而其它可能的连续区间都会包含<code>num</code>，不符合上述条件；同理，对于<code>key=num+1</code>来说，它的<code>value</code>表示的区间就只能是[num+1,num+value]<code>，</code>num+1&#96;只能是该区间的右边界值。</p><p>当<code>num</code>已经出现了，这两个区间就可以被联通表示为<code>[num-value1,num+value2]</code>，当前连续区间的左右边界会发生变化，变为<code>num-value1</code>和<code>num+value2</code>，因此我们需要更新这两个边界点对应的区间长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// key表示num，value表示num所在连续区间的长度</span><br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-comment">// 当map中不包含num，也就是num第一次出现</span><br>            <span class="hljs-keyword">if</span> (!map.containsKey(num)) &#123;<br>                <span class="hljs-comment">// left为num-1所在连续区间的长度，更进一步理解为：左连续区间的长度</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> map.getOrDefault(num - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>                <span class="hljs-comment">// right为num+1所在连续区间的长度，更进一步理解为：右连续区间的长度</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> map.getOrDefault(num + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>                <span class="hljs-comment">// 当前连续区间的总长度</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">curLen</span> <span class="hljs-operator">=</span> left + right + <span class="hljs-number">1</span>;<br>                ans = Math.max(ans, curLen);<br>                <span class="hljs-comment">// 将num加入map中，表示已经遍历过该值。其对应的value可以为任意值。</span><br>                map.put(num, -<span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 更新当前连续区间左边界和右边界对应的区间长度</span><br>                map.put(num - left, curLen);<br>                map.put(num + right, curLen);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="方法四：并查集"><a href="#方法四：并查集" class="headerlink" title="方法四：并查集"></a>方法四：并查集</h6><p>并查集的思路实际上与思路2有点像，也是来记录右边界的，所有在一个连续区间内的元素都会在一个连通分量中，且这些元素的根结点都为最远的右边界元素。<br>具体思路是：</p><p>遍历所有元素num，如果num+1存在，将num加入到num+1所在的连通分量中；<br>重新遍历一遍所有元素num，通过find函数找到num所在分量的根结点，也就是最远右边界，从而求得连续区间的长度。</p><p>加入了一个count哈希表，用于记录每个连通分量的节点个数，这样可在主函数一次遍历便可得到答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-comment">// 记录每个节点的父节点</span><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, Integer&gt; parent;<br>    <span class="hljs-comment">// 记录节点所在连通分量的节点个数</span><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, Integer&gt; count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        parent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 初始化父节点为自身</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            parent.put(num, num);<br>            count.put(num, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找x的父节点，实际上也就是x的最远连续右边界</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!parent.containsKey(x)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 遍历找到x的父节点</span><br>        <span class="hljs-keyword">while</span> (x != parent.get(x)) &#123;<br>            <span class="hljs-comment">// 进行路径压缩</span><br>            parent.put(x, parent.get(parent.get(x)));<br>            x = parent.get(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-comment">// 合并两个连通分量，用来将num并入到num+1的连续区间中</span><br>    <span class="hljs-comment">// 返回值为x所在连通分量的节点个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootX</span> <span class="hljs-operator">=</span> find(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootY</span> <span class="hljs-operator">=</span> find(y);<br>        <span class="hljs-keyword">if</span> (rootX == rootY) &#123;<br>            <span class="hljs-keyword">return</span> count.get(rootX);<br>        &#125;<br>        parent.put(rootX, rootY);<br>        <span class="hljs-comment">// 更新该根结点连通分量的节点个数</span><br>        count.put(rootY, count.get(rootX) + count.get(rootY));<br>        <span class="hljs-keyword">return</span> count.get(rootY);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestConsecutive</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 去除nums为空的特例</span><br>        <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">UnionFind</span> <span class="hljs-variable">uf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnionFind</span>(nums);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 一次遍历即可</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (uf.find(num + <span class="hljs-number">1</span>) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// union会返回num所在连通分量的节点个数</span><br>                ans = Math.max(ans, uf.union(num, num + <span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode Hot 100</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode Hot 100</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何优雅的访问本站</title>
    <link href="/2024/11/22/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9C%AC%E7%AB%99/"/>
    <url>/2024/11/22/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9C%AC%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h3 id="如何优雅的访问本站"><a href="#如何优雅的访问本站" class="headerlink" title="如何优雅的访问本站"></a>如何优雅的访问本站</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>因为文章太多了，全部放在首页有一些难看，所有在首页把所有文章的隐藏了。</p><h4 id="如何访问"><a href="#如何访问" class="headerlink" title="如何访问"></a>如何访问</h4><p>可以在<code>归档</code>页面看到所有的文章哦。也可以在<code>分类</code>或<code>标签</code>查看标签，找想要看的那一类，所有的都分类清楚啦。</p><p><img src="/2024/11/22/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9C%AC%E7%AB%99/%E8%AE%BF%E9%97%AE%E6%9C%AC%E7%AB%99.png"></p><p>谢谢访问本站！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：接口开发（5）</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><h3 id="图形报表"><a href="#图形报表" class="headerlink" title="图形报表"></a>图形报表</h3><h4 id="Apache-ECharts"><a href="#Apache-ECharts" class="headerlink" title="Apache ECharts"></a>Apache ECharts</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p><code>Apache ECharts</code>是一款基于<code>Javascript</code>的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。</p><p>官网地址：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p><p>效果：通过直观的图表来展示数据。</p><h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p><code>Apache Echarts</code>官方提供的快速入门：<a href="https://echarts.apache.org/handbook/zh/get-started/">https://echarts.apache.org/handbook/zh/get-started/</a></p><p>总结：使用<code>Echarts</code>，重点在于研究当前图表所需的数据格式。通常是需要后端提供符合格式要求的动态数据，然后响应给前端来展示图表。</p><p>注意：需要官网下载<code>echarts.js</code>文件，并通过<code>&lt;script src=&quot;echarts.js&quot;&gt;&lt;/script&gt;</code>引入才能使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ECharts<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 指定图表的配置项和数据</span></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;销量&#x27;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;衬衫&#x27;</span>, <span class="hljs-string">&#x27;羊毛衫&#x27;</span>, <span class="hljs-string">&#x27;雪纺衫&#x27;</span>, <span class="hljs-string">&#x27;裤子&#x27;</span>, <span class="hljs-string">&#x27;高跟鞋&#x27;</span>, <span class="hljs-string">&#x27;袜子&#x27;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">yAxis</span>: &#123;&#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">series</span>: [</span><br><span class="language-javascript">          &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;销量&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="language-javascript">      myChart.<span class="hljs-title function_">setOption</span>(option);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="营业额统计"><a href="#营业额统计" class="headerlink" title="营业额统计"></a>营业额统计</h4><h5 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>营业额指订单状态为已完成的订单金额合计。</li><li>基于可视化报表的折线图展示营业额数据，<code>X</code>轴为日期，<code>Y</code>轴为营业额。</li><li>根据时间选择区间，展示每天的营业额数据。</li></ul><h5 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E8%90%A5%E4%B8%9A%E9%A2%9D%E7%BB%9F%E8%AE%A1%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h5 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h5><p>根据接口定义设计对应的<code>VO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TurnoverReportVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//日期，以逗号分隔，例如：2022-10-01,2022-10-02,2022-10-03</span><br>    <span class="hljs-keyword">private</span> String dateList;<br>    <br>    <span class="hljs-comment">//营业额，以逗号分隔，例如：406.0,1520.0,75.0</span><br>    <span class="hljs-keyword">private</span> String turnoverList;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据接口定义创建<code>ReportController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-comment">//数据统计相关接口</span><br><span class="hljs-meta">@RestController()</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/report&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;数据统计相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReportController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ReportService reportService;<br><br>    <span class="hljs-comment">//营业额统计</span><br>    <span class="hljs-meta">@GetMapping(&quot;turnoverStatistics&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;营业额统计&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;TurnoverReportVO&gt; <span class="hljs-title function_">turnoverStatistics</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;营业额数据统计：&#123;&#125;，&#123;&#125;&quot;</span>, begin, end);<br>        <span class="hljs-keyword">return</span> Result.success(reportService.getTurnoverStatistics(begin, end));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>ReportService</code>接口，声明<code>getTurnover</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReportService</span> &#123;<br>    <span class="hljs-comment">//统计指定时间区间内的营业额数据</span><br>    TurnoverReportVO <span class="hljs-title function_">getTurnoverStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>ReportServiceImpl</code>实现类，实现<code>getTurnover</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReportServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReportService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-comment">//统计指定时间区间内的营业额数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> TurnoverReportVO <span class="hljs-title function_">getTurnoverStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span> &#123;<br>        <span class="hljs-comment">//当前集合用于存放从begin到end范围内的每天的日期</span><br>        List&lt;LocalDate&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        dateList.add(begin);<br><br><span class="hljs-comment">/*        if(begin.isAfter(end)) &#123;//我自己加的，如果begin大于end，则不合法</span><br><span class="hljs-comment">            return null;</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-keyword">while</span>(!begin.equals(end)) &#123;<br>            <span class="hljs-comment">//日期计算，计算指定日期的后一天对应的日期</span><br>            begin = begin.plusDays(<span class="hljs-number">1</span>);<br>            dateList.add(begin);<br>        &#125;<br><br>        <span class="hljs-comment">//存放每天的营业额</span><br>        List&lt;Double&gt; turnoverList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(LocalDate date : dateList) &#123;<br>            <span class="hljs-comment">//查询Date日期对应的营业额数据，营业额是指：状态为“已完成”的订单金额合计</span><br>            <span class="hljs-comment">//LocalTime.MIN是00:00，LocalTime.MAX是23:59:59.999999999</span><br>            <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MIN);<br>            <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MAX);<br><br>            <span class="hljs-comment">//select sum(amount) from orders where order_time &gt; beginTime and order_time &lt;endTime and status = 5</span><br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            map.put(<span class="hljs-string">&quot;begin&quot;</span>, beginTime);<br>            map.put(<span class="hljs-string">&quot;end&quot;</span>, endTime);<br>            map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.COMPLETED);<br>            <span class="hljs-type">Double</span> <span class="hljs-variable">turnover</span> <span class="hljs-operator">=</span> orderMapper.sumByMap(map);<span class="hljs-comment">//如果没查找到营业额数据返回null</span><br>            turnover = turnover == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : turnover;<br>            turnoverList.add(turnover);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> TurnoverReportVO.builder()<br>                .dateList(StringUtils.join(dateList, <span class="hljs-string">&quot;,&quot;</span>))<span class="hljs-comment">//用import org.apache.commons.lang3.StringUtils;包下的StringUtils</span><br>                .turnoverList(StringUtils.join(turnoverList, <span class="hljs-string">&quot;,&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>OrderMapper</code>接口声明<code>sumByMap</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据动态条件统计营业额数据</span><br>Double <span class="hljs-title function_">sumByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p>在<code>OrderMapper.xml</code>文件中编写动态<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sumByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Double&quot;</span>&gt;</span><br>    select sum(amount) from orders<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;gt;</span> #&#123;begin&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;end != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;lt;</span> #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="用户统计"><a href="#用户统计" class="headerlink" title="用户统计"></a>用户统计</h4><h5 id="产品原型-1"><a href="#产品原型-1" class="headerlink" title="产品原型"></a>产品原型</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E7%94%A8%E6%88%B7%E7%BB%9F%E8%AE%A1%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>基于可视化报表的折线图展示用户数据，<code>X</code>轴为日期，<code>Y</code>轴为用户数。</li><li>根据时间选择区间，展示每天的用户总量和新增用户量数据。</li></ul><h5 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E7%94%A8%E6%88%B7%E7%BB%9F%E8%AE%A1%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h5 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h5><p>根据用户统计接口的返回结果设计<code>VO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserReportVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//日期，以逗号分隔，例如：2022-10-01,2022-10-02,2022-10-03</span><br>    <span class="hljs-keyword">private</span> String dateList;<br><br>    <span class="hljs-comment">//用户总量，以逗号分隔，例如：200,210,220</span><br>    <span class="hljs-keyword">private</span> String totalUserList;<br><br>    <span class="hljs-comment">//新增用户，以逗号分隔，例如：20,21,10</span><br>    <span class="hljs-keyword">private</span> String newUserList;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据接口定义，在<code>ReportController</code>中创建<code>userStatistics</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//用户统计</span><br><span class="hljs-meta">@GetMapping(&quot;userStatistics&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;用户统计&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;UserReportVO&gt; <span class="hljs-title function_">userStatistics</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;用户统计数据：&#123;&#125;，&#123;&#125;&quot;</span>, begin, end);<br>    <span class="hljs-keyword">return</span> Result.success(reportService.getUserStatistics(begin, end));<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportService</code>接口中声明<code>getUserStatistics</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//统计指定时间区间内的用户数据</span><br>UserReportVO <span class="hljs-title function_">getUserStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><p>在<code>ReportServiceImpl</code>实现类中实现<code>getUserStatistics</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-comment">//统计指定时间区间内的用户数据</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserReportVO <span class="hljs-title function_">getUserStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span> &#123;<br>    <span class="hljs-comment">//存放从begin到end之间的每天对应的日期</span><br>    List&lt;LocalDate&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dateList.add(begin);<br>    <span class="hljs-keyword">while</span>(!begin.equals(end)) &#123;<br>        begin = begin.plusDays(<span class="hljs-number">1</span>);<br>        dateList.add(begin);<br>    &#125;<br><br>    <span class="hljs-comment">//存放每天的新增用户数量 select count(id) from user where create_time &lt; ? and create_time &gt; ?</span><br>    List&lt;Integer&gt; newUserList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//存放每天的总用户数量 select count(id) from user where create_time &lt; ?</span><br>    List&lt;Integer&gt; totalUserList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span>(LocalDate date : dateList) &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MIN);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MAX);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;end&quot;</span>, endTime);<br>        <span class="hljs-comment">//总用户数量</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">totalUser</span> <span class="hljs-operator">=</span> userMapper.countByMap(map);<br><br>        map.put(<span class="hljs-string">&quot;begin&quot;</span>, beginTime);<br>        <span class="hljs-comment">//新增用户数量</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">newUser</span> <span class="hljs-operator">=</span> userMapper.countByMap(map);<br><br>        totalUserList.add(totalUser);<br>        newUserList.add(newUser);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> UserReportVO.builder()<br>        .dateList(StringUtils.join(dateList, <span class="hljs-string">&quot;,&quot;</span>))<br>        .totalUserList(StringUtils.join(totalUserList, <span class="hljs-string">&quot;,&quot;</span>))<br>        .newUserList(StringUtils.join(newUserList, <span class="hljs-string">&quot;,&quot;</span>))<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportServiceImpl</code>实现类中创建私有方法<code>getUserCount</code>。（这个用不用都可以）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据时间区间统计用户数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> beginTime</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> endTime</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getUserCount</span><span class="hljs-params">(LocalDateTime beginTime, LocalDateTime endTime)</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;begin&quot;</span>,beginTime);<br>    map.put(<span class="hljs-string">&quot;end&quot;</span>, endTime);<br>    <span class="hljs-keyword">return</span> userMapper.countByMap(map);<br>&#125;<br><span class="hljs-comment">/* //如果使用该方法，可以调用这个方法统计用户数量。</span><br><span class="hljs-comment">    //新增用户数量 select count(id) from user where create_time &gt; ? and create_time &lt; ?</span><br><span class="hljs-comment">    Integer newUser = getUserCount(beginTime, endTime);</span><br><span class="hljs-comment">    //总用户数量 select count(id) from user where  create_time &lt; ?</span><br><span class="hljs-comment">    Integer totalUser = getUserCount(null, endTime);</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>在<code>UserMapper</code>接口中声明<code>countByMap</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据动态条件统计用户数量</span><br>Integer <span class="hljs-title function_">countByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p>在<code>UserMapper.xml</code>文件中编写动态<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(id) from user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;</span><br>            and create_time <span class="hljs-symbol">&amp;gt;</span> #&#123;begin&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;end != null&quot;</span>&gt;</span><br>            and create_time <span class="hljs-symbol">&amp;lt;</span> #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="订单统计"><a href="#订单统计" class="headerlink" title="订单统计"></a>订单统计</h4><h5 id="产品原型-2"><a href="#产品原型-2" class="headerlink" title="产品原型"></a>产品原型</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E8%AE%A2%E5%8D%95%E7%BB%9F%E8%AE%A1%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>有效订单指状态为 “已完成” 的订单。</li><li>基于可视化报表的折线图展示订单数据，<code>X</code>轴为日期，<code>Y</code>轴为订单数量。</li><li>根据时间选择区间，展示每天的订单总数和有效订单数。</li><li>展示所选时间区间内的有效订单数、总订单数、订单完成率，<code>订单完成率 = 有效订单数 / 总订单数 * 100%</code>。</li></ul><h5 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E8%AE%A2%E5%8D%95%E7%BB%9F%E8%AE%A1%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h5 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h5><p>根据订单统计接口的返回结果设计<code>VO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderReportVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//日期，以逗号分隔，例如：2022-10-01,2022-10-02,2022-10-03</span><br>    <span class="hljs-keyword">private</span> String dateList;<br><br>    <span class="hljs-comment">//每日订单数，以逗号分隔，例如：260,210,215</span><br>    <span class="hljs-keyword">private</span> String orderCountList;<br><br>    <span class="hljs-comment">//每日有效订单数，以逗号分隔，例如：20,21,10</span><br>    <span class="hljs-keyword">private</span> String validOrderCountList;<br><br>    <span class="hljs-comment">//订单总数</span><br>    <span class="hljs-keyword">private</span> Integer totalOrderCount;<br><br>    <span class="hljs-comment">//有效订单数</span><br>    <span class="hljs-keyword">private</span> Integer validOrderCount;<br><br>    <span class="hljs-comment">//订单完成率</span><br>    <span class="hljs-keyword">private</span> Double orderCompletionRate;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportController</code>中根据订单统计接口创建<code>orderStatistics</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//订单统计</span><br><span class="hljs-meta">@GetMapping(&quot;ordersStatistics&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;订单统计&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderReportVO&gt; <span class="hljs-title function_">ordersStatistics</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;用户统计数据：&#123;&#125;，&#123;&#125;&quot;</span>, begin, end);<br>    <span class="hljs-keyword">return</span> Result.success(reportService.getOrdersStatistics(begin, end));<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportService</code>接口中声明<code>getOrderStatistics</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//统计指定时间区间内的订单数据</span><br>OrderReportVO <span class="hljs-title function_">getOrdersStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><p>在<code>ReportServiceImpl</code>实现类中实现<code>getOrderStatistics</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//统计指定时间区间内的订单数据</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> OrderReportVO <span class="hljs-title function_">getOrdersStatistics</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span> &#123;<br>    <span class="hljs-comment">//存放从begin到end之间的每天对应的日期</span><br>    List&lt;LocalDate&gt; dateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dateList.add(begin);<br>    <span class="hljs-keyword">while</span>(!begin.equals(end)) &#123;<br>        begin = begin.plusDays(<span class="hljs-number">1</span>);<br>        dateList.add(begin);<br>    &#125;<br><br>    <span class="hljs-comment">//存放每天的订单总数</span><br>    List&lt;Integer&gt; orderCountList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;Integer&gt; validOrderCountList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//遍历dateList集合，查询每天的有效订单数和订单总数</span><br>    <span class="hljs-keyword">for</span>(LocalDate date : dateList) &#123;<br>        <span class="hljs-comment">//查询每天的订单总数 select count(id) from orders where create_time &gt; ? and create_time &lt; ?</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MIN);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(date, LocalTime.MAX);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">orderCount</span> <span class="hljs-operator">=</span> getOrderCount(beginTime, endTime, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//查询每天的有效订单数 select count(id) from orders where create_time &gt; ? and create_time &lt; ? and status = 5</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">validOrderCount</span> <span class="hljs-operator">=</span> getOrderCount(beginTime, endTime, Orders.COMPLETED);<br><br>        orderCountList.add(orderCount);<br>        validOrderCountList.add(validOrderCount);<br>    &#125;<br><br>    <span class="hljs-comment">//计算时间区间内的订单总数量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">totalOrderCount</span> <span class="hljs-operator">=</span> orderCountList.stream().reduce(Integer::sum).get();<br><br>    <span class="hljs-comment">//计算时间区间内的有效订单数量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">validOrderCount</span> <span class="hljs-operator">=</span> validOrderCountList.stream().reduce(Integer::sum).get();<br><br>    <span class="hljs-type">Double</span> <span class="hljs-variable">orderCompletionRate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>    <span class="hljs-keyword">if</span>(totalOrderCount != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//计算订单完成率</span><br>        orderCompletionRate = validOrderCount.doubleValue() / totalOrderCount;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> OrderReportVO.builder()<br>        .dateList(StringUtils.join(dateList, <span class="hljs-string">&quot;,&quot;</span>))<br>        .orderCountList(StringUtils.join(orderCountList, <span class="hljs-string">&quot;,&quot;</span>))<br>        .validOrderCountList(StringUtils.join(validOrderCountList, <span class="hljs-string">&quot;,&quot;</span>))<br>        .totalOrderCount(totalOrderCount)<br>        .validOrderCount(validOrderCount)<br>        .orderCompletionRate(orderCompletionRate)<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportServiceImpl</code>实现类中提供私有方法<code>getOrderCount</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据条件统计订单数量</span><br><span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getOrderCount</span><span class="hljs-params">(LocalDateTime begin, LocalDateTime end, Integer status)</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;begin&quot;</span>, begin);<br>    map.put(<span class="hljs-string">&quot;end&quot;</span>, end);<br>    map.put(<span class="hljs-string">&quot;status&quot;</span>, status);<br>    <span class="hljs-keyword">return</span> orderMapper.countByMap(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>OrderMapper</code>接口中声明<code>countByMap</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据动态条件统计订单数量</span><br>Integer <span class="hljs-title function_">countByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p>在<code>OrderMapper.xml</code>文件中编写动态<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(id) from orders<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;gt;</span> #&#123;begin&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;end != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;lt;</span> #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="销量排名Top10"><a href="#销量排名Top10" class="headerlink" title="销量排名Top10"></a>销量排名Top10</h4><h5 id="产品原型-3"><a href="#产品原型-3" class="headerlink" title="产品原型"></a>产品原型</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E9%94%80%E9%87%8F%E6%8E%92%E5%90%8DTop10%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>根据时间选择区间，展示销量前10的商品（包括菜品和套餐）。</li><li>基于可视化报表的柱状图降序展示商品销量。</li><li>此处的销量为商品销售的份数。</li></ul><h5 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E9%94%80%E9%87%8F%E6%8E%92%E5%90%8DTop10%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h5 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h5><p>根据销量排名接口的返回结果设计<code>VO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SalesTop10ReportVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//商品名称列表，以逗号分隔，例如：鱼香肉丝,宫保鸡丁,水煮鱼</span><br>    <span class="hljs-keyword">private</span> String nameList;<br><br>    <span class="hljs-comment">//销量列表，以逗号分隔，例如：260,215,200</span><br>    <span class="hljs-keyword">private</span> String numberList;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportController</code>中根据销量排名接口创建<code>top10</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//销售排名top10</span><br><span class="hljs-meta">@GetMapping(&quot;/top10&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;销售排名top10&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;SalesTop10ReportVO&gt; <span class="hljs-title function_">top10</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">    <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;销售排名top10：&#123;&#125;，&#123;&#125;&quot;</span>, begin, end);<br>    <span class="hljs-keyword">return</span> Result.success(reportService.getSalesTop10(begin, end));<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>ReportService</code>接口中声明<code>getSalesTop10</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//统计指定时间区间内的销量排名前10</span><br>SalesTop10ReportVO <span class="hljs-title function_">getSalesTop10</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><p>在<code>ReportServiceImpl</code>实现类中实现<code>getSalesTop10</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//统计指定时间区间内的销量排名前10</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SalesTop10ReportVO <span class="hljs-title function_">getSalesTop10</span><span class="hljs-params">(LocalDate begin, LocalDate end)</span> &#123;<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">beginTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(begin, LocalTime.MIN);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(end, LocalTime.MAX);<br><br>    List&lt;GoodsSalesDTO&gt; salesTop10 = orderMapper.getSalesTop10(beginTime, endTime);<br>    List&lt;String&gt; names = salesTop10.stream().map(GoodsSalesDTO::getName).collect(Collectors.toList());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">nameList</span> <span class="hljs-operator">=</span> StringUtils.join(names, <span class="hljs-string">&quot;,&quot;</span>);<br><br>    List&lt;Integer&gt; numbers = salesTop10.stream().map(GoodsSalesDTO::getNumber).collect(Collectors.toList());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">numberList</span> <span class="hljs-operator">=</span> StringUtils.join(numbers, <span class="hljs-string">&quot;,&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> SalesTop10ReportVO.builder()<br>        .nameList(nameList)<br>        .numberList(numberList)<br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>OrderMapper</code>接口中声明<code>getSalesTop10</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//统计指定时间区间内的销量排名前10</span><br>List&lt;GoodsSalesDTO&gt; <span class="hljs-title function_">getSalesTop10</span><span class="hljs-params">(LocalDateTime begin, LocalDateTime end)</span>;<br></code></pre></td></tr></table></figure><p>在<code>OrderMapper.xml</code>文件中编写动态<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getSalesTop10&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.dto.GoodsSalesDTO&quot;</span>&gt;</span><br>    select od.name, sum(od.number) number<br>    from order_detail od, orders o<br>    where od.order_id = o.id and o.status = 5<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null&quot;</span>&gt;</span><br>        and o.order_time <span class="hljs-symbol">&amp;gt;</span> #&#123;begin&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;end != null&quot;</span>&gt;</span><br>        and o.order_time <span class="hljs-symbol">&amp;lt;</span> #&#123;end&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    group by od.name<br>    order by number desc<br>    limit 0,10<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Excel报表"><a href="#Excel报表" class="headerlink" title="Excel报表"></a>Excel报表</h3><h4 id="工作台"><a href="#工作台" class="headerlink" title="工作台"></a>工作台</h4><h5 id="产品原型-4"><a href="#产品原型-4" class="headerlink" title="产品原型"></a>产品原型</h5><p>工作台是系统运营的数据看板，并提供快捷操作入口，可以有效提高商家的工作效率。</p><p>工作台展示的数据：</p><ul><li>今日数据</li><li>订单管理</li><li>菜品总览</li><li>套餐总览</li><li>订单信息</li></ul><p>名词解释：</p><ul><li>营业额：已完成订单的总金额。</li><li>有效订单：已完成订单的数量。</li><li>订单完成率：有效订单数 &#x2F; 总订单数 * 100%。</li><li>平均客单价：营业额 &#x2F; 有效订单数。</li><li>新增用户：新增用户的数量。</li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%B7%A5%E4%BD%9C%E5%8F%B0%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h5 id="接口设计-4"><a href="#接口设计-4" class="headerlink" title="接口设计"></a>接口设计</h5><p>1.今日数据接口。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%B7%A5%E4%BD%9C%E5%8F%B0%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BB%8A%E6%97%A5%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3%EF%BC%89.png"></p><p>2.订单管理接口。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%B7%A5%E4%BD%9C%E5%8F%B0%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3%EF%BC%89.png"></p><p>3.菜品总览接口。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%B7%A5%E4%BD%9C%E5%8F%B0%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%8F%9C%E5%93%81%E6%80%BB%E8%A7%88%E6%8E%A5%E5%8F%A3%EF%BC%89.png"></p><p>4.套餐总览接口。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%B7%A5%E4%BD%9C%E5%8F%B0%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%A5%97%E9%A4%90%E6%80%BB%E8%A7%88%E6%8E%A5%E5%8F%A3%EF%BC%89.png"></p><p>5.订单搜索（已完成）。</p><p>6.各个状态的订单数量统计（已完成）。</p><h5 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h5><p>1.<code>WorkSpaceController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-comment">//工作台</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/workspace&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;工作台相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkSpaceController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WorkspaceService workspaceService;<br><br>    <span class="hljs-comment">//工作台今日数据查询</span><br>    <span class="hljs-meta">@GetMapping(&quot;/businessData&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;工作台今日数据查询&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;BusinessDataVO&gt; <span class="hljs-title function_">businessData</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获得当天的开始时间</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> LocalDateTime.now().with(LocalTime.MIN);<br>        <span class="hljs-comment">//获得当天的结束时间</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> LocalDateTime.now().with(LocalTime.MAX);<br><br>        <span class="hljs-type">BusinessDataVO</span> <span class="hljs-variable">businessDataVO</span> <span class="hljs-operator">=</span> workspaceService.getBusinessData(begin, end);<br>        <span class="hljs-keyword">return</span> Result.success(businessDataVO);<br>    &#125;<br><br>    <span class="hljs-comment">//查询订单管理数据</span><br>    <span class="hljs-meta">@GetMapping(&quot;/overviewOrders&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询订单管理数据&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;OrderOverViewVO&gt; <span class="hljs-title function_">orderOverView</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.success(workspaceService.getOrderOverView());<br>    &#125;<br><br>    <span class="hljs-comment">//查询菜品总览</span><br>    <span class="hljs-meta">@GetMapping(&quot;/overviewDishes&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询菜品总览&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;DishOverViewVO&gt; <span class="hljs-title function_">dishOverView</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.success(workspaceService.getDishOverView());<br>    &#125;<br><br>    <span class="hljs-comment">//查询套餐总览</span><br>    <span class="hljs-meta">@GetMapping(&quot;/overviewSetmeals&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询套餐总览&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;SetmealOverViewVO&gt; <span class="hljs-title function_">setmealOverView</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Result.success(workspaceService.getSetmealOverView());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>WorkspaceService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WorkspaceService</span> &#123;<br><br>    <span class="hljs-comment">//根据时间段统计营业数据</span><br>    BusinessDataVO <span class="hljs-title function_">getBusinessData</span><span class="hljs-params">(LocalDateTime begin, LocalDateTime end)</span>;<br><br>    <span class="hljs-comment">//查询订单管理数据</span><br>    OrderOverViewVO <span class="hljs-title function_">getOrderOverView</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//查询菜品总览</span><br>    DishOverViewVO <span class="hljs-title function_">getDishOverView</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//查询套餐总览</span><br>    SetmealOverViewVO <span class="hljs-title function_">getSetmealOverView</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>WorkspaceServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkspaceServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WorkspaceService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br><br>    <span class="hljs-comment">//根据时间段统计营业数据</span><br>    <span class="hljs-keyword">public</span> BusinessDataVO <span class="hljs-title function_">getBusinessData</span><span class="hljs-params">(LocalDateTime begin, LocalDateTime end)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 营业额：当日已完成订单的总金额</span><br><span class="hljs-comment">         * 有效订单：当日已完成订单的数量</span><br><span class="hljs-comment">         * 订单完成率：有效订单数 / 总订单数</span><br><span class="hljs-comment">         * 平均客单价：营业额 / 有效订单数</span><br><span class="hljs-comment">         * 新增用户：当日新增用户的数量</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;begin&quot;</span>,begin);<br>        map.put(<span class="hljs-string">&quot;end&quot;</span>,end);<br><br>        <span class="hljs-comment">//查询总订单数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">totalOrderCount</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.COMPLETED);<br>        <span class="hljs-comment">//营业额</span><br>        <span class="hljs-type">Double</span> <span class="hljs-variable">turnover</span> <span class="hljs-operator">=</span> orderMapper.sumByMap(map);<br>        turnover = turnover == <span class="hljs-literal">null</span>? <span class="hljs-number">0.0</span> : turnover;<br><br>        <span class="hljs-comment">//有效订单数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">validOrderCount</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        <span class="hljs-type">Double</span> <span class="hljs-variable">unitPrice</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><br>        <span class="hljs-type">Double</span> <span class="hljs-variable">orderCompletionRate</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">if</span>(totalOrderCount != <span class="hljs-number">0</span> &amp;&amp; validOrderCount != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//订单完成率</span><br>            orderCompletionRate = validOrderCount.doubleValue() / totalOrderCount;<br>            <span class="hljs-comment">//平均客单价</span><br>            unitPrice = turnover / validOrderCount;<br>        &#125;<br><br>        <span class="hljs-comment">//新增用户数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">newUsers</span> <span class="hljs-operator">=</span> userMapper.countByMap(map);<br><br>        <span class="hljs-keyword">return</span> BusinessDataVO.builder()<br>                .turnover(turnover)<br>                .validOrderCount(validOrderCount)<br>                .orderCompletionRate(orderCompletionRate)<br>                .unitPrice(unitPrice)<br>                .newUsers(newUsers)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">//查询订单管理数据</span><br>    <span class="hljs-keyword">public</span> OrderOverViewVO <span class="hljs-title function_">getOrderOverView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;begin&quot;</span>, LocalDateTime.now().with(LocalTime.MIN));<br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.TO_BE_CONFIRMED);<br><br>        <span class="hljs-comment">//待接单</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">waitingOrders</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        <span class="hljs-comment">//待派送</span><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.CONFIRMED);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">deliveredOrders</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        <span class="hljs-comment">//已完成</span><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.COMPLETED);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">completedOrders</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        <span class="hljs-comment">//已取消</span><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, Orders.CANCELLED);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">cancelledOrders</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        <span class="hljs-comment">//全部订单</span><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">allOrders</span> <span class="hljs-operator">=</span> orderMapper.countByMap(map);<br><br>        <span class="hljs-keyword">return</span> OrderOverViewVO.builder()<br>                .waitingOrders(waitingOrders)<br>                .deliveredOrders(deliveredOrders)<br>                .completedOrders(completedOrders)<br>                .cancelledOrders(cancelledOrders)<br>                .allOrders(allOrders)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">//查询菜品总览</span><br>    <span class="hljs-keyword">public</span> DishOverViewVO <span class="hljs-title function_">getDishOverView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, StatusConstant.ENABLE);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sold</span> <span class="hljs-operator">=</span> dishMapper.countByMap(map);<br><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, StatusConstant.DISABLE);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">discontinued</span> <span class="hljs-operator">=</span> dishMapper.countByMap(map);<br><br>        <span class="hljs-keyword">return</span> DishOverViewVO.builder()<br>                .sold(sold)<br>                .discontinued(discontinued)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">//查询套餐总览</span><br>    <span class="hljs-keyword">public</span> SetmealOverViewVO <span class="hljs-title function_">getSetmealOverView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, StatusConstant.ENABLE);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sold</span> <span class="hljs-operator">=</span> setmealMapper.countByMap(map);<br><br>        map.put(<span class="hljs-string">&quot;status&quot;</span>, StatusConstant.DISABLE);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">discontinued</span> <span class="hljs-operator">=</span> setmealMapper.countByMap(map);<br><br>        <span class="hljs-keyword">return</span> SetmealOverViewVO.builder()<br>                .sold(sold)<br>                .discontinued(discontinued)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据条件统计菜品数量</span><br>Integer <span class="hljs-title function_">countByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>DishMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(id) from dish<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据条件统计套餐数量</span><br>Integer <span class="hljs-title function_">countByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p>7.<code>SetmealMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(id) from setmeal<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p><code>Apache POI</code>是一个处理<code>Miscrosoft Office</code>各种文件格式的开源项目。简单来说就是，我们可以使用<code>POI</code>在<code>Java</code>程序中对<code>Miscrosoft Office</code>各种文件进行读写操作。</p><p>一般情况下，<code>POI</code>都是用于操作<code>Excel</code>文件。</p><p><code>Apache POI</code>的应用场景：</p><ul><li>银行网银系统导出交易明细。</li><li>各种业务系统导出<code>Excel</code>报表。</li><li>批量导入业务数据。</li></ul><h5 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h5><p><code>Apache POI</code>的<code>maven</code>坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将数据写入<code>Excel</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.test;<br><br><span class="hljs-comment">//使用POI操作Excel文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">POITest</span> &#123;<br>    <span class="hljs-comment">//通过POI创建Excel文件并且写入文件内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//在内存中创建一个Sheet页</span><br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>        <span class="hljs-comment">//在Excel文件中创建一个sheet页</span><br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.createSheet(<span class="hljs-string">&quot;info&quot;</span>);<br>        <span class="hljs-comment">//在Sheet中创建行对象，rownum编号从0开始</span><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//创建单元格并且写入文件内容</span><br>        row.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;姓名&quot;</span>);<br>        row.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;城市&quot;</span>);<br><br>        <span class="hljs-comment">//创建一个新行</span><br>        row = sheet.createRow(<span class="hljs-number">2</span>);<br>        row.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;张三&quot;</span>);<br>        row.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;北京&quot;</span>);<br><br>        row = sheet.createRow(<span class="hljs-number">3</span>);<br>        row.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;李四&quot;</span>);<br>        row.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;深圳&quot;</span>);<br><br>        <span class="hljs-comment">//通过输出流将内存中的Excel文件写入到磁盘</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\2_learn\\Java-waimai\\code\\info.xlsx&quot;</span>));<br>        excel.write(out);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        out.close();<br>        excel.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        write();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取<code>Excel</code>文件中的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//通过POI读取Excel文件中的内容</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\2_learn\\Java-waimai\\code\\info.xlsx&quot;</span>));<br><br>    <span class="hljs-comment">//读取磁盘上已经存在的Excel文件</span><br>    <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(in);<br>    <span class="hljs-comment">//读取Excel文件中的第一个sheet页</span><br>    <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.getSheetAt(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//获取Sheet中最后一行的行号</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastRowNum</span> <span class="hljs-operator">=</span> sheet.getLastRowNum();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= lastRowNum; i++) &#123;<br>        <span class="hljs-comment">//获得某一行</span><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(i);<br>        <span class="hljs-comment">//获得单元格对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cellValue1</span> <span class="hljs-operator">=</span> row.getCell(<span class="hljs-number">1</span>).getStringCellValue();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cellValue2</span> <span class="hljs-operator">=</span> row.getCell(<span class="hljs-number">2</span>).getStringCellValue();<br>        System.out.println(cellValue1 + <span class="hljs-string">&quot; &quot;</span> + cellValue2);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭资源</span><br>    in.close();<br>    excel.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//write();</span><br>    read();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="导出运营数据Excel报表"><a href="#导出运营数据Excel报表" class="headerlink" title="导出运营数据Excel报表"></a>导出运营数据Excel报表</h4><h5 id="产品原型-5"><a href="#产品原型-5" class="headerlink" title="产品原型"></a>产品原型</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%AF%BC%E5%87%BA%E8%BF%90%E8%90%A5%E6%95%B0%E6%8D%AEExcel%E6%8A%A5%E8%A1%A8%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%881%EF%BC%89.png"></p><p>导出的<code>Excel</code>报表格式：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%AF%BC%E5%87%BA%E8%BF%90%E8%90%A5%E6%95%B0%E6%8D%AEExcel%E6%8A%A5%E8%A1%A8%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%882%EF%BC%89.png"></p><p>业务规则：</p><ul><li>导出<code>Excel</code>形式的报表文件。</li><li>导出最近30天的运营数据。</li></ul><h5 id="接口设计-5"><a href="#接口设计-5" class="headerlink" title="接口设计"></a>接口设计</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%885%EF%BC%89/%E5%AF%BC%E5%87%BA%E8%BF%90%E8%90%A5%E6%95%B0%E6%8D%AEExcel%E6%8A%A5%E8%A1%A8%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><p><strong>【注意】</strong>当前接口没有返回数据，因为报表导出功能本质上是文件下载，服务端会通过输出流将<code>Excel</code>文件下载到客户端浏览器。</p><h5 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h5><p>实现步骤：</p><ul><li>设计<code>Excel</code>模板文件。</li><li>查询近30天的运营数据。</li><li>将查询到的运营数据写入模板文件。</li><li>通过输出流将<code>Excel</code>文件下载到客户端浏览器。</li></ul><p>1.根据接口定义，在<code>ReportController</code>中创建<code>export</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//导出运营数据报表</span><br><span class="hljs-meta">@GetMapping(&quot;/export&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;导出运营数据报表&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">export</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>    <span class="hljs-comment">//通过HttpServletResponse获得输出流对象，将文件下载到客户端浏览器</span><br>    reportService.exportBusinessData(response);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>ReportService</code>接口中声明导出运营数据报表的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//导出运营数据报表</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">exportBusinessData</span><span class="hljs-params">(HttpServletResponse response)</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>ReportServiceImpl</code>实现类中实现导出运营数据报表的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WorkspaceService workspaceService;<br><br><span class="hljs-comment">//导出运营数据报表</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportBusinessData</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    <span class="hljs-comment">//1.查询数据库，获取营业数据：查询最近30天的运营数据</span><br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">dateBegin</span> <span class="hljs-operator">=</span> LocalDate.now().minusDays(<span class="hljs-number">30</span>);<br>    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">dateEnd</span> <span class="hljs-operator">=</span> LocalDate.now().minusDays(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//查询数据概览</span><br>    <span class="hljs-type">BusinessDataVO</span> <span class="hljs-variable">businessDataVO</span> <span class="hljs-operator">=</span> workspaceService.getBusinessData(<br>        LocalDateTime.of(dateBegin, LocalTime.MIN),<br>        LocalDateTime.of(dateEnd, LocalTime.MAX));<br><br>    <span class="hljs-comment">//2.通过POI将数据写入到Excel文件中</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;template/运营数据报表模板.xlsx&quot;</span>);<br><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//基于模板文件创建一个新的Excel文件</span><br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(in);<br><br>        <span class="hljs-comment">//获取表格文件的Sheet页</span><br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.getSheet(<span class="hljs-string">&quot;Sheet1&quot;</span>);<br><br>        <span class="hljs-comment">//填充数据</span><br>        sheet.getRow(<span class="hljs-number">1</span>).getCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;时间&quot;</span> + dateBegin + <span class="hljs-string">&quot;至&quot;</span> + dateEnd);<br><br>        <span class="hljs-comment">//获得第4行</span><br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(<span class="hljs-number">3</span>);<br>        row.getCell(<span class="hljs-number">2</span>).setCellValue(businessDataVO.getTurnover());<br>        row.getCell(<span class="hljs-number">4</span>).setCellValue(businessDataVO.getOrderCompletionRate());<br>        row.getCell(<span class="hljs-number">6</span>).setCellValue(businessDataVO.getNewUsers());<br><br>        <span class="hljs-comment">//获得第5行</span><br>        row = sheet.getRow(<span class="hljs-number">4</span>);<br>        row.getCell(<span class="hljs-number">2</span>).setCellValue(businessDataVO.getValidOrderCount());<br>        row.getCell(<span class="hljs-number">4</span>).setCellValue(businessDataVO.getUnitPrice());<br><br>        <span class="hljs-comment">//填充明细数据</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++)&#123;<br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dateBegin.plusDays(i);<br>            <span class="hljs-comment">//查询某一天的营业数据</span><br>            <span class="hljs-type">BusinessDataVO</span> <span class="hljs-variable">businessData</span> <span class="hljs-operator">=</span> workspaceService.getBusinessData(<br>                LocalDateTime.of(date, LocalTime.MIN),<br>                LocalDateTime.of(date, LocalTime.MAX));<br>            <span class="hljs-comment">//获得某一行</span><br>            row = sheet.getRow(<span class="hljs-number">7</span> + i);<br>            row.getCell(<span class="hljs-number">1</span>).setCellValue(date.toString());<br>            row.getCell(<span class="hljs-number">2</span>).setCellValue(businessData.getTurnover());<br>            row.getCell(<span class="hljs-number">3</span>).setCellValue(businessData.getValidOrderCount());<br>            row.getCell(<span class="hljs-number">4</span>).setCellValue(businessData.getOrderCompletionRate());<br>            row.getCell(<span class="hljs-number">5</span>).setCellValue(businessData.getUnitPrice());<br>            row.getCell(<span class="hljs-number">6</span>).setCellValue(businessData.getNewUsers());<br>        &#125;<br><br>        <span class="hljs-comment">//3.通过输出流将Excel文件下载到客户端浏览器</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        excel.write(out);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        out.close();<br>        excel.close();<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：接口开发（4）</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="用户端历史订单"><a href="#用户端历史订单" class="headerlink" title="用户端历史订单"></a>用户端历史订单</h2><h3 id="查询历史订单"><a href="#查询历史订单" class="headerlink" title="查询历史订单"></a>查询历史订单</h3><h4 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2%E5%8E%86%E5%8F%B2%E8%AE%A2%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则</p><ul><li>分页查询历史订单</li><li>可以根据订单状态查询</li><li>展示订单数据时，需要展示的数据包括：下单时间、订单状态、订单金额、订单明细（商品名称、图片）</li></ul><h4 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2%E5%8E%86%E5%8F%B2%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>user/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//历史订单查询：订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 ：</span><br><span class="hljs-meta">@GetMapping(&quot;/historyOrders&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;历史订单查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> pageSize, Integer status)</span> &#123;<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> orderService.pageQuery4User(page, pageSize, status);<br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户端订单分页查询</span><br>PageResult <span class="hljs-title function_">pageQuery4User</span><span class="hljs-params">(<span class="hljs-type">int</span> page, <span class="hljs-type">int</span> pageSize, Integer status)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户端订单分页查询</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery4User</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> pageSize, Integer status)</span> &#123;<br>    <span class="hljs-comment">// 设置分页</span><br>    PageHelper.startPage(pageNum, pageSize);<br><br>    <span class="hljs-type">OrdersPageQueryDTO</span> <span class="hljs-variable">ordersPageQueryDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrdersPageQueryDTO</span>();<br>    ordersPageQueryDTO.setUserId(BaseContext.getCurrentId());<br>    ordersPageQueryDTO.setStatus(status);<br><br>    <span class="hljs-comment">// 分页条件查询（根据UserId查询当前用户的所有订单）</span><br>    Page&lt;Orders&gt; page = orderMapper.pageQuery(ordersPageQueryDTO);<br><br>    List&lt;OrderVO&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>    <span class="hljs-comment">// 查询出订单明细，并封装入OrderVO进行响应</span><br>    <span class="hljs-keyword">if</span> (page != <span class="hljs-literal">null</span> &amp;&amp; page.getTotal() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Orders orders : page) &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> orders.getId();<span class="hljs-comment">// 订单id</span><br><br>            <span class="hljs-comment">// 查询订单明细</span><br>            List&lt;OrderDetail&gt; orderDetails = orderDetailMapper.getByOrderId(orderId);<br><br>            <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderVO</span>();<br>            BeanUtils.copyProperties(orders, orderVO);<br>            orderVO.setOrderDetailList(orderDetails);<br><br>            list.add(orderVO);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), list);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>OrderMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页条件查询并按下单时间排序</span><br>Page&lt;Orders&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>OrderMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Orders&quot;</span>&gt;</span><br>    select * from orders<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;number != null and number!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and number like concat(&#x27;%&#x27;,#&#123;number&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null and phone!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and phone like concat(&#x27;%&#x27;,#&#123;phone&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span>&gt;</span><br>            and user_id = #&#123;userId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;beginTime != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;gt;</span>= #&#123;beginTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;endTime != null&quot;</span>&gt;</span><br>            and order_time <span class="hljs-symbol">&amp;lt;</span>= #&#123;endTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by order_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.<code>OrderDetailMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据订单id查询订单明细</span><br><span class="hljs-meta">@Select(&quot;select * from order_detail where order_id = #&#123;orderId&#125;&quot;)</span><br>List&lt;OrderDetail&gt; <span class="hljs-title function_">getByOrderId</span><span class="hljs-params">(Long orderId)</span>;<br></code></pre></td></tr></table></figure><h3 id="查询订单详情"><a href="#查询订单详情" class="headerlink" title="查询订单详情"></a>查询订单详情</h3><h4 id="产品原型-1"><a href="#产品原型-1" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2%E8%AE%A2%E5%8D%95%E8%AF%A6%E6%83%85%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E6%9F%A5%E8%AF%A2%E8%AE%A2%E5%8D%95%E8%AF%A6%E6%83%85%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>user/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询订单详情</span><br><span class="hljs-meta">@GetMapping(&quot;/orderDetail/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;查询订单详情&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderVO&gt; <span class="hljs-title function_">details</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> orderService.details(id);<br>    <span class="hljs-keyword">return</span> Result.success(orderVO);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询订单详情</span><br>OrderVO <span class="hljs-title function_">details</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询订单详情</span><br><span class="hljs-keyword">public</span> OrderVO <span class="hljs-title function_">details</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 查询该订单对应的菜品/套餐明细</span><br>    List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(orders.getId());<br><br>    <span class="hljs-comment">// 将该订单及其详情封装到OrderVO并返回</span><br>    <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderVO</span>();<br>    BeanUtils.copyProperties(orders, orderVO);<br>    orderVO.setOrderDetailList(orderDetailList);<br><br>    <span class="hljs-keyword">return</span> orderVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>OrderMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询订单</span><br><span class="hljs-meta">@Select(&quot;select * from orders where id = #&#123;id&#125;&quot;)</span><br>Orders <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><h5 id="【解决配送地址为null】"><a href="#【解决配送地址为null】" class="headerlink" title="【解决配送地址为null】"></a>【解决配送地址为null】</h5><p>参考链接：</p><p><a href="https://blog.csdn.net/m0_62126710/article/details/140696158">解决黑马苍穹外卖订单详情页面缺少配送地址(address)、订单备注(remark)的问题，以及如何隐藏顾客名字和电话号码-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_60963805/article/details/137890949">苍穹外卖：解决订单没有地址(address)的问题_mars3d的getaddress方法返回未查询到相关结果!-CSDN博客</a></p><h3 id="取消订单"><a href="#取消订单" class="headerlink" title="取消订单"></a>取消订单</h3><h4 id="产品原型-2"><a href="#产品原型-2" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>待支付和待接单状态下，用户可直接取消订单</li><li>商家已接单状态下，用户取消订单需电话沟通商家</li><li>派送中状态下，用户取消订单需电话沟通商家</li><li>如果在待接单状态下取消订单，需要给用户退款</li><li>取消订单后需要将订单状态修改为“已取消”</li></ul><h4 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>user/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户取消订单</span><br><span class="hljs-meta">@PutMapping(&quot;/cancel/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;取消订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    orderService.userCancelById(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户取消订单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">userCancelById</span><span class="hljs-params">(Long id)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用户取消订单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userCancelById</span><span class="hljs-params">(Long id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 校验订单是否存在</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);<br>    &#125;<br><br>    <span class="hljs-comment">//订单状态 1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</span><br>    <span class="hljs-keyword">if</span> (ordersDB.getStatus() &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br><br>    <span class="hljs-comment">// 订单处于待接单状态下取消，需要进行退款</span><br>    <span class="hljs-keyword">if</span> (ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;<br>        <span class="hljs-comment">//调用微信支付退款接口</span><br>        weChatPayUtil.refund(<br>            ordersDB.getNumber(), <span class="hljs-comment">//商户订单号</span><br>            ordersDB.getNumber(), <span class="hljs-comment">//商户退款单号</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>),<span class="hljs-comment">//退款金额，单位 元</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>));<span class="hljs-comment">//原订单金额</span><br><br>        <span class="hljs-comment">//支付状态修改为 退款</span><br>        orders.setPayStatus(Orders.REFUND);<br>    &#125;<br><br>    <span class="hljs-comment">// 更新订单状态、取消原因、取消时间</span><br>    orders.setStatus(Orders.CANCELLED);<br>    orders.setCancelReason(<span class="hljs-string">&quot;用户取消&quot;</span>);<br>    orders.setCancelTime(LocalDateTime.now());<br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="再来一单"><a href="#再来一单" class="headerlink" title="再来一单"></a>再来一单</h3><h4 id="产品原型-3"><a href="#产品原型-3" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E5%86%8D%E6%9D%A5%E4%B8%80%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%94%A8%E6%88%B7%E5%86%8D%E6%9D%A5%E4%B8%80%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><p>业务规则：</p><ul><li>再来一单就是将原订单中的商品重新加入到购物车中</li></ul><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>user/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//再来一单</span><br><span class="hljs-meta">@PostMapping(&quot;/repetition/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;再来一单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">repetition</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    orderService.repetition(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//再来一单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">repetition</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//再来一单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">repetition</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 查询当前用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>    <span class="hljs-comment">// 根据订单id查询当前订单详情</span><br>    List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(id);<br><br>    <span class="hljs-comment">// 将订单详情对象转换为购物车对象</span><br>    List&lt;ShoppingCart&gt; shoppingCartList = orderDetailList.stream().map(x -&gt; &#123;<br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br><br>        <span class="hljs-comment">// 将原订单详情里面的菜品信息重新复制到购物车对象中</span><br>        BeanUtils.copyProperties(x, shoppingCart, <span class="hljs-string">&quot;id&quot;</span>);<br>        shoppingCart.setUserId(userId);<br>        shoppingCart.setCreateTime(LocalDateTime.now());<br><br>        <span class="hljs-keyword">return</span> shoppingCart;<br>    &#125;).collect(Collectors.toList());<br><br>    <span class="hljs-comment">// 将购物车对象批量添加到数据库</span><br>    shoppingCartMapper.insertBatch(shoppingCartList);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>ShoppingCartMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量插入购物车数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shoppingCartList</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;ShoppingCart&gt; shoppingCartList)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>ShoppingCartMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    insert into shopping_cart<br>    (name, image, user_id, dish_id, setmeal_id, dish_flavor, number, amount, create_time)<br>    values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;shoppingCartList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;sc&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        (#&#123;sc.name&#125;,#&#123;sc.image&#125;,#&#123;sc.userId&#125;,#&#123;sc.dishId&#125;,#&#123;sc.setmealId&#125;,#&#123;sc.dishFlavor&#125;,#&#123;sc.number&#125;,#&#123;sc.amount&#125;,#&#123;sc.createTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="商家端订单管理模块"><a href="#商家端订单管理模块" class="headerlink" title="商家端订单管理模块"></a>商家端订单管理模块</h2><h3 id="订单搜索"><a href="#订单搜索" class="headerlink" title="订单搜索"></a>订单搜索</h3><h4 id="产品原型-4"><a href="#产品原型-4" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E5%85%A8%E9%83%A8%E8%AE%A2%E5%8D%95%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E5%BE%85%E6%8E%A5%E5%8D%95%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E5%BE%85%E6%B4%BE%E9%80%81%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E6%B4%BE%E9%80%81%E4%B8%AD%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E5%B7%B2%E5%AE%8C%E6%88%90%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E5%B7%B2%E5%8F%96%E6%B6%88%EF%BC%89.png"></p><p>业务规则：</p><ul><li>输入订单号&#x2F;手机号进行搜索，支持模糊搜索</li><li>根据订单状态进行筛选</li><li>下单时间进行时间筛选</li><li>搜索内容为空，提示未找到相关订单</li><li>搜索结果页，展示包含搜索关键词的内容</li><li>分页展示搜索到的订单数据</li></ul><h4 id="接口设计-4"><a href="#接口设计-4" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E8%AE%A2%E5%8D%95%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><p>在<code>admin</code>包下创建<code>OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//订单管理</span><br><span class="hljs-meta">@RestController(&quot;adminOrderController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/order&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;订单管理接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-comment">//订单搜索</span><br>    <span class="hljs-meta">@GetMapping(&quot;/conditionSearch&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;订单搜索&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">conditionSearch</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span> &#123;<br>        <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> orderService.conditionSearch(ordersPageQueryDTO);<br>        <span class="hljs-keyword">return</span> Result.success(pageResult);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//条件搜索订单</span><br>PageResult <span class="hljs-title function_">conditionSearch</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//订单搜索</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">conditionSearch</span><span class="hljs-params">(OrdersPageQueryDTO ordersPageQueryDTO)</span> &#123;<br>    PageHelper.startPage(ordersPageQueryDTO.getPage(), ordersPageQueryDTO.getPageSize());<br><br>    Page&lt;Orders&gt; page = orderMapper.pageQuery(ordersPageQueryDTO);<br><br>    <span class="hljs-comment">// 部分订单状态，需要额外返回订单菜品信息，将Orders转化为OrderVO</span><br>    List&lt;OrderVO&gt; orderVOList = getOrderVOList(page);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), orderVOList);<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;OrderVO&gt; <span class="hljs-title function_">getOrderVOList</span><span class="hljs-params">(Page&lt;Orders&gt; page)</span> &#123;<br>    <span class="hljs-comment">// 需要返回订单菜品信息，自定义OrderVO响应结果</span><br>    List&lt;OrderVO&gt; orderVOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    List&lt;Orders&gt; ordersList = page.getResult();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(ordersList)) &#123;<br>        <span class="hljs-keyword">for</span> (Orders orders : ordersList) &#123;<br>            <span class="hljs-comment">// 将共同字段复制到OrderVO</span><br>            <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderVO</span>();<br>            BeanUtils.copyProperties(orders, orderVO);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">orderDishes</span> <span class="hljs-operator">=</span> getOrderDishesStr(orders);<br><br>            <span class="hljs-comment">// 将订单菜品信息封装到orderVO中，并添加到orderVOList</span><br>            orderVO.setOrderDishes(orderDishes);<br>            orderVOList.add(orderVO);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> orderVOList;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据订单id获取菜品信息字符串</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orders</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">getOrderDishesStr</span><span class="hljs-params">(Orders orders)</span> &#123;<br>    <span class="hljs-comment">// 查询订单菜品详情信息（订单中的菜品和数量）</span><br>    List&lt;OrderDetail&gt; orderDetailList = orderDetailMapper.getByOrderId(orders.getId());<br><br>    <span class="hljs-comment">// 将每一条订单菜品信息拼接为字符串（格式：宫保鸡丁*3；）</span><br>    List&lt;String&gt; orderDishList = orderDetailList.stream().map(x -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderDish</span> <span class="hljs-operator">=</span> x.getName() + <span class="hljs-string">&quot;*&quot;</span> + x.getNumber() + <span class="hljs-string">&quot;;&quot;</span>;<br>        <span class="hljs-keyword">return</span> orderDish;<br>    &#125;).collect(Collectors.toList());<br><br>    <span class="hljs-comment">// 将该订单对应的所有菜品信息拼接在一起</span><br>    <span class="hljs-keyword">return</span> String.join(<span class="hljs-string">&quot;&quot;</span>, orderDishList);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="各个状态的订单数量统计"><a href="#各个状态的订单数量统计" class="headerlink" title="各个状态的订单数量统计"></a>各个状态的订单数量统计</h3><h4 id="产品原型-5"><a href="#产品原型-5" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E5%90%84%E4%B8%AA%E7%8A%B6%E6%80%81%E7%9A%84%E8%AE%A2%E5%8D%95%E6%95%B0%E9%87%8F%E7%BB%9F%E8%AE%A1%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-5"><a href="#接口设计-5" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E5%90%84%E4%B8%AA%E7%8A%B6%E6%80%81%E7%9A%84%E8%AE%A2%E5%8D%95%E6%95%B0%E9%87%8F%E7%BB%9F%E8%AE%A1%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//各个状态的订单数量统计</span><br><span class="hljs-meta">@GetMapping(&quot;/statistics&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;各个状态的订单数量统计&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderStatisticsVO&gt; <span class="hljs-title function_">statistics</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">OrderStatisticsVO</span> <span class="hljs-variable">orderStatisticsVO</span> <span class="hljs-operator">=</span> orderService.statistics();<br>    <span class="hljs-keyword">return</span> Result.success(orderStatisticsVO);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//各个状态的订单数量统计</span><br>OrderStatisticsVO <span class="hljs-title function_">statistics</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//各个状态的订单数量统计</span><br><span class="hljs-keyword">public</span> OrderStatisticsVO <span class="hljs-title function_">statistics</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 根据状态，分别查询出待接单、待派送、派送中的订单数量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">toBeConfirmed</span> <span class="hljs-operator">=</span> orderMapper.countStatus(Orders.TO_BE_CONFIRMED);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">confirmed</span> <span class="hljs-operator">=</span> orderMapper.countStatus(Orders.CONFIRMED);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">deliveryInProgress</span> <span class="hljs-operator">=</span> orderMapper.countStatus(Orders.DELIVERY_IN_PROGRESS);<br><br>    <span class="hljs-comment">// 将查询出的数据封装到orderStatisticsVO中响应</span><br>    <span class="hljs-type">OrderStatisticsVO</span> <span class="hljs-variable">orderStatisticsVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderStatisticsVO</span>();<br>    orderStatisticsVO.setToBeConfirmed(toBeConfirmed);<br>    orderStatisticsVO.setConfirmed(confirmed);<br>    orderStatisticsVO.setDeliveryInProgress(deliveryInProgress);<br>    <span class="hljs-keyword">return</span> orderStatisticsVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>OrderMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据状态统计订单数量</span><br><span class="hljs-meta">@Select(&quot;select count(id) from orders where status = #&#123;status&#125;&quot;)</span><br>Integer <span class="hljs-title function_">countStatus</span><span class="hljs-params">(Integer status)</span>;<br></code></pre></td></tr></table></figure><h3 id="查询订单详情-1"><a href="#查询订单详情-1" class="headerlink" title="查询订单详情"></a>查询订单详情</h3><h4 id="产品原型-6"><a href="#产品原型-6" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%9F%A5%E8%AF%A2%E8%AE%A2%E5%8D%95%E8%AF%A6%E6%83%85%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>订单详情页面需要展示订单基本信息（状态、订单号、下单时间、收货人、电话、收货地址、金额等）</li><li>订单详情页面需要展示订单明细数据（商品名称、数量、单价）</li></ul><h4 id="接口设计-6"><a href="#接口设计-6" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%9F%A5%E8%AF%A2%E8%AE%A2%E5%8D%95%E8%AF%A6%E6%83%85%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><p><code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//订单详情</span><br><span class="hljs-meta">@GetMapping(&quot;/details/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;查询订单详情&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderVO&gt; <span class="hljs-title function_">details</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    <span class="hljs-type">OrderVO</span> <span class="hljs-variable">orderVO</span> <span class="hljs-operator">=</span> orderService.details(id);<br>    <span class="hljs-keyword">return</span> Result.success(orderVO);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接单"><a href="#接单" class="headerlink" title="接单"></a>接单</h3><h4 id="产品原型-7"><a href="#产品原型-7" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%8E%A5%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%881%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%8E%A5%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%882%EF%BC%89.png"></p><p>业务规则：</p><ul><li>商家接单其实就是将订单的状态修改为“已接单”</li></ul><h4 id="接口设计-7"><a href="#接口设计-7" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%8E%A5%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接单</span><br><span class="hljs-meta">@PutMapping(&quot;/confirm&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;接单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">confirm</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersConfirmDTO ordersConfirmDTO)</span> &#123;<br>    orderService.confirm(ordersConfirmDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(OrdersConfirmDTO ordersConfirmDTO)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(OrdersConfirmDTO ordersConfirmDTO)</span> &#123;<br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> Orders.builder()<br>        .id(ordersConfirmDTO.getId())<br>        .status(Orders.CONFIRMED)<br>        .build();<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拒单"><a href="#拒单" class="headerlink" title="拒单"></a>拒单</h3><h4 id="产品原型-8"><a href="#产品原型-8" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%8B%92%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%881%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%8B%92%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%882%EF%BC%89.png"></p><p>业务规则：</p><ul><li>商家拒单其实就是将订单状态修改为“已取消”</li><li>只有订单处于“待接单”状态时可以执行拒单操作</li><li>商家拒单时需要指定拒单原因</li><li>商家拒单时，如果用户已经完成了支付，需要为用户退款</li></ul><h4 id="接口设计-8"><a href="#接口设计-8" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%8B%92%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拒单</span><br><span class="hljs-meta">@PutMapping(&quot;/rejection&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;拒单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">rejection</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    orderService.rejection(ordersRejectionDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拒单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">rejection</span><span class="hljs-params">(OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拒单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rejection</span><span class="hljs-params">(OrdersRejectionDTO ordersRejectionDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(ordersRejectionDTO.getId());<br><br>    <span class="hljs-comment">// 订单只有存在且状态为2（待接单）才可以拒单</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.TO_BE_CONFIRMED)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-comment">//支付状态</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>    <span class="hljs-keyword">if</span> (payStatus == Orders.PAID) &#123;<br>        <span class="hljs-comment">//用户已支付，需要退款</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">refund</span> <span class="hljs-operator">=</span> weChatPayUtil.refund(<br>            ordersDB.getNumber(),<br>            ordersDB.getNumber(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>));<br>        log.info(<span class="hljs-string">&quot;申请退款：&#123;&#125;&quot;</span>, refund);<br>    &#125;<br><br>    <span class="hljs-comment">// 拒单需要退款，根据订单id更新订单状态、拒单原因、取消时间</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br>    orders.setStatus(Orders.CANCELLED);<br>    orders.setRejectionReason(ordersRejectionDTO.getRejectionReason());<br>    orders.setCancelTime(LocalDateTime.now());<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="取消订单-1"><a href="#取消订单-1" class="headerlink" title="取消订单"></a>取消订单</h3><h4 id="产品原型-9"><a href="#产品原型-9" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>取消订单其实就是将订单状态修改为“已取消”</li><li>商家取消订单时需要指定取消原因</li><li>商家取消订单时，如果用户已经完成了支付，需要为用户退款</li></ul><h4 id="接口设计-9"><a href="#接口设计-9" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//取消订单</span><br><span class="hljs-meta">@PutMapping(&quot;/cancel&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;取消订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    orderService.cancel(ordersCancelDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//商家取消订单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//取消订单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(OrdersCancelDTO ordersCancelDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(ordersCancelDTO.getId());<br><br>    <span class="hljs-comment">//支付状态</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">payStatus</span> <span class="hljs-operator">=</span> ordersDB.getPayStatus();<br>    <span class="hljs-keyword">if</span> (payStatus == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//用户已支付，需要退款</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">refund</span> <span class="hljs-operator">=</span> weChatPayUtil.refund(<br>            ordersDB.getNumber(),<br>            ordersDB.getNumber(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>));<br>        log.info(<span class="hljs-string">&quot;申请退款：&#123;&#125;&quot;</span>, refund);<br>    &#125;<br><br>    <span class="hljs-comment">// 管理端取消订单需要退款，根据订单id更新订单状态、取消原因、取消时间</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersCancelDTO.getId());<br>    orders.setStatus(Orders.CANCELLED);<br>    orders.setCancelReason(ordersCancelDTO.getCancelReason());<br>    orders.setCancelTime(LocalDateTime.now());<br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="派送订单"><a href="#派送订单" class="headerlink" title="派送订单"></a>派送订单</h3><h4 id="产品原型-10"><a href="#产品原型-10" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%B4%BE%E9%80%81%E8%AE%A2%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>派送订单其实就是将订单状态修改为“派送中”</li><li>只有状态为“待派送”的订单可以执行派送订单操作</li></ul><h4 id="接口设计-10"><a href="#接口设计-10" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E6%B4%BE%E9%80%81%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//派送订单</span><br><span class="hljs-meta">@PutMapping(&quot;/delivery/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;派送订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delivery</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    orderService.delivery(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//派送订单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delivery</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//派送订单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delivery</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 校验订单是否存在，并且状态为3</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.CONFIRMED)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br>    <span class="hljs-comment">// 更新订单状态,状态转为派送中</span><br>    orders.setStatus(Orders.DELIVERY_IN_PROGRESS);<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完成订单"><a href="#完成订单" class="headerlink" title="完成订单"></a>完成订单</h3><h4 id="产品原型-11"><a href="#产品原型-11" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E5%AE%8C%E6%88%90%E8%AE%A2%E5%8D%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>完成订单其实就是将订单状态修改为“已完成”</li><li>只有状态为“派送中”的订单可以执行订单完成操作</li></ul><h4 id="接口设计-11"><a href="#接口设计-11" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%95%86%E5%AE%B6%E5%AE%8C%E6%88%90%E8%AE%A2%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>admin/OrderController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//完成订单</span><br><span class="hljs-meta">@PutMapping(&quot;/complete/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;完成订单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">complete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    orderService.complete(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//完成订单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>OrderServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//完成订单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">complete</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">// 校验订单是否存在，并且状态为4</span><br>    <span class="hljs-keyword">if</span> (ordersDB == <span class="hljs-literal">null</span> || !ordersDB.getStatus().equals(Orders.DELIVERY_IN_PROGRESS)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_STATUS_ERROR);<br>    &#125;<br><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>    orders.setId(ordersDB.getId());<br>    <span class="hljs-comment">// 更新订单状态,状态转为完成</span><br>    orders.setStatus(Orders.COMPLETED);<br>    orders.setDeliveryTime(LocalDateTime.now());<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="校验收货地址是否超出配送范围"><a href="#校验收货地址是否超出配送范围" class="headerlink" title="校验收货地址是否超出配送范围"></a>校验收货地址是否超出配送范围</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>注册账号：<a href="https://passport.baidu.com/v2/?reg&tt=1671699340600&overseas=&gid=CF954C2-A3D2-417F-9FE6-B0F249ED7E33&tpl=pp&u=https://lbsyun.baidu.com/index.php?title=%E9%A6%96%E9%A1%B5">https://passport.baidu.com/v2/?reg&amp;tt=1671699340600&amp;overseas=&amp;gid=CF954C2-A3D2-417F-9FE6-B0F249ED7E33&amp;tpl=pp&amp;u=https%3A%2F%2Flbsyun.baidu.com%2Findex.php%3Ftitle%3D%E9%A6%96%E9%A1%B5</a></p><p>登录百度地图开放平台：<a href="https://lbsyun.baidu.com/">https://lbsyun.baidu.com/</a></p><p>进入控制台，创建应用，获取<code>AK</code>：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E6%8E%A5%E5%8F%A3%EF%BC%881%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E6%8E%A5%E5%8F%A3%EF%BC%882%EF%BC%89.png"></p><p>相关接口:</p><p><a href="https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding">https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding</a></p><p><a href="https://lbsyun.baidu.com/index.php?title=webapi/directionlite-v1">https://lbsyun.baidu.com/index.php?title=webapi/directionlite-v1</a></p><h4 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.<code>application.yml</code></p><p>配置外卖商家店铺地址和百度地图的<code>AK</code>：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E9%85%8D%E7%BD%AEAK.png"></p><p>2.<code>OrderServiceImpl</code></p><p>改造<code>OrderServiceImpl</code>，注入上面的配置项：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;sky.shop.address&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String shopAddress;<br><br><span class="hljs-meta">@Value(&quot;$&#123;sky.baidu.ak&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String ak;<br></code></pre></td></tr></table></figure><p>在<code>OrderServiceImpl</code>中提供校验方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//检查客户的收货地址是否超出配送范围</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkOutOfRange</span><span class="hljs-params">(String address)</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;address&quot;</span>,shopAddress);<br>    map.put(<span class="hljs-string">&quot;output&quot;</span>,<span class="hljs-string">&quot;json&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;ak&quot;</span>,ak);<br><br>    <span class="hljs-comment">//获取店铺的经纬度坐标</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopCoordinate</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(<span class="hljs-string">&quot;https://api.map.baidu.com/geocoding/v3&quot;</span>, map);<br><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(shopCoordinate);<br>    <span class="hljs-keyword">if</span>(!jsonObject.getString(<span class="hljs-string">&quot;status&quot;</span>).equals(<span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;店铺地址解析失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//数据解析</span><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> jsonObject.getJSONObject(<span class="hljs-string">&quot;result&quot;</span>).getJSONObject(<span class="hljs-string">&quot;location&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">lat</span> <span class="hljs-operator">=</span> location.getString(<span class="hljs-string">&quot;lat&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">lng</span> <span class="hljs-operator">=</span> location.getString(<span class="hljs-string">&quot;lng&quot;</span>);<br>    <span class="hljs-comment">//店铺经纬度坐标</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopLngLat</span> <span class="hljs-operator">=</span> lat + <span class="hljs-string">&quot;,&quot;</span> + lng;<br><br>    map.put(<span class="hljs-string">&quot;address&quot;</span>,address);<br>    <span class="hljs-comment">//获取用户收货地址的经纬度坐标</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">userCoordinate</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(<span class="hljs-string">&quot;https://api.map.baidu.com/geocoding/v3&quot;</span>, map);<br><br>    jsonObject = JSON.parseObject(userCoordinate);<br>    <span class="hljs-keyword">if</span>(!jsonObject.getString(<span class="hljs-string">&quot;status&quot;</span>).equals(<span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;收货地址解析失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//数据解析</span><br>    location = jsonObject.getJSONObject(<span class="hljs-string">&quot;result&quot;</span>).getJSONObject(<span class="hljs-string">&quot;location&quot;</span>);<br>    lat = location.getString(<span class="hljs-string">&quot;lat&quot;</span>);<br>    lng = location.getString(<span class="hljs-string">&quot;lng&quot;</span>);<br>    <span class="hljs-comment">//用户收货地址经纬度坐标</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">userLngLat</span> <span class="hljs-operator">=</span> lat + <span class="hljs-string">&quot;,&quot;</span> + lng;<br><br>    map.put(<span class="hljs-string">&quot;origin&quot;</span>,shopLngLat);<br>    map.put(<span class="hljs-string">&quot;destination&quot;</span>,userLngLat);<br>    map.put(<span class="hljs-string">&quot;steps_info&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br><br>    <span class="hljs-comment">//路线规划</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(<span class="hljs-string">&quot;https://api.map.baidu.com/directionlite/v1/driving&quot;</span>, map);<br><br>    jsonObject = JSON.parseObject(json);<br>    <span class="hljs-keyword">if</span>(!jsonObject.getString(<span class="hljs-string">&quot;status&quot;</span>).equals(<span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;配送路线规划失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//数据解析</span><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jsonObject.getJSONObject(<span class="hljs-string">&quot;result&quot;</span>);<br>    <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> (JSONArray) result.get(<span class="hljs-string">&quot;routes&quot;</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> (Integer) ((JSONObject) jsonArray.get(<span class="hljs-number">0</span>)).get(<span class="hljs-string">&quot;distance&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(distance &gt; <span class="hljs-number">5000</span>)&#123;<br>        <span class="hljs-comment">//配送距离超过5000米</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;超出配送范围&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>OrderServiceImpl</code>的<code>submitOrder</code>方法中调用上面的校验方法：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%B3%95.png"></p><h2 id="订单状态定时处理"><a href="#订单状态定时处理" class="headerlink" title="订单状态定时处理"></a>订单状态定时处理</h2><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>Spring Task</code>是<code>Spring</code>框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。</p><p>定位：定时任务框架。</p><p>作用：定时自动执行某段<code>Java</code>代码。</p><p>应用场景：</p><ul><li>信用卡每月还款提醒。</li><li>银行贷款每月还款提醒。</li><li>火车票售票系统处理未支付订单。</li><li>入职纪念日为用户发送通知。</li></ul><p>只要是需要定时处理的场景都可以使用<code>Spring Task</code>。</p><h4 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h4><p><code>cron</code>表达式其实就是一个字符串，通过<code>cron</code>表达式可以定义任务触发的时间。</p><p>构成规则：分为6或7个域，由空格分隔开，每个域代表一个含义。</p><p>每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%BE%E4%BE%8B.png"></p><p><code>cron</code>表达式在线生成器：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8%E7%BA%BF%E7%94%9F%E6%88%90%E5%99%A8.png"></p><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><p><code>Spring Task</code>使用步骤：</p><p>导入<code>maven</code>坐标<code>spring-context</code>（已存在）。<img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/SpringTask%E7%9A%84maven%E5%9D%90%E6%A0%87spring-context.png"></p><p>2.启动类添加注解<code>@EnableScheduling</code>开启任务调度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableScheduling</span><span class="hljs-comment">//开启任务调度</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkyApplication</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>3.自定义定时任务类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.task;<br><br><span class="hljs-comment">//自定义定时任务类</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> &#123;<br>    <span class="hljs-comment">//定时任务：每隔5秒触发一次</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeTask</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;定时任务开始执行：&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="订单状态定时处理-1"><a href="#订单状态定时处理-1" class="headerlink" title="订单状态定时处理"></a>订单状态定时处理</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户下单后可能存在的情况：</p><ul><li>下单后未支付，订单一直处于“待支付”状态。</li><li>用户收货后管理端未点击完成按钮，订单一直处于“派送中”状态。</li></ul><p>对于上面两种情况需要通过定时任务来修改订单状态，具体逻辑为：</p><ul><li>通过定时任务每分钟检查一次是否存在支付超时订单（下单后超过15分钟仍未支付则判定为支付超时订单），如果存在则修改订单状态为“已取消”。</li><li>通过定时任务每天凌晨1点检查一次是否存在“派送中”的订单，如果存在则修改订单状态为“已完成”。</li></ul><h4 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h4><p>在<code>OrderMapper</code>接口中扩展方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据订单状态和下单时间查询订单</span><br><span class="hljs-meta">@Select(&quot;select * from orders where status = #&#123;status&#125; and order_time &lt; #&#123;orderTime&#125;&quot;)</span><br>List&lt;Orders&gt; <span class="hljs-title function_">getByStatusAndOrderTimeLT</span><span class="hljs-params">(Integer status, LocalDateTime orderTime)</span>;<br></code></pre></td></tr></table></figure><p>自定义定时任务类<code>OrderTask</code>。完善定时任务类的<code>processTimeoutOrder</code>方法。完善定时任务类的<code>processDeliveryOrder</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.task;<br><br><span class="hljs-comment">//定时任务类，定时处理订单状态</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderTask</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-comment">//处理超时订单的方法</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 * * * * *&quot;)</span><span class="hljs-comment">//每分钟触发一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processTimeoutOrder</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;定时处理超时订单：&#123;&#125;&quot;</span>, LocalDateTime.now());<br><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusMinutes(-<span class="hljs-number">15</span>);<br>        <span class="hljs-comment">//处理15分钟内未支付的订单</span><br><br>        <span class="hljs-comment">//select * from orders where status = ? and order_time &lt; (当前时间-15)</span><br>        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.PENDING_PAYMENT, time);<br><br>        <span class="hljs-keyword">if</span>(ordersList != <span class="hljs-literal">null</span> &amp;&amp; ordersList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(Orders orders : ordersList)&#123;<span class="hljs-comment">//取消超时订单</span><br>                orders.setStatus(Orders.CANCELLED);<br>                orders.setCancelReason(<span class="hljs-string">&quot;订单超时，自动取消&quot;</span>);<br>                orders.setCancelTime(LocalDateTime.now());<br>                orderMapper.update(orders);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//处理一直处于派送中状态的订单</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span><span class="hljs-comment">//每天凌晨1点触发一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDeliveryOrder</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;定时处理处于派送中的订单：&#123;&#125;&quot;</span>, LocalDateTime.now());<br><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.now().plusMinutes(-<span class="hljs-number">60</span>);<br>        <span class="hljs-comment">//凌晨1点的时候处理前一个小时的订单，也就是前一天派送中的订单</span><br><br>        List&lt;Orders&gt; ordersList = orderMapper.getByStatusAndOrderTimeLT(Orders.DELIVERY_IN_PROGRESS, time);<br><br>        <span class="hljs-keyword">if</span>(ordersList != <span class="hljs-literal">null</span> &amp;&amp; ordersList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(Orders orders : ordersList)&#123;<span class="hljs-comment">//将前一天所有处于派送中的订单设置为完成</span><br>                orders.setStatus(Orders.CONFIRMED);<br>                orderMapper.update(orders);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p><code>WebSocket</code>是基于<code>TCP</code>的一种新的网络协议。它实现了浏览器与服务器全双工通信：浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接， 并进行双向数据传输。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/HTTP%E5%8D%8F%E8%AE%AE%E5%92%8CWebSocket%E5%8D%8F%E8%AE%AE%E5%AF%B9%E6%AF%94.png"></p><p><code>HTTP</code>协议和<code>WebSocket</code>协议对比：</p><ol><li><code>HTTP</code>是短连接，<code>WebSocket</code>是长连接。</li><li><code>HTTP</code>通信是单向的，基于请求响应模式。<code>WebSocket</code>支持双向通信。</li><li><code>HTTP</code>和<code>WebSocket</code>底层都是<code>TCP</code>连接。</li></ol><p><code>WebSocket</code>应用场景：</p><ul><li>视频弹幕</li><li>网页聊天</li><li>体育实况更新</li><li>股票基金报价实时更新</li></ul><p><code>WebSocket</code>缺点：</p><ul><li>服务器长期维护长连接需要一定的成本。</li><li>各个浏览器支持程度不一。</li><li><code>WebSocket</code>是长连接，受网络限制比较大，需要处理好重连。</li></ul><p>结论：<code>WebSocket</code>支持双向通信，功能看似比<code>HTTP</code>强大，但是也不可以基于<code>WebSocket</code>开发所有的业务功能。<code>WebSocket</code>并不能完全取代<code>HTTP</code>，它只适合在特定的场景下使用。</p><h4 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h4><p>实现步骤：</p><p>1.直接使用<code>websocket.html</code>页面作为<code>WebSocket</code>客户端。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send()&quot;</span>&gt;</span>发送消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;closeWebSocket()&quot;</span>&gt;</span>关闭连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> websocket = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> clientId = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;WebSocket&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//连接WebSocket节点</span></span><br><span class="language-javascript">        websocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:8080/ws/&quot;</span>+clientId);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Not support websocket&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接发生错误的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;error&quot;</span>);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接成功建立的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;连接成功&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//接收到消息的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(event.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接关闭的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;close&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onbeforeunload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//将消息显示在网页上</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-params">innerHTML</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;message&#x27;</span>).<span class="hljs-property">innerHTML</span> += innerHTML + <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//发送消息</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//关闭连接</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">closeWebSocket</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.导入<code>WebSocket</code>的<code>maven</code>坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.导入<code>WebSocket</code>服务端组件<code>WebSocketServer</code>，用于和客户端通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.websocket;<br><br><span class="hljs-comment">//WebSocket服务</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;<br><br>    <span class="hljs-comment">//存放会话对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>    <span class="hljs-comment">//连接建立成功调用的方法</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session, <span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端：&quot;</span> + sid + <span class="hljs-string">&quot;建立连接&quot;</span>);<br>        sessionMap.put(sid, session);<br>    &#125;<br><br>    <span class="hljs-comment">//收到客户端消息后调用的方法，参数：message 客户端发送过来的消息</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message, <span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;收到来自客户端：&quot;</span> + sid + <span class="hljs-string">&quot;的信息:&quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-comment">//连接关闭调用的方法</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;连接断开:&quot;</span> + sid);<br>        sessionMap.remove(sid);<br>    &#125;<br><br>    <span class="hljs-comment">//群发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToAllClient</span><span class="hljs-params">(String message)</span> &#123;<br>        Collection&lt;Session&gt; sessions = sessionMap.values();<br>        <span class="hljs-keyword">for</span> (Session session : sessions) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//服务器向客户端发送消息</span><br>                session.getBasicRemote().sendText(message);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.导入配置类<code>WebSocketConfiguration</code>，注册<code>WebSocket</code>的服务端组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-comment">//WebSocket配置类，用于注册WebSocket的Bean</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.导入定时任务类<code>WebSocketTask</code>，定时向客户端推送数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.task;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketTask</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebSocketServer webSocketServer;<br><br>    <span class="hljs-comment">//通过WebSocket每隔5秒向客户端发送消息</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageToClient</span><span class="hljs-params">()</span> &#123;<br>        webSocketServer.sendToAllClient(<span class="hljs-string">&quot;这是来自服务端的消息：&quot;</span> + DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(LocalDateTime.now()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.运行结果。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/WebSocket%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B.png"></p><h3 id="来单提醒"><a href="#来单提醒" class="headerlink" title="来单提醒"></a>来单提醒</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户下单并且支付成功后，需要第一时间通知外卖商家。通知的形式有如下两种：</p><ul><li>语音播报。</li><li>弹出提示框。</li></ul><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>1.通过<code>WebSocket</code>实现管理端页面和服务端保持长连接状态。</p><p>2.当客户支付后，调用<code>WebSocket</code>的相关<code>API</code>实现服务端向客户端推送消息。</p><p>3.客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报。</p><p>4.约定服务端发送给客户端浏览器的数据格式为<code>JSON</code>，字段包括：<code>type</code>，<code>orderId</code>，<code>content</code>。</p><ul><li><code>type</code>为消息类型：1为来单提醒，2为客户催单。</li><li><code>orderId</code>为订单<code>id</code>。</li><li><code>content</code> 为消息内容。</li></ul><h4 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h4><p>在<code>OrderServiceImpl</code>中注入<code>WebSocketServer</code>对象，修改<code>paySuccess</code>方法，加入如下代码：（这是使用了微信支付的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//通知类型 1来单提醒 2客户催单</span><br>map.put(<span class="hljs-string">&quot;orderId&quot;</span>, orders.getId());<span class="hljs-comment">//订单id</span><br>map.put(<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;订单号:&quot;</span> + outTradeNo);<br><br>webSocketServer.sendToAllClient(JSON.toJSONString(map));<br></code></pre></td></tr></table></figure><p>如果跳过微信支付，需要改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WebSocketServer webSocketServer;<br><br><span class="hljs-comment">//订单支付</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> OrderPaymentVO <span class="hljs-title function_">payment</span><span class="hljs-params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">// 当前登录用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(userId);<br><br>    <span class="hljs-comment">//调用微信支付接口，生成预支付交易单</span><br>    <span class="hljs-comment">/*JSONObject jsonObject = weChatPayUtil.pay(</span><br><span class="hljs-comment">                ordersPaymentDTO.getOrderNumber(), //商户订单号</span><br><span class="hljs-comment">                new BigDecimal(0.01), //支付金额，单位 元</span><br><span class="hljs-comment">                &quot;苍穹外卖订单&quot;, //商品描述</span><br><span class="hljs-comment">                user.getOpenid() //微信用户的openid</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        if (jsonObject.getString(&quot;code&quot;) != null &amp;&amp; jsonObject.getString(&quot;code&quot;).equals(&quot;ORDERPAID&quot;)) &#123;</span><br><span class="hljs-comment">            throw new OrderBusinessException(&quot;该订单已支付&quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    jsonObject.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;ORDERPAID&quot;</span>);<br>    <span class="hljs-type">OrderPaymentVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);<br>    vo.setPackageStr(jsonObject.getString(<span class="hljs-string">&quot;package&quot;</span>));<br><br>    <span class="hljs-comment">//为替代微信支付成功后的数据库订单状态更新，多定义一个方法进行修改</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">OrderPaidStatus</span> <span class="hljs-operator">=</span> Orders.PAID; <span class="hljs-comment">//支付状态，已支付</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">OrderStatus</span> <span class="hljs-operator">=</span> Orders.TO_BE_CONFIRMED;  <span class="hljs-comment">//订单状态，待接单</span><br><br>    <span class="hljs-comment">//发现没有将支付时间 check_out属性赋值，所以在这里更新</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">check_out_time</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br>    <span class="hljs-comment">//获取订单号码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">orderNumber</span> <span class="hljs-operator">=</span> ordersPaymentDTO.getOrderNumber();<br><br>    log.info(<span class="hljs-string">&quot;调用updateStatus，用于替换微信支付更新数据库状态的问题&quot;</span>);<br>    orderMapper.updateStatus(OrderStatus, OrderPaidStatus, check_out_time, orderNumber);<br><br>    <span class="hljs-comment">// 补充：支付成功之后进行来单提醒。</span><br>    <span class="hljs-comment">// 本来是支付成功后会调用com.sky.controller.notify下回调方法paySuccessNotify，该方法调用了paySuccess，</span><br>    <span class="hljs-comment">// 应该在com.sky.service.impl下的OrderServiceImpl的paySuccess中写，但是因为跳过了微信支付，这里直接下单成功进行来单提醒。</span><br><br>    <span class="hljs-comment">// 通过websocket向客户端浏览器推送消息 type orderId content</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> orderMapper.getByNumber(orderNumber);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;orderId&quot;</span>, orders.getId());<br>    map.put(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;订单号：&quot;</span> + orderNumber);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(map);<br>    webSocketServer.sendToAllClient(json);<br><br>    <span class="hljs-keyword">return</span> vo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>浏览器发起的请求为：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">请求 URL: ws:<span class="hljs-comment">//localhost/ws/3lkr84icci</span><br>Request <span class="hljs-keyword">Method</span>: GET<br>状态代码: <span class="hljs-number">101</span> Switching Protocols<br></code></pre></td></tr></table></figure><p>请求<code>url</code>中未指定端口，但是<code>nginx</code>中配置了反向代理指定了<code>8080</code>端口，所有能够顺利访问管理端。</p><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><h5 id="【没有语音播报】"><a href="#【没有语音播报】" class="headerlink" title="【没有语音播报】"></a>【没有语音播报】</h5><p>解决：浏览器退出登录，重新登录账号。</p><h5 id="【语音播报一直循环】"><a href="#【语音播报一直循环】" class="headerlink" title="【语音播报一直循环】"></a>【语音播报一直循环】</h5><p>解决：注释掉<code>WebSocketTask</code>中的<code>sendMessageToClient</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.task;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketTask</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebSocketServer webSocketServer;<br><br>    <span class="hljs-comment">//通过WebSocket每隔5秒向客户端发送消息</span><br><span class="hljs-comment">/*    @Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br><span class="hljs-comment">    public void sendMessageToClient() &#123;</span><br><span class="hljs-comment">        webSocketServer.sendToAllClient(&quot;这是来自服务端的消息：&quot; + DateTimeFormatter.ofPattern(&quot;HH:mm:ss&quot;).format(LocalDateTime.now()));</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//注释掉防止一直播放语音</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户催单"><a href="#客户催单" class="headerlink" title="客户催单"></a>客户催单</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户在小程序中点击催单按钮后，需要第一时间通知外卖商家。通知的形式有如下两种：</p><ul><li>语音播报。</li><li>弹出提示框。</li></ul><h4 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h4><p>1.通过<code>WebSocket</code>实现管理端页面和服务端保持长连接状态。</p><p>2.当用户点击催单按钮后，调用<code>WebSocket</code>的相关<code>API</code>实现服务端向客户端推送消息。</p><p>3.客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报。</p><p>4.约定服务端发送给客户端浏览器的数据格式为<code>JSON</code>，字段包括：<code>type</code>，<code>orderId</code>，<code>content</code>。</p><ul><li><code>type</code>为消息类型：1为来单提醒，2为客户催单。</li><li><code>orderId</code>为订单<code>id</code>。</li><li><code>content</code> 为消息内容。</li></ul><h4 id="接口设计-12"><a href="#接口设计-12" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%884%EF%BC%89/%E5%AE%A2%E6%88%B7%E5%82%AC%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据用户催单的接口定义，在<code>user/OrderController</code>中创建催单方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//客户催单</span><br><span class="hljs-meta">@GetMapping(&quot;/reminder/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;客户催单&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">reminder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    orderService.reminder(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>OrderService</code>接口中声明<code>reminder</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//客户催单</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">reminder</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>OrderServiceImpl</code>中实现<code>reminder</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//客户催单</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reminder</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">//根据id查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getById(id);<br><br>    <span class="hljs-comment">//校验订单是否存在</span><br>    <span class="hljs-keyword">if</span>(ordersDB == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(MessageConstant.ORDER_NOT_FOUND);<br>    &#125;<br><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//1表示来单提醒，2表示客户催单</span><br>    map.put(<span class="hljs-string">&quot;orderId&quot;</span>, id);<br>    map.put(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;订单号：&quot;</span> + ordersDB.getNumber());<br><br>    <span class="hljs-comment">//通过websocket向客户端浏览器推送消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(map);<br>    webSocketServer.sendToAllClient(json);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：接口开发（3）</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="地址簿"><a href="#地址簿" class="headerlink" title="地址簿"></a>地址簿</h2><h3 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h3><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务功能：</p><ol><li>查询地址列表。</li><li>新增地址。</li><li>修改地址。</li><li>删除地址。</li><li>设置默认地址。</li><li>查询默认地址。</li></ol><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>新增地址。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%96%B0%E5%A2%9E%E5%9C%B0%E5%9D%80%EF%BC%89.png"></p><p>查询当前登录用户的所有地址信息。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%9F%A5%E8%AF%A2%E5%BD%93%E5%89%8D%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E7%9A%84%E6%89%80%E6%9C%89%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%EF%BC%89.png"></p><p>查询默认地址。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%9F%A5%E8%AF%A2%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80%EF%BC%89.png"></p><p>根据<code>id</code>修改地址。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AEid%E4%BF%AE%E6%94%B9%E5%9C%B0%E5%9D%80%EF%BC%89.png"></p><p>根据<code>id</code>删除地址。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AEid%E5%88%A0%E9%99%A4%E5%9C%B0%E5%9D%80%EF%BC%89.png"></p><p>根据<code>id</code>查询地址。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AEid%E6%9F%A5%E8%AF%A2%E5%9C%B0%E5%9D%80%EF%BC%89.png"></p><p>设置默认地址。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%9C%B0%E5%9D%80%E7%B0%BF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80%EF%BC%89.png"></p><h3 id="数据库设计（address-book表）"><a href="#数据库设计（address-book表）" class="headerlink" title="数据库设计（address_book表）"></a>数据库设计（address_book表）</h3><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>user_id</td><td>bigint</td><td>用户id</td><td>逻辑外键</td></tr><tr><td>consignee</td><td>varchar(50)</td><td>收货人</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>province_code</td><td>varchar(12)</td><td>省份编码</td><td></td></tr><tr><td>province_name</td><td>varchar(32)</td><td>省份名称</td><td></td></tr><tr><td>city_code</td><td>varchar(12)</td><td>城市编码</td><td></td></tr><tr><td>city_name</td><td>varchar(32)</td><td>城市名称</td><td></td></tr><tr><td>district_code</td><td>varchar(12)</td><td>区县编码</td><td></td></tr><tr><td>district_name</td><td>varchar(32)</td><td>区县名称</td><td></td></tr><tr><td>detail</td><td>varchar(200)</td><td>详细地址信息</td><td>具体到门牌号</td></tr><tr><td>label</td><td>varchar(100)</td><td>标签</td><td>公司、家、学校</td></tr><tr><td>is_default</td><td>tinyint(1)</td><td>是否默认地址</td><td>1是 0否</td></tr></tbody></table><h3 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h3><p>1.<code>AddressBookController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/addressBook&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端地址簿接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressBookController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressBookService addressBookService;<br><br>    <span class="hljs-comment">//查询当前登录用户的所有地址信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询当前登录用户的所有地址信息&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;AddressBook&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressBook</span>();<br>        addressBook.setUserId(BaseContext.getCurrentId());<br>        List&lt;AddressBook&gt; list = addressBookService.list(addressBook);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br><br>    <span class="hljs-comment">//新增地址</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增地址&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AddressBook addressBook)</span> &#123;<br>        addressBookService.save(addressBook);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id查询地址&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;AddressBook&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>        <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> addressBookService.getById(id);<br>        <span class="hljs-keyword">return</span> Result.success(addressBook);<br>    &#125;<br><br>    <span class="hljs-comment">//根据id修改地址</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id修改地址&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AddressBook addressBook)</span> &#123;<br>        addressBookService.update(addressBook);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//设置默认地址</span><br>    <span class="hljs-meta">@PutMapping(&quot;/default&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;设置默认地址&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">setDefault</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AddressBook addressBook)</span> &#123;<br>        addressBookService.setDefault(addressBook);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//根据id删除地址</span><br>    <span class="hljs-meta">@DeleteMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据id删除地址&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span> &#123;<br>        addressBookService.deleteById(id);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//查询默认地址</span><br>    <span class="hljs-meta">@GetMapping(&quot;default&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询默认地址&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;AddressBook&gt; <span class="hljs-title function_">getDefault</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span><br>        <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressBook</span>();<br>        addressBook.setIsDefault(<span class="hljs-number">1</span>);<br>        addressBook.setUserId(BaseContext.getCurrentId());<br>        List&lt;AddressBook&gt; list = addressBookService.list(addressBook);<br><br>        <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">null</span> &amp;&amp; list.size() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.success(list.get(<span class="hljs-number">0</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;没有查询到默认地址&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>AddressBookService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddressBookService</span> &#123;<br><br>    List&lt;AddressBook&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    AddressBook <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>AddressBookServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressBookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AddressBookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressBookMapper addressBookMapper;<br><br>    <span class="hljs-comment">//条件查询</span><br>    <span class="hljs-keyword">public</span> List&lt;AddressBook&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(AddressBook addressBook)</span> &#123;<br>        <span class="hljs-keyword">return</span> addressBookMapper.list(addressBook);<br>    &#125;<br><br>    <span class="hljs-comment">//新增地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(AddressBook addressBook)</span> &#123;<br>        addressBook.setUserId(BaseContext.getCurrentId());<br>        addressBook.setIsDefault(<span class="hljs-number">0</span>);<br>        addressBookMapper.insert(addressBook);<br>    &#125;<br><br>    <span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-keyword">public</span> AddressBook <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> addressBookMapper.getById(id);<br>        <span class="hljs-keyword">return</span> addressBook;<br>    &#125;<br><br>    <span class="hljs-comment">//根据id修改地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(AddressBook addressBook)</span> &#123;<br>        addressBookMapper.update(addressBook);<br>    &#125;<br><br>    <span class="hljs-comment">//设置默认地址</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefault</span><span class="hljs-params">(AddressBook addressBook)</span> &#123;<br>        <span class="hljs-comment">//1、将当前用户的所有地址修改为非默认地址 update address_book set is_default = ? where user_id = ?</span><br>        addressBook.setIsDefault(<span class="hljs-number">0</span>);<br>        addressBook.setUserId(BaseContext.getCurrentId());<br>        addressBookMapper.updateIsDefaultByUserId(addressBook);<br><br>        <span class="hljs-comment">//2、将当前地址改为默认地址 update address_book set is_default = ? where id = ?</span><br>        addressBook.setIsDefault(<span class="hljs-number">1</span>);<br>        addressBookMapper.update(addressBook);<br>    &#125;<br><br>    <span class="hljs-comment">//根据id删除地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span> &#123;<br>        addressBookMapper.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>AddressBookMapper.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-keyword">import</span> com.sky.entity.AddressBook;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AddressBookMapper</span> &#123;<br><br>    <span class="hljs-comment">//条件查询</span><br>    List&lt;AddressBook&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-comment">//新增</span><br>    <span class="hljs-meta">@Insert(&quot;insert into address_book&quot; +</span><br><span class="hljs-meta">            &quot;        (user_id, consignee, phone, sex, province_code, province_name, city_code, city_name, district_code,&quot; +</span><br><span class="hljs-meta">            &quot;         district_name, detail, label, is_default)&quot; +</span><br><span class="hljs-meta">            &quot;        values (#&#123;userId&#125;, #&#123;consignee&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;provinceCode&#125;, #&#123;provinceName&#125;, #&#123;cityCode&#125;, #&#123;cityName&#125;,&quot; +</span><br><span class="hljs-meta">            &quot;                #&#123;districtCode&#125;, #&#123;districtName&#125;, #&#123;detail&#125;, #&#123;label&#125;, #&#123;isDefault&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-comment">//根据id查询</span><br>    <span class="hljs-meta">@Select(&quot;select * from address_book where id = #&#123;id&#125;&quot;)</span><br>    AddressBook <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">//根据id修改</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-comment">//根据用户id修改 是否默认地址</span><br>    <span class="hljs-meta">@Update(&quot;update address_book set is_default = #&#123;isDefault&#125; where user_id = #&#123;userId&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateIsDefaultByUserId</span><span class="hljs-params">(AddressBook addressBook)</span>;<br><br>    <span class="hljs-comment">//根据id删除地址</span><br>    <span class="hljs-meta">@Delete(&quot;delete from address_book where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.<code>AddressBookMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.AddressBookMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;AddressBook&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;AddressBook&quot;</span>&gt;</span><br>        select * from address_book<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span>&gt;</span><br>                and user_id = #&#123;userId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span>&gt;</span><br>                and phone = #&#123;phone&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;isDefault != null&quot;</span>&gt;</span><br>                and is_default = #&#123;isDefault&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;addressBook&quot;</span>&gt;</span><br>        update address_book<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;consignee != null&quot;</span>&gt;</span><br>                consignee = #&#123;consignee&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null&quot;</span>&gt;</span><br>                sex = #&#123;sex&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span>&gt;</span><br>                phone = #&#123;phone&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;detail != null&quot;</span>&gt;</span><br>                detail = #&#123;detail&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;label != null&quot;</span>&gt;</span><br>                label = #&#123;label&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;isDefault != null&quot;</span>&gt;</span><br>                is_default = #&#123;isDefault&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h2><h3 id="用户点餐业务流程"><a href="#用户点餐业务流程" class="headerlink" title="用户点餐业务流程"></a>用户点餐业务流程</h3><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E7%94%A8%E6%88%B7%E7%82%B9%E9%A4%90%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B.png"></p><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p>请求方式：<code>POST</code></p><p>请求路径：<code>/user/order/submit</code></p><p>参数：</p><ul><li>地址簿<code>id</code></li><li>配送状态（立即送出、选择送出时间）</li><li>打包费</li><li>总金额</li><li>备注</li><li>餐具数量</li></ul><p>返回数据：</p><ul><li>下单时间</li><li>订单总金额</li><li>订单号</li><li>订单<code>id</code></li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E7%94%A8%E6%88%B7%E4%B8%8B%E5%8D%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>订单表和订单明细表的关系：一对多。</p><h4 id="订单表orders"><a href="#订单表orders" class="headerlink" title="订单表orders"></a>订单表orders</h4><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>number</td><td>varchar(50)</td><td>订单号</td><td></td></tr><tr><td>status</td><td>int</td><td>订单状态</td><td>1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</td></tr><tr><td>user_id</td><td>bigint</td><td>用户id</td><td>逻辑外键</td></tr><tr><td>address_book_id</td><td>bigint</td><td>地址id</td><td>逻辑外键</td></tr><tr><td>order_time</td><td>datetime</td><td>下单时间</td><td></td></tr><tr><td>checkout_time</td><td>datetime</td><td>付款时间</td><td></td></tr><tr><td>pay_method</td><td>int</td><td>支付方式</td><td>1微信支付 2支付宝支付</td></tr><tr><td>pay_status</td><td>tinyint</td><td>支付状态</td><td>0未支付 1已支付 2退款</td></tr><tr><td>amount</td><td>decimal(10,2)</td><td>订单金额</td><td></td></tr><tr><td>remark</td><td>varchar(100)</td><td>备注信息</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td>冗余字段</td></tr><tr><td>address</td><td>varchar(255)</td><td>详细地址信息</td><td>冗余字段</td></tr><tr><td>consignee</td><td>varchar(32)</td><td>收货人</td><td>冗余字段</td></tr><tr><td>cancel_reason</td><td>varchar(255)</td><td>订单取消原因</td><td></td></tr><tr><td>rejection_reason</td><td>varchar(255)</td><td>拒单原因</td><td></td></tr><tr><td>cancel_time</td><td>datetime</td><td>订单取消时间</td><td></td></tr><tr><td>estimated_delivery_time</td><td>datetime</td><td>预计送达时间</td><td></td></tr><tr><td>delivery_status</td><td>tinyint</td><td>配送状态</td><td>1立即送出 0选择具体时间</td></tr><tr><td>delivery_time</td><td>datetime</td><td>送达时间</td><td></td></tr><tr><td>pack_amount</td><td>int</td><td>打包费</td><td></td></tr><tr><td>tableware_number</td><td>int</td><td>餐具数量</td><td></td></tr><tr><td>tableware_status</td><td>tinyint</td><td>餐具数量状态</td><td>1按餐量提供 0选择具体数量</td></tr></tbody></table><h4 id="订单明细表order-detail"><a href="#订单明细表order-detail" class="headerlink" title="订单明细表order_detail"></a>订单明细表order_detail</h4><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>商品名称</td><td>冗余字段</td></tr><tr><td>image</td><td>varchar(255)</td><td>商品图片路径</td><td>冗余字段</td></tr><tr><td>order_id</td><td>bigint</td><td>订单id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_flavor</td><td>varchar(50)</td><td>菜品口味</td><td></td></tr><tr><td>number</td><td>int</td><td>商品数量</td><td></td></tr><tr><td>amount</td><td>decimal(10,2)</td><td>商品单价</td><td></td></tr></tbody></table><h3 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h3><p>根据用户下单接口的参数设计<code>DTO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrdersSubmitDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//地址簿id</span><br>    <span class="hljs-keyword">private</span> Long addressBookId;<br>    <span class="hljs-comment">//付款方式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> payMethod;<br>    <span class="hljs-comment">//备注</span><br>    <span class="hljs-keyword">private</span> String remark;<br>    <span class="hljs-comment">//预计送达时间</span><br>    <span class="hljs-meta">@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime estimatedDeliveryTime;<br>    <span class="hljs-comment">//配送状态  1立即送出  0选择具体时间</span><br>    <span class="hljs-keyword">private</span> Integer deliveryStatus;<br>    <span class="hljs-comment">//餐具数量</span><br>    <span class="hljs-keyword">private</span> Integer tablewareNumber;<br>    <span class="hljs-comment">//餐具数量状态  1按餐量提供  0选择具体数量</span><br>    <span class="hljs-keyword">private</span> Integer tablewareStatus;<br>    <span class="hljs-comment">//打包费</span><br>    <span class="hljs-keyword">private</span> Integer packAmount;<br>    <span class="hljs-comment">//总金额</span><br>    <span class="hljs-keyword">private</span> BigDecimal amount;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据用户下单接口的返回结果设计<code>VO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderSubmitVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//订单id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">//订单号</span><br>    <span class="hljs-keyword">private</span> String orderNumber;<br>    <span class="hljs-comment">//订单金额</span><br>    <span class="hljs-keyword">private</span> BigDecimal orderAmount;<br>    <span class="hljs-comment">//下单时间</span><br>    <span class="hljs-keyword">private</span> LocalDateTime orderTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>OrderController</code>并提供用户下单方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController(&quot;userOrderController&quot;)</span><span class="hljs-comment">//给当前OrderController的bean在容器里起名，admin也有一个OrderController，会有冲突</span><br><span class="hljs-meta">@RequestMapping(&quot;user/order&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;用户端订单相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-comment">//用户下单</span><br>    <span class="hljs-meta">@PostMapping(&quot;/submit&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户下单&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;OrderSubmitVO&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersSubmitDTO ordersSubmitDTO)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;用户下单，参数为&#123;&#125;&quot;</span>, ordersSubmitDTO);<br>        <span class="hljs-type">OrderSubmitVO</span> <span class="hljs-variable">orderSubmitVO</span> <span class="hljs-operator">=</span> orderService.submitOrder(ordersSubmitDTO);<br>        <span class="hljs-keyword">return</span> Result.success(orderSubmitVO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>OrderService</code>接口，并声明用户下单方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-comment">//用户下单</span><br>    OrderSubmitVO <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrdersSubmitDTO ordersSubmitDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>OrderServiceImpl</code>实现<code>OrderService</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderDetailMapper orderDetailMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressBookMapper addressBookMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShoppingCartMapper shoppingCartMapper;<br><br>    <span class="hljs-comment">//用户下单</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><span class="hljs-comment">//添加事务</span><br>    <span class="hljs-keyword">public</span> OrderSubmitVO <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrdersSubmitDTO ordersSubmitDTO)</span> &#123;<br>        <span class="hljs-comment">//1.处理各种业务异常（地址簿为空，购物车数据为空）</span><br>        <span class="hljs-type">AddressBook</span> <span class="hljs-variable">addressBook</span> <span class="hljs-operator">=</span> addressBookMapper.getById(ordersSubmitDTO.getAddressBookId());<br>        <span class="hljs-keyword">if</span>(addressBook == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//抛出业务异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddressBookBusinessException</span>(MessageConstant.ADDRESS_BOOK_IS_NULL);<br>        &#125;<br><br>        <span class="hljs-comment">//查询当前用户的购物车数据</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>        shoppingCart.setUserId(userId);<br>        List&lt;ShoppingCart&gt; shoppingCartList = shoppingCartMapper.list(shoppingCart);<br>        <span class="hljs-keyword">if</span>(shoppingCartList == <span class="hljs-literal">null</span> || shoppingCartList.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//抛出业务异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCartBusinessException</span>(MessageConstant.SHOPPING_CART_IS_NULL);<br>        &#125;<br><br>        <span class="hljs-comment">//2.向订单表插入1条数据</span><br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();<br>        BeanUtils.copyProperties(ordersSubmitDTO, orders);<br>        orders.setOrderTime(LocalDateTime.now());<br>        orders.setPayStatus(Orders.UN_PAID);<span class="hljs-comment">//订单状态 1待付款</span><br>        orders.setStatus(Orders.PENDING_PAYMENT);<span class="hljs-comment">//支付状态 0</span><br>        orders.setNumber(String.valueOf(System.currentTimeMillis()));<br>        orders.setPhone(addressBook.getPhone());<br>        orders.setConsignee(addressBook.getConsignee());<span class="hljs-comment">//收货人</span><br>        orders.setUserId(userId);<br><br>        orderMapper.insert(orders);<br><br>        <span class="hljs-comment">//3.向订单明细表插入n条数据</span><br>        List&lt;OrderDetail&gt; orderDetailList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(ShoppingCart cart : shoppingCartList)&#123;<br>            <span class="hljs-type">OrderDetail</span> <span class="hljs-variable">orderDetail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderDetail</span>();<span class="hljs-comment">//订单明细</span><br>            BeanUtils.copyProperties(cart, orderDetail);<span class="hljs-comment">//订单明细和购物车属性命名是一致的</span><br>            orderDetail.setOrderId(orders.getId());<span class="hljs-comment">//设置当前订单明细关联的订单id</span><br>            orderDetailList.add(orderDetail);<br>        &#125;<br><br>        orderDetailMapper.insertBatch(orderDetailList);<br><br>        <span class="hljs-comment">//4.清空当前用户的购物车数据</span><br>        shoppingCartMapper.deleteById(userId);<br><br>        <span class="hljs-comment">//5.封装VO返回结果</span><br>        <span class="hljs-type">OrderSubmitVO</span> <span class="hljs-variable">orderSubmitVO</span> <span class="hljs-operator">=</span> OrderSubmitVO.builder()<br>                .id(orders.getId())<br>                .orderTime(orders.getOrderTime())<br>                .orderNumber(orders.getNumber())<br>                .orderAmount(orders.getAmount())<br>                .build();<br><br>        <span class="hljs-keyword">return</span> orderSubmitVO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>OrderMapper</code>接口和对应的<code>xml</code>映射文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br>    <span class="hljs-comment">//插入订单数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Orders orders)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Orders&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into orders (number, status, user_id, address_book_id, order_time, checkout_time, pay_method, pay_status,<br>                            amount, remark, phone, address, consignee, estimated_delivery_time, delivery_status,<br>                            pack_amount, tableware_number, tableware_status)<br>        values<br>            (#&#123;number&#125;, #&#123;status&#125;, #&#123;userId&#125;, #&#123;addressBookId&#125;, #&#123;orderTime&#125;, #&#123;checkoutTime&#125;, #&#123;payMethod&#125;,<br>             #&#123;payMethod&#125;, #&#123;amount&#125;, #&#123;remark&#125;, #&#123;phone&#125;, #&#123;address&#125;, #&#123;consignee&#125;, #&#123;estimatedDeliveryTime&#125;,<br>             #&#123;deliveryStatus&#125;, #&#123;packAmount&#125;, #&#123;tablewareNumber&#125;, #&#123;tablewareStatus&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建<code>OrderDetailMapper</code>接口和对应的<code>xml</code>映射文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDetailMapper</span> &#123;<br>    <span class="hljs-comment">//批量插入订单明细数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;OrderDetail&gt; orderDetailList)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.OrderDetailMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span>&gt;</span><br>        insert into order_detail (name, image, order_id, dish_id, setmeal_id, dish_flavor, number, amount)<br>            values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;orderDetailList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;od&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;od.name&#125;, #&#123;od.image&#125;, #&#123;od.orderId&#125;, #&#123;od.dishId&#125;, #&#123;od.setmealId&#125;, #&#123;od.dishFlavor&#125;, #&#123;od.number&#125;, #&#123;od.amount&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="订单支付"><a href="#订单支付" class="headerlink" title="订单支付"></a>订单支付</h2><h3 id="微信支付介绍"><a href="#微信支付介绍" class="headerlink" title="微信支付介绍"></a>微信支付介绍</h3><h4 id="微信支付产品"><a href="#微信支付产品" class="headerlink" title="微信支付产品"></a>微信支付产品</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E4%BA%A7%E5%93%81.png"></p><p>参考：<a href="https://pay.weixin.qq.com/static/product/product_index.shtml">https://pay.weixin.qq.com/static/product/product_index.shtml</a></p><h4 id="微信支付接入流程"><a href="#微信支付接入流程" class="headerlink" title="微信支付接入流程"></a>微信支付接入流程</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B.png"></p><h4 id="微信小程序支付时序图"><a href="#微信小程序支付时序图" class="headerlink" title="微信小程序支付时序图"></a>微信小程序支付时序图</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%94%AF%E4%BB%98%E6%97%B6%E5%BA%8F%E5%9B%BE.png"></p><p><code>JSAPI</code>下单：商户系统调用该接口在微信支付服务后台生成预支付交易单。</p><p>链接：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_5_1.shtml">微信支付-开发者文档</a></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%BE%AE%E4%BF%A1JSAPI%E4%B8%8B%E5%8D%95.png"></p><p>微信小程序调起支付：通过<code>JSAPI</code>下单接口获取到发起支付的必要参数<code>prepay_id</code>，然后使用微信支付提供的小程序方法调起小程序支付。</p><p>链接：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_5_4.shtml">微信支付-开发者文档</a></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%B5%B7%E6%94%AF%E4%BB%98.png"></p><h3 id="微信支付准备工作"><a href="#微信支付准备工作" class="headerlink" title="微信支付准备工作"></a>微信支付准备工作</h3><p>1.获取微信支付平台证书、商户私钥文件：两个<code>pem</code>文件。</p><p>2.获取临时域名：支付成功后微信服务通过该域名回调我们的程序。</p><p>链接：<a href="https://dashboard.cpolar.com/">https://dashboard.cpolar.com/</a></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/2_learn\Java-waimai\note\使用cpolar进行内网穿透.png"></p><p>注意：使用<code>cpolar.exe http 8080</code>命令如果不出现<code>Forwarding</code>这个选项，把命令换成<code>cpolar.exe http -region=cn_vip 8080</code>即可。</p><h3 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h3><h4 id="不跳过微信支付"><a href="#不跳过微信支付" class="headerlink" title="不跳过微信支付"></a>不跳过微信支付</h4><p>1.微信支付相关配置。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%883%EF%BC%89/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98xml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.png"></p><p><code>application.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">wechat:</span><br>    <span class="hljs-attr">appid:</span> <span class="hljs-string">$&#123;sky.wechat.appid&#125;</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">$&#123;sky.wechat.secret&#125;</span><br>    <span class="hljs-attr">mchid:</span> <span class="hljs-string">$&#123;sky.wechat.mchid&#125;</span><br>    <span class="hljs-attr">mchSerialNo:</span> <span class="hljs-string">$&#123;sky.wechat.mchSerialNo&#125;</span><br>    <span class="hljs-attr">privateKeyFilePath:</span> <span class="hljs-string">$&#123;sky.wechat.privateKeyFilePath&#125;</span><br>    <span class="hljs-attr">apiV3Key:</span> <span class="hljs-string">$&#123;sky.wechat.apiV3Key&#125;</span><br>    <span class="hljs-attr">weChatPayCertFilePath:</span> <span class="hljs-string">$&#123;sky.wechat.weChatPayCertFilePath&#125;</span><br>    <span class="hljs-attr">notifyUrl:</span> <span class="hljs-string">$&#123;sky.wechat.notifyUrl&#125;</span><br>    <span class="hljs-attr">refundNotifyUrl:</span> <span class="hljs-string">$&#123;sky.wechat.refundNotifyUrl&#125;</span><br></code></pre></td></tr></table></figure><p><code>application-dev.yml</code>（实现微信支付需要填写如下内容）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">wechat:</span><br>    <span class="hljs-attr">appid:</span> <br>    <span class="hljs-attr">secret:</span> <br>    <span class="hljs-attr">mchid:</span><br>    <span class="hljs-attr">mchSerialNo:</span><br>    <span class="hljs-attr">privateKeyFilePath:</span><br>    <span class="hljs-attr">apiV3Key:</span><br>    <span class="hljs-attr">weChatPayCertFilePath:</span><br>    <span class="hljs-attr">notifyUrl:</span><br>    <span class="hljs-attr">refundNotifyUrl:</span> <br></code></pre></td></tr></table></figure><p>2.<code>user/OrderController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//订单支付</span><br><span class="hljs-meta">@PutMapping(&quot;/payment&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;订单支付&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;OrderPaymentVO&gt; <span class="hljs-title function_">payment</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    log.info(<span class="hljs-string">&quot;订单支付：&#123;&#125;&quot;</span>, ordersPaymentDTO);<br>    <span class="hljs-type">OrderPaymentVO</span> <span class="hljs-variable">orderPaymentVO</span> <span class="hljs-operator">=</span> orderService.payment(ordersPaymentDTO);<br>    log.info(<span class="hljs-string">&quot;生成预支付交易单：&#123;&#125;&quot;</span>, orderPaymentVO);<br>    <span class="hljs-keyword">return</span> Result.success(orderPaymentVO);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>OrderService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//订单支付</span><br>OrderPaymentVO <span class="hljs-title function_">payment</span><span class="hljs-params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception;<br><br><span class="hljs-comment">//支付成功，修改订单状态</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">paySuccess</span><span class="hljs-params">(String outTradeNo)</span>;<br></code></pre></td></tr></table></figure><p>4.<code>OrderServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WeChatPayUtil weChatPayUtil;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><span class="hljs-comment">//订单支付</span><br><span class="hljs-keyword">public</span> OrderPaymentVO <span class="hljs-title function_">payment</span><span class="hljs-params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 当前登录用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(userId);<br><br>    <span class="hljs-comment">//调用微信支付接口，生成预支付交易单</span><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> weChatPayUtil.pay(<br>        ordersPaymentDTO.getOrderNumber(), <span class="hljs-comment">//商户订单号</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0.01</span>), <span class="hljs-comment">//支付金额，单位 元</span><br>        <span class="hljs-string">&quot;苍穹外卖订单&quot;</span>, <span class="hljs-comment">//商品描述</span><br>        user.getOpenid() <span class="hljs-comment">//微信用户的openid</span><br>    );<br><br>    <span class="hljs-keyword">if</span> (jsonObject.getString(<span class="hljs-string">&quot;code&quot;</span>) != <span class="hljs-literal">null</span> &amp;&amp; jsonObject.getString(<span class="hljs-string">&quot;code&quot;</span>).equals(<span class="hljs-string">&quot;ORDERPAID&quot;</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;该订单已支付&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">OrderPaymentVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);<br>    vo.setPackageStr(jsonObject.getString(<span class="hljs-string">&quot;package&quot;</span>));<br><br>    <span class="hljs-keyword">return</span> vo;<br>&#125;<br><br><br><span class="hljs-comment">//支付成功，修改订单状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paySuccess</span><span class="hljs-params">(String outTradeNo)</span> &#123;<br><br>    <span class="hljs-comment">// 根据订单号查询订单</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">ordersDB</span> <span class="hljs-operator">=</span> orderMapper.getByNumber(outTradeNo);<br><br>    <span class="hljs-comment">// 根据订单id更新订单的状态、支付方式、支付状态、结账时间</span><br>    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> Orders.builder()<br>        .id(ordersDB.getId())<br>        .status(Orders.TO_BE_CONFIRMED)<br>        .payStatus(Orders.PAID)<br>        .checkoutTime(LocalDateTime.now())<br>        .build();<br><br>    orderMapper.update(orders);<br>&#125;<br></code></pre></td></tr></table></figure><p>5.<code>OrderMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据订单号查询订单</span><br><span class="hljs-meta">@Select(&quot;select * from orders where number = #&#123;orderNumber&#125;&quot;)</span><br>Orders <span class="hljs-title function_">getByNumber</span><span class="hljs-params">(String orderNumber)</span>;<br><br><span class="hljs-comment">//修改订单信息</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Orders orders)</span>;<br></code></pre></td></tr></table></figure><p>6.<code>OrderMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.sky.entity.Orders&quot;</span>&gt;</span><br>    update orders<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;cancelReason != null and cancelReason!=&#x27;&#x27; &quot;</span>&gt;</span><br>            cancel_reason=#&#123;cancelReason&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;rejectionReason != null and rejectionReason!=&#x27;&#x27; &quot;</span>&gt;</span><br>            rejection_reason=#&#123;rejectionReason&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;cancelTime != null&quot;</span>&gt;</span><br>            cancel_time=#&#123;cancelTime&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;payStatus != null&quot;</span>&gt;</span><br>            pay_status=#&#123;payStatus&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;payMethod != null&quot;</span>&gt;</span><br>            pay_method=#&#123;payMethod&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;checkoutTime != null&quot;</span>&gt;</span><br>            checkout_time=#&#123;checkoutTime&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            status = #&#123;status&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deliveryTime != null&quot;</span>&gt;</span><br>            delivery_time = #&#123;deliveryTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7.<code>UserMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询用户</span><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>User <span class="hljs-title function_">getById</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>8.<code>PayNotifyController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.notify;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.support.json.JSONUtils;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.sky.properties.WeChatProperties;<br><span class="hljs-keyword">import</span> com.sky.service.OrderService;<br><span class="hljs-keyword">import</span> com.wechat.pay.contrib.apache.httpclient.util.AesUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.http.entity.ContentType;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付回调相关接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/notify&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayNotifyController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WeChatProperties weChatProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付成功回调</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/paySuccess&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paySuccessNotify</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//读取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> readData(request);<br>        log.info(<span class="hljs-string">&quot;支付成功回调：&#123;&#125;&quot;</span>, body);<br><br>        <span class="hljs-comment">//数据解密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> decryptData(body);<br>        log.info(<span class="hljs-string">&quot;解密后的文本：&#123;&#125;&quot;</span>, plainText);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(plainText);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">outTradeNo</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<span class="hljs-comment">//商户平台订单号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">transactionId</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;transaction_id&quot;</span>);<span class="hljs-comment">//微信支付交易号</span><br><br>        log.info(<span class="hljs-string">&quot;商户平台订单号：&#123;&#125;&quot;</span>, outTradeNo);<br>        log.info(<span class="hljs-string">&quot;微信支付交易号：&#123;&#125;&quot;</span>, transactionId);<br><br>        <span class="hljs-comment">//业务处理，修改订单状态、来单提醒</span><br>        orderService.paySuccess(outTradeNo);<br><br>        <span class="hljs-comment">//给微信响应</span><br>        responseToWeixin(response);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">readData</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (result.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                result.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            result.append(line);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> body</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">decryptData</span><span class="hljs-params">(String body)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">resultObject</span> <span class="hljs-operator">=</span> JSON.parseObject(body);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> resultObject.getJSONObject(<span class="hljs-string">&quot;resource&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> resource.getString(<span class="hljs-string">&quot;ciphertext&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nonce</span> <span class="hljs-operator">=</span> resource.getString(<span class="hljs-string">&quot;nonce&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">associatedData</span> <span class="hljs-operator">=</span> resource.getString(<span class="hljs-string">&quot;associated_data&quot;</span>);<br><br>        <span class="hljs-type">AesUtil</span> <span class="hljs-variable">aesUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesUtil</span>(weChatProperties.getApiV3Key().getBytes(StandardCharsets.UTF_8));<br>        <span class="hljs-comment">//密文解密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">plainText</span> <span class="hljs-operator">=</span> aesUtil.decryptToString(associatedData.getBytes(StandardCharsets.UTF_8),<br>                nonce.getBytes(StandardCharsets.UTF_8),<br>                ciphertext);<br><br>        <span class="hljs-keyword">return</span> plainText;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给微信响应</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">responseToWeixin</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        response.setStatus(<span class="hljs-number">200</span>);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;SUCCESS&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;SUCCESS&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, ContentType.APPLICATION_JSON.toString());<br>        response.getOutputStream().write(JSONUtils.toJSONString(map).getBytes(StandardCharsets.UTF_8));<br>        response.flushBuffer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="跳过微信支付"><a href="#跳过微信支付" class="headerlink" title="跳过微信支付"></a>跳过微信支付</h4><p>参考链接：</p><p>只试过下面这个：</p><p><a href="https://blog.csdn.net/XZY__one/article/details/135818055">苍穹外卖跳过微信支付（全网最强，最详细，最容易理解）_跳过网页微信付费-CSDN博客</a></p><p>其他的方法（没试过）：</p><p><a href="https://blog.csdn.net/Kirihara_Yukiho/article/details/136284138">苍穹外卖项目微信支付(没有商户号)的解决方法，超详细！！！_没有微信商户号怎么实现支付-CSDN博客</a></p><p><a href="https://blog.csdn.net/gaomobao/article/details/142255590?spm=1001.2014.3001.5502">苍穹外卖按照别的博主修改vx支付后商家订单不通知问题-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45195447/article/details/142413481?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Ctr-2-142413481-blog-135818055.235%5Ev43%5Epc_blog_bottom_relevance_base2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Ctr-2-142413481-blog-135818055.235%5Ev43%5Epc_blog_bottom_relevance_base2&utm_relevant_index=5">苍穹外卖遇到问题（包括跳过微信支付、nodejs不兼容等）_怎么跳过exe的支付界面设置-CSDN博客</a></p><p>1.<code>OrderServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//订单支付</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> OrderPaymentVO <span class="hljs-title function_">payment</span><span class="hljs-params">(OrdersPaymentDTO ordersPaymentDTO)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">// 当前登录用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(userId);<br><br>    <span class="hljs-comment">//调用微信支付接口，生成预支付交易单</span><br>    <span class="hljs-comment">/*JSONObject jsonObject = weChatPayUtil.pay(</span><br><span class="hljs-comment">                ordersPaymentDTO.getOrderNumber(), //商户订单号</span><br><span class="hljs-comment">                new BigDecimal(0.01), //支付金额，单位 元</span><br><span class="hljs-comment">                &quot;苍穹外卖订单&quot;, //商品描述</span><br><span class="hljs-comment">                user.getOpenid() //微信用户的openid</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        if (jsonObject.getString(&quot;code&quot;) != null &amp;&amp; jsonObject.getString(&quot;code&quot;).equals(&quot;ORDERPAID&quot;)) &#123;</span><br><span class="hljs-comment">            throw new OrderBusinessException(&quot;该订单已支付&quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    jsonObject.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;ORDERPAID&quot;</span>);<br>    <span class="hljs-type">OrderPaymentVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> jsonObject.toJavaObject(OrderPaymentVO.class);<br>    vo.setPackageStr(jsonObject.getString(<span class="hljs-string">&quot;package&quot;</span>));<br><br>    <span class="hljs-comment">//为替代微信支付成功后的数据库订单状态更新，多定义一个方法进行修改</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">OrderPaidStatus</span> <span class="hljs-operator">=</span> Orders.PAID; <span class="hljs-comment">//支付状态，已支付</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">OrderStatus</span> <span class="hljs-operator">=</span> Orders.TO_BE_CONFIRMED;  <span class="hljs-comment">//订单状态，待接单</span><br><br>    <span class="hljs-comment">//发现没有将支付时间 check_out属性赋值，所以在这里更新</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">check_out_time</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br>    <span class="hljs-comment">//获取订单号码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">orderNumber</span> <span class="hljs-operator">=</span> ordersPaymentDTO.getOrderNumber();<br><br>    log.info(<span class="hljs-string">&quot;调用updateStatus，用于替换微信支付更新数据库状态的问题&quot;</span>);<br>    orderMapper.updateStatus(OrderStatus, OrderPaidStatus, check_out_time, orderNumber);<br><br>    <span class="hljs-keyword">return</span> vo;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>OrderMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用于替换微信支付更新数据库状态的问题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderStatus</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderPaidStatus</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Update(&quot;update orders set status = #&#123;orderStatus&#125;,pay_status = #&#123;orderPaidStatus&#125; ,checkout_time = #&#123;check_out_time&#125; &quot; +</span><br><span class="hljs-meta">        &quot;where number = #&#123;orderNumber&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStatus</span><span class="hljs-params">(Integer orderStatus, Integer orderPaidStatus, LocalDateTime check_out_time, String orderNumber)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：接口开发（2）</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="微信登录"><a href="#微信登录" class="headerlink" title="微信登录"></a>微信登录</h2><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>HttpClient</code>是<code>Apache Jakarta Common</code>下的子项目，可以用来提供高效的、最新的、功能丰富的支持<code>HTTP</code>协议的客户端编程工具包，并且它支持<code>HTTP</code>协议最新的版本和建议。</p><p><code>HttpClient</code>作用：发送<code>HTTP</code>请求，接收响应数据。</p><p>引入<code>HttpClient</code>依赖：（如果有引入<code>aliyun-sdk-oss</code>则不用额外引入了，<code>aliyun-sdk-oss</code>已经引入了<code>HttpClient</code>依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>核心<code>API</code>：<code>HttpClient</code>、<code>HttpClients</code>、<code>CloseableHttpClient</code>、<code>HttpGet</code>、<code>HttpPost</code>。</p><p>发送请求步骤：</p><ol><li>创建<code>HttpClient</code>对象。</li><li>创建<code>Http</code>请求对象。</li><li>调用<code>HttpClient</code>的<code>execute</code>方法发送请求。</li></ol><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="GET方式请求"><a href="#GET方式请求" class="headerlink" title="GET方式请求"></a>GET方式请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClientTest</span> &#123;<br>    <span class="hljs-comment">//测试通过HttpClient发送GET方式的请求</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGET</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><br>        <span class="hljs-comment">//创建请求对象</span><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(<span class="hljs-string">&quot;http://localhost:8080/user/shop/status&quot;</span>);<br><br>        <span class="hljs-comment">//发送请求，接收响应结果</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<span class="hljs-comment">//抛出异常</span><br><br>        <span class="hljs-comment">//获取服务端返回的状态码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);<br><br>        <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> EntityUtils.toString(entity);<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的数据为：&quot;</span>+ body);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        response.close();<br>        httpClient.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="POST方式请求"><a href="#POST方式请求" class="headerlink" title="POST方式请求"></a>POST方式请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//测试通过HttpClient发送POST方式的请求</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPOST</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//创建httpclient对象</span><br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><br>    <span class="hljs-comment">//创建请求对象</span><br>    <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(<span class="hljs-string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);<br><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>    jsonObject.put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>    jsonObject.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>    <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonObject.toString());<br>    <span class="hljs-comment">//指定请求编码方式</span><br>    entity.setContentEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">//数据格式</span><br>    entity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>    httpPost.setEntity(entity);<br><br>    <span class="hljs-comment">//发送请求</span><br>    <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpPost);<br><br>    <span class="hljs-comment">//解析返回结果</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>    System.out.println(<span class="hljs-string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);<br><br>    <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity1</span> <span class="hljs-operator">=</span> response.getEntity();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> EntityUtils.toString(entity1);<br>    System.out.println(<span class="hljs-string">&quot;服务端返回的数据为：&quot;</span>+ body);<br><br>    <span class="hljs-comment">//关闭资源</span><br>    response.close();<br>    httpClient.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现工具类"><a href="#实现工具类" class="headerlink" title="实现工具类"></a>实现工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.test;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> org.apache.http.HttpEntity;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpPost;<br><span class="hljs-keyword">import</span> org.apache.http.entity.StringEntity;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.http.util.EntityUtils;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClientTest</span> &#123;<br>    <span class="hljs-comment">//测试通过HttpClient发送GET方式的请求</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGET</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><br>        <span class="hljs-comment">//创建请求对象</span><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(<span class="hljs-string">&quot;http://localhost:8080/user/shop/status&quot;</span>);<br><br>        <span class="hljs-comment">//发送请求，接收响应结果</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<span class="hljs-comment">//抛出异常</span><br><br>        <span class="hljs-comment">//获取服务端返回的状态码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);<br><br>        <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> EntityUtils.toString(entity);<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的数据为：&quot;</span>+ body);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        response.close();<br>        httpClient.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试通过HttpClient发送POST方式的请求</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPOST</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><br>        <span class="hljs-comment">//创建请求对象</span><br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(<span class="hljs-string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>        <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonObject.toString());<br>        <span class="hljs-comment">//指定请求编码方式</span><br>        entity.setContentEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-comment">//数据格式</span><br>        entity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        httpPost.setEntity(entity);<br><br>        <span class="hljs-comment">//发送请求</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpPost);<br><br>        <span class="hljs-comment">//解析返回结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);<br><br>        <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity1</span> <span class="hljs-operator">=</span> response.getEntity();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> EntityUtils.toString(entity1);<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的数据为：&quot;</span>+ body);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        response.close();<br>        httpClient.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>微信小程序：<a href="https://mp.weixin.qq.com/cgi-bin/wx?token=&lang=zh_CN">https://mp.weixin.qq.com/cgi-bin/wx?token=&amp;lang=zh_CN</a></p><p>微信小程序注册地址：<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p><p>登录小程序后台：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><p>查看小程序的<code>AppID</code>：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%9F%A5%E7%9C%8B%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84APPID.png"></p><p>微信小程序开发者工具下载地址： <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a></p><p>开发者工具创建小程序：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%88%9B%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B9%E7%9B%AE.png"></p><p>开发者工具设置不校验合法域名：需要勾选<code>不校验合法域名</code>，否则小程序无法向<code>Tomcat</code>发出请求。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9C%AC%E5%9C%B0%E8%AE%BE%E7%BD%AE%EF%BC%88%E4%B8%8D%E6%A0%A1%E9%AA%8C%E5%90%88%E6%B3%95%E5%9F%9F%E5%90%8D%EF%BC%89.png"></p><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><h5 id="小程序目录结构"><a href="#小程序目录结构" class="headerlink" title="小程序目录结构"></a>小程序目录结构</h5><p>小程序包含一个描述整体程序的<code>app</code>和多个描述各自页面的<code>page</code>。一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"></p><p>一个小程序页面由四个文件组成：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%A1%B5%E9%9D%A2%E7%BB%84%E6%88%90.png"></p><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p>注意：如果点击<code>获取用户信息</code>无法弹出弹窗，可以通过<code>详情</code>-&gt;<code>本地设置</code>-&gt;<code>调试基础库</code>，将当前版本修改为<code>2.27.0</code>以下版本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--index.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">navigation-bar</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Weixin&quot;</span> <span class="hljs-attr">back</span>=<span class="hljs-string">&quot;&#123;&#123;false&#125;&#125;&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;black&quot;</span> <span class="hljs-attr">background</span>=<span class="hljs-string">&quot;#FFF&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">navigation-bar</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scrollarea&quot;</span> <span class="hljs-attr">scroll-y</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>Weixin<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;getUserInfo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>获取用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>昵称：&#123;&#123;nickName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;url&#125;&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 100px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;wxLogin&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warn&quot;</span>&gt;</span>微信登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        授权码：&#123;&#123;code&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;sendRequest&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;default&quot;</span>&gt;</span>发送请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// index.js</span><br><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;hello surourou&quot;</span>,<br>        <span class="hljs-attr">nickName</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">code</span>: <span class="hljs-string">&quot;&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">//获取微信用户的头像和昵称</span><br>    <span class="hljs-title function_">getUserInfo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;调用方法&quot;</span>)<br>        wx.<span class="hljs-title function_">getUserProfile</span>(&#123;<br>          <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;获取用户信息&#x27;</span>,<br>          <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">userInfo</span>)<br>              <span class="hljs-comment">//为数据赋值</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>                  <span class="hljs-attr">nickName</span>: res.<span class="hljs-property">userInfo</span>.<span class="hljs-property">nickName</span>,<br>                  <span class="hljs-attr">url</span>: res.<span class="hljs-property">userInfo</span>.<span class="hljs-property">avatarUrl</span><br>              &#125;)<br>          &#125;<br>        &#125;)<br>    &#125;,<br><br>    <span class="hljs-comment">//微信登录，获取微信用户的授权码（授权码只能使用一次，每次调用都不一样）</span><br>    <span class="hljs-title function_">wxLogin</span>(<span class="hljs-params"></span>)&#123;<br>        wx.<span class="hljs-title function_">login</span>(&#123;<br>          <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">code</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>                <span class="hljs-attr">code</span>: res.<span class="hljs-property">code</span><br>            &#125;)<br>          &#125;,<br>        &#125;)<br>    &#125;,<br><br>    <span class="hljs-comment">//发送请求</span><br>    <span class="hljs-title function_">sendRequest</span>(<span class="hljs-params"></span>)&#123;<br>        wx.<span class="hljs-title function_">request</span>(&#123;<br>          <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/user/shop/status&#x27;</span>,<br>          <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>          <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>          &#125;<br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="微信登录-1"><a href="#微信登录-1" class="headerlink" title="微信登录"></a>微信登录</h3><h4 id="导入小程序代码"><a href="#导入小程序代码" class="headerlink" title="导入小程序代码"></a>导入小程序代码</h4><h4 id="微信登录流程"><a href="#微信登录流程" class="headerlink" title="微信登录流程"></a>微信登录流程</h4><p>微信登录：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html</a></p><p>注意：可以使用<code>postman</code>测试登录凭证校验接口。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B.png"></p><h4 id="需求分析和设计"><a href="#需求分析和设计" class="headerlink" title="需求分析和设计"></a>需求分析和设计</h4><h5 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h5><p>业务规则：</p><ul><li>基于微信登录实现小程序的登录功能。</li><li>如果是新用户需要自动完成注册。</li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h5 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h5 id="数据库设计（user表）"><a href="#数据库设计（user表）" class="headerlink" title="数据库设计（user表）"></a>数据库设计（user表）</h5><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>openid</td><td>varchar(45)</td><td>微信用户的唯一标识</td><td></td></tr><tr><td>name</td><td>varchar(32)</td><td>用户姓名</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>id_number</td><td>varchar(18)</td><td>身份证号</td><td></td></tr><tr><td>avatar</td><td>varchar(500)</td><td>微信用户头像路径</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>注册时间</td><td></td></tr></tbody></table><h4 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.配置微信登录所需配置项。</p><p><code>application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">wechat:</span><br>    <span class="hljs-attr">appid:</span> <span class="hljs-string">wx356e117f7fb1a1ee</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">2b862ee13a45b6ea421c780702b66b96</span><br></code></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">wechat:</span><br>    <span class="hljs-attr">appid:</span> <span class="hljs-string">$&#123;sky.wechat.appid&#125;</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">$&#123;sky.wechat.secret&#125;</span><br></code></pre></td></tr></table></figure><p>2.配置为微信用户生成<code>jwt</code>令牌时使用的配置项。</p><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">jwt:</span><br>    <span class="hljs-comment"># 设置jwt签名加密时使用的秘钥</span><br>    <span class="hljs-attr">user-secret-key:</span> <span class="hljs-string">itheima</span><br>    <span class="hljs-comment"># 设置jwt过期时间</span><br>    <span class="hljs-attr">user-ttl:</span> <span class="hljs-number">7200000</span><br>    <span class="hljs-comment"># 设置前端传递过来的令牌名称</span><br>    <span class="hljs-attr">user-token-name:</span> <span class="hljs-string">authentication</span><br></code></pre></td></tr></table></figure><p>3.<code>DTO</code>设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<br><br><span class="hljs-comment">//C端用户登录</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String code;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>VO</code>设计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String openid;<br>    <span class="hljs-keyword">private</span> String token;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.根据接口定义创建<code>UserController</code>的<code>login</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/user&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端用户相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtProperties jwtProperties;<br><br>    <span class="hljs-comment">//微信登录</span><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;微信登录&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;UserLoginVO&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserLoginDTO userLoginDTO)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;微信用户登录：&#123;&#125;&quot;</span>, userLoginDTO);<br>        <span class="hljs-comment">//微信登录</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.wxLogin(userLoginDTO);<br>        <span class="hljs-comment">//为微信用户生成jwt令牌</span><br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        claims.put(JwtClaimsConstant.USER_ID, user.getId());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtil.createJWT(jwtProperties.getUserSecretKey(), jwtProperties.getUserTtl(), claims);<br><br>        <span class="hljs-type">UserLoginVO</span> <span class="hljs-variable">userLoginVO</span> <span class="hljs-operator">=</span> UserLoginVO.builder()<br>                .id(user.getId())<br>                .openid(user.getOpenid())<br>                .token(token)<br>                .build();<br>        <span class="hljs-keyword">return</span> Result.success(userLoginVO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.创建<code>UserService</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">//微信登录</span><br>    User <span class="hljs-title function_">wxLogin</span><span class="hljs-params">(UserLoginDTO userLoginDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.创建<code>UserServiceImpl</code>实现类。在<code>UserServiceImpl</code>中创建私有方法<code>getOpenid</code>。完善<code>UserServiceImpl</code>的<code>wxLogin</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">//微信服务接口地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WX_LOGIN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WeChatProperties weChatProperties;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">//微信登录</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">wxLogin</span><span class="hljs-params">(UserLoginDTO userLoginDTO)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> getOpenid(userLoginDTO.getCode());<br><br>        <span class="hljs-comment">//判断openid是否为空，如果为空表示登录失败，抛出业务异常</span><br>        <span class="hljs-keyword">if</span>(openid == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginFailedException</span>(MessageConstant.LOGIN_FAILED);<br>        &#125;<br><br>        <span class="hljs-comment">//判断当前用户是否为新用户</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getByOpenid(openid);<br><br>        <span class="hljs-comment">//如果是新用户，自动完成注册</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            user = User.builder().openid(openid).createTime(LocalDateTime.now()).build();<br>            userMapper.insert(user);<br>        &#125;<br><br>        <span class="hljs-comment">//返回这个用户对象</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">//调用微信接口服务，获得微信用户的openid</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getOpenid</span><span class="hljs-params">(String code)</span> &#123;<br>        <span class="hljs-comment">//调用微信接口服务，获得当前微信用户的openid</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;appid&quot;</span>, weChatProperties.getAppid());<br>        map.put(<span class="hljs-string">&quot;secret&quot;</span>, weChatProperties.getSecret());<br>        map.put(<span class="hljs-string">&quot;js_code&quot;</span>, code);<br>        map.put(<span class="hljs-string">&quot;grant_type&quot;</span>, <span class="hljs-string">&quot;authorization_code&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(WX_LOGIN, map);<br><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSONObject.parseObject(json);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">openid</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;openid&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> openid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8.创建<code>UserMapper</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//根据openid查询用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where openid = #&#123;openid&#125;&quot;)</span><br>    User <span class="hljs-title function_">getByOpenid</span><span class="hljs-params">(String openid)</span>;<br><br>    <span class="hljs-comment">//插入数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.创建<code>UserMapper.xml</code>映射文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into user (openid, name, phone, sex, id_number, avatar, create_time)<br>        values (#&#123;openid&#125;, #&#123;name&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;avatar&#125;, #&#123;createTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>10.编写拦截器<code>JwtTokenUserInterceptor</code>，统一拦截用户端发送的请求并进行<code>jwt</code>校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.interceptor;<br><br><span class="hljs-comment">//jwt令牌校验的拦截器</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenUserInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtProperties jwtProperties;<br><br>    <span class="hljs-comment">//校验jwt</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//判断当前拦截到的是Controller的方法还是其他资源</span><br>        <span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>            <span class="hljs-comment">//当前拦截到的不是动态方法，直接放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//1、从请求头中获取令牌</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(jwtProperties.getUserTokenName());<br><br>        <span class="hljs-comment">//2、校验令牌</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(jwtProperties.getUserSecretKey(), token);<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.USER_ID).toString());<br>            log.info(<span class="hljs-string">&quot;当前用户id：&quot;</span>, userId);<br>            BaseContext.setCurrentId(userId);<br>            <span class="hljs-comment">//3、通过，放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//4、不通过，响应401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>11.在<code>WebMvcConfiguration</code>配置类中注册拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;<br><br><span class="hljs-comment">//注册自定义拦截器</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;开始注册自定义拦截器...&quot;</span>);<br>    registry.addInterceptor(jwtTokenAdminInterceptor)<br>        .addPathPatterns(<span class="hljs-string">&quot;/admin/**&quot;</span>)<br>        .excludePathPatterns(<span class="hljs-string">&quot;/admin/employee/login&quot;</span>);<br><br>    registry.addInterceptor(jwtTokenUserInterceptor)<br>        .addPathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>)<br>        .excludePathPatterns(<span class="hljs-string">&quot;/user/user/login&quot;</span>)<br>        .excludePathPatterns(<span class="hljs-string">&quot;/user/shop/status&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="导入商品浏览功能代码"><a href="#导入商品浏览功能代码" class="headerlink" title="导入商品浏览功能代码"></a>导入商品浏览功能代码</h3><h4 id="产品原型-1"><a href="#产品原型-1" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%95%86%E5%93%81%E6%B5%8F%E8%A7%88%E5%8A%9F%E8%83%BD%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h4><h5 id="查询分类"><a href="#查询分类" class="headerlink" title="查询分类"></a>查询分类</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%95%86%E5%93%81%E6%B5%8F%E8%A7%88%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%9F%A5%E8%AF%A2%E5%88%86%E7%B1%BB%EF%BC%89.png"></p><h5 id="根据分类id查询菜品"><a href="#根据分类id查询菜品" class="headerlink" title="根据分类id查询菜品"></a>根据分类id查询菜品</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%95%86%E5%93%81%E6%B5%8F%E8%A7%88%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AE%E5%88%86%E7%B1%BBid%E6%9F%A5%E8%AF%A2%E8%8F%9C%E5%93%81%EF%BC%89.png"></p><h5 id="根据分类id查询套餐"><a href="#根据分类id查询套餐" class="headerlink" title="根据分类id查询套餐"></a>根据分类id查询套餐</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%95%86%E5%93%81%E6%B5%8F%E8%A7%88%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AE%E5%88%86%E7%B1%BBid%E6%9F%A5%E8%AF%A2%E5%A5%97%E9%A4%90%EF%BC%89.png"></p><h5 id="根据套餐id查询包含的菜品"><a href="#根据套餐id查询包含的菜品" class="headerlink" title="根据套餐id查询包含的菜品"></a>根据套餐id查询包含的菜品</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%95%86%E5%93%81%E6%B5%8F%E8%A7%88%E5%8A%9F%E8%83%BD%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AE%E5%A5%97%E9%A4%90id%E6%9F%A5%E8%AF%A2%E5%8C%85%E5%90%AB%E7%9A%84%E8%8F%9C%E5%93%81%EF%BC%89.png"></p><h4 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.<code>CategoryController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController(&quot;userCategoryController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/category&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端-分类接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryService categoryService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;查询分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer type)</span> &#123;<br>        List&lt;Category&gt; list = categoryService.list(type);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>DishController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController(&quot;userDishController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/dish&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishService dishService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>        dish.setCategoryId(categoryId);<br>        dish.setStatus(StatusConstant.ENABLE);<span class="hljs-comment">//查询起售中的菜品</span><br><br>        List&lt;DishVO&gt; list = dishService.listWithFlavor(dish);<br><br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>SetmealController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController(&quot;userSetmealController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/setmeal&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;C端-套餐浏览接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealService setmealService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 条件查询</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询套餐&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;Setmeal&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>        <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>        setmeal.setCategoryId(categoryId);<br>        setmeal.setStatus(StatusConstant.ENABLE);<br><br>        List&lt;Setmeal&gt; list = setmealService.list(setmeal);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据套餐id查询包含的菜品列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据套餐id查询包含的菜品列表&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;DishItemVO&gt;&gt; <span class="hljs-title function_">dishList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        List&lt;DishItemVO&gt; list = setmealService.getDishItemById(id);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//条件查询菜品和口味</span><br>List&lt;DishVO&gt; <span class="hljs-title function_">listWithFlavor</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>DishServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//条件查询菜品和口味</span><br><span class="hljs-keyword">public</span> List&lt;DishVO&gt; <span class="hljs-title function_">listWithFlavor</span><span class="hljs-params">(Dish dish)</span> &#123;<br>    List&lt;Dish&gt; dishList = dishMapper.list(dish);<br><br>    List&lt;DishVO&gt; dishVOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (Dish d : dishList) &#123;<br>        <span class="hljs-type">DishVO</span> <span class="hljs-variable">dishVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DishVO</span>();<br>        BeanUtils.copyProperties(d,dishVO);<br><br>        <span class="hljs-comment">//根据菜品id查询对应的口味</span><br>        List&lt;DishFlavor&gt; flavors = dishFlavorMapper.getByDishId(d.getId());<br><br>        dishVO.setFlavors(flavors);<br>        dishVOList.add(dishVO);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dishVOList;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.<code>SetmealService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//条件查询</span><br>List&lt;Setmeal&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span>;<br><br><span class="hljs-comment">//根据id查询菜品选项</span><br>List&lt;DishItemVO&gt; <span class="hljs-title function_">getDishItemById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>7.<code>SetmealServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//条件查询</span><br><span class="hljs-keyword">public</span> List&lt;Setmeal&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span> &#123;<br>    List&lt;Setmeal&gt; list = setmealMapper.list(setmeal);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-comment">//根据id查询菜品选项</span><br><span class="hljs-keyword">public</span> List&lt;DishItemVO&gt; <span class="hljs-title function_">getDishItemById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> setmealMapper.getDishItemBySetmealId(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>8.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//动态条件查询套餐</span><br>List&lt;Setmeal&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Setmeal setmeal)</span>;<br><br><span class="hljs-comment">//根据套餐id查询菜品选项</span><br><span class="hljs-meta">@Select(&quot;select sd.name, sd.copies, d.image, d.description &quot; +</span><br><span class="hljs-meta">        &quot;from setmeal_dish sd left join dish d on sd.dish_id = d.id &quot; +</span><br><span class="hljs-meta">        &quot;where sd.setmeal_id = #&#123;setmealId&#125;&quot;)</span><br>List&lt;DishItemVO&gt; <span class="hljs-title function_">getDishItemBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><p>9.<code>SetmealMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span>&gt;</span><br>    select * from setmeal<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="缓存商品"><a href="#缓存商品" class="headerlink" title="缓存商品"></a>缓存商品</h2><h3 id="缓存菜品"><a href="#缓存菜品" class="headerlink" title="缓存菜品"></a>缓存菜品</h3><h4 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h4><p>用户端小程序展示的菜品数据都是通过查询数据库获得，如果用户端访问量比较大，数据库访问压力随之增大。</p><p>结果：系统响应慢、用户体验差。</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>通过<code>Redis</code>来缓存菜品数据，减少数据库查询操作。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E7%BC%93%E5%AD%98%E8%8F%9C%E5%93%81%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF.png"></p><p>缓存逻辑分析：</p><ul><li>每个分类下的菜品保存一份缓存数据。</li><li>数据库中菜品数据有变更时清理缓存数据。</li></ul><h4 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h4><h5 id="添加缓存"><a href="#添加缓存" class="headerlink" title="添加缓存"></a>添加缓存</h5><p>修改用户端接口<code>DishController</code>的<code>list</code>方法，加入缓存处理逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController(&quot;userDishController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/dish&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishService dishService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>        <span class="hljs-comment">//构造redis中的key，规则：dish_分类id</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dish_&quot;</span> + categoryId;<br><br>        <span class="hljs-comment">//查询redis中是否存在菜品数据</span><br>        List&lt;DishVO&gt; list = (List&lt;DishVO&gt;) redisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//以什么方式存储就以什么方式get数据，得到Object类型，可以强转为存储时的数据类型</span><br>        <span class="hljs-keyword">if</span>(list != <span class="hljs-literal">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果存在，直接返回，无需查询数据库</span><br>            <span class="hljs-keyword">return</span> Result.success(list);<br>        &#125;<br><br><br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>        dish.setCategoryId(categoryId);<br>        dish.setStatus(StatusConstant.ENABLE);<span class="hljs-comment">//查询起售中的菜品</span><br>        <span class="hljs-comment">//如果不存在，查询数据库，将查询到的数据放入redis中</span><br>        list = dishService.listWithFlavor(dish);<br>        redisTemplate.opsForValue().set(key, list);<br><br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h5><p>1.修改管理端接口<code>DishController</code>的相关方法，加入清理缓存的逻辑，需要改造的方法：</p><ul><li>新增菜品</li><li>修改菜品</li><li>批量删除菜品</li><li>起售、停售菜品</li></ul><p>2.抽取清理缓存的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//清理缓存数据</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanCache</span><span class="hljs-params">(String pattern)</span>&#123;<br>    <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> redisTemplate.keys(pattern);<br>    redisTemplate.delete(keys);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.调用清理缓存的方法，保证数据一致性。</p><p>对于<code>save</code>（新增方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//清理缓存数据</span><br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dish_&quot;</span> + dishDTO.getCategoryId();<br>cleanCache(key);<br></code></pre></td></tr></table></figure><p>对于<code>delete</code>、<code>update</code>、<code>startOrStop</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//将所有的菜品缓存数据清理掉，所有以dish_开头的key</span><br>cleanCache(<span class="hljs-string">&quot;dish_*&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p><code>Spring Cache</code>是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p><p><code>Spring Cache</code>提供了一层抽象，底层可以切换不同的缓存实现，例如：</p><ul><li><code>EHCache</code></li><li><code>Caffeine</code></li><li><code>Redis</code></li></ul><p>引入<code>Spring Cache</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><h4 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h4><p>导入资料中的初始工程，在此基础上加入<code>Spring Cache</code>注解即可。</p><p>在启动类加入<code>@EnableCaching</code>开启缓存注解功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableCaching</span><span class="hljs-comment">//开启缓存注解功能</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@CachePut(cacheNames = &quot;userCache&quot;, key = &quot;#user.id&quot;)</span> <span class="hljs-comment">//如果使用Spring Cache缓存数据，key的生成：userCache::key</span><br>    <span class="hljs-comment">//key使用spEL（Spring EL），即Spring的表达式语言</span><br>    <span class="hljs-comment">//@CachePut(cacheNames = &quot;userCache&quot;, key = &quot;#result.id&quot;)//对象导航，result是返回值</span><br>    <span class="hljs-comment">//@CachePut(cacheNames = &quot;userCache&quot;, key = &quot;#p0.id&quot;)</span><br>    <span class="hljs-comment">//@CachePut(cacheNames = &quot;userCache&quot;, key = &quot;#a0.id&quot;)</span><br>    <span class="hljs-comment">//@CachePut(cacheNames = &quot;userCache&quot;, key = &quot;#root.args[0].id&quot;)//p0、a0和root.args[0]都是该方法的第一个参数</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        userMapper.insert(user);<span class="hljs-comment">//插入时@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)，会返回id值到user中，可以通过user获得id值</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping</span><br>    <span class="hljs-meta">@CacheEvict(cacheNames = &quot;userCache&quot;, key = &quot;#id&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>&#123;<br>        userMapper.deleteById(id);<br>    &#125;<br><br><span class="hljs-meta">@DeleteMapping(&quot;/delAll&quot;)</span><br>    <span class="hljs-meta">@CacheEvict(cacheNames = &quot;userCache&quot;, allEntries = true)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span>&#123;<br>        userMapper.deleteAll();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-meta">@Cacheable(cacheNames = &quot;userCache&quot;, key = &quot;#id&quot;)</span><span class="hljs-comment">//key的生成：userCache::2</span><br>    <span class="hljs-comment">// Spring Cache的底层是基于代理技术，为当前Controller创建代理对象，在调用这个方法之前先进入代理对象，在代理对象中查询redis。</span><br>    <span class="hljs-comment">// 首先使用key去查询redis中是否存在缓存数据，如果存在缓存数据则直接使用，不会调用getById方法。</span><br>    <span class="hljs-comment">// 如果没有查询到则通过反射调用getById方法查询数据库，然后把数据返回，将返回结果存入redis缓存中。</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(id);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="缓存套餐"><a href="#缓存套餐" class="headerlink" title="缓存套餐"></a>缓存套餐</h3><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><ol><li>导入<code>Spring Cache和Redis</code>相关<code>maven</code>坐标。</li><li>在启动类上加入<code>@EnableCaching</code>注解，开启缓存注解功能。</li><li>在用户端接口<code>SetmealController</code>的<code>list</code>方法上加入<code>@Cacheable</code>注解。</li><li>在管理端接口<code>SetmealController</code>的<code>save</code>、<code>delete</code>、<code>update</code>、<code>startOrStop</code>等方法上加入<code>CacheEvict</code>注解。</li></ol><h4 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.在用户端接口<code>SetmealController</code>的<code>list</code>方法上加入<code>@Cacheable</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Cacheable(cacheNames = &quot;setmealCache&quot;, key = &quot;#categoryId&quot;)</span><span class="hljs-comment">//key：categoryId::100</span><br></code></pre></td></tr></table></figure><p>2.在管理端接口<code>SetmealController</code>的<code>save</code>、<code>delete</code>、<code>update</code>、<code>startOrStop</code>等方法上加入<code>CacheEvict</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//save</span><br><span class="hljs-meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;, key = &quot;#setmealDTO.categoryId&quot;)</span><span class="hljs-comment">//key：categoryId::100</span><br><span class="hljs-comment">//delete、update、startOrStop</span><br><span class="hljs-meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;, allEntries = true)</span><br></code></pre></td></tr></table></figure><h2 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h2><h3 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h3><h4 id="产品原型-2"><a href="#产品原型-2" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%B7%BB%E5%8A%A0%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h4><ul><li>请求方式：<code>POST</code></li><li>请求路径：<code>/user/shoppingCart/add</code></li><li>请求参数：套餐<code>id</code>、菜品<code>id</code>、口味</li><li>返回结果：<code>code</code>、<code>data</code>、<code>msg</code></li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%B7%BB%E5%8A%A0%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="数据库设计（shopping-cart表）"><a href="#数据库设计（shopping-cart表）" class="headerlink" title="数据库设计（shopping_cart表）"></a>数据库设计（shopping_cart表）</h4><p>作用：暂时存放所选商品的地方，选的什么商品，每个商品都买了几个，不同用户的购物车需要区分开。</p><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>商品名称</td><td>冗余字段</td></tr><tr><td>image</td><td>varchar(255)</td><td>商品图片路径</td><td>冗余字段</td></tr><tr><td>user_id</td><td>bigint</td><td>用户id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_flavor</td><td>varchar(50)</td><td>菜品口味</td><td></td></tr><tr><td>number</td><td>int</td><td>商品数量</td><td></td></tr><tr><td>amount</td><td>decimal(10,2)</td><td>商品单价</td><td>冗余字段</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr></tbody></table><h4 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据添加购物车接口的参数设计<code>DTO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Long dishId;<br>    <span class="hljs-keyword">private</span> Long setmealId;<br>    <span class="hljs-keyword">private</span> String dishFlavor;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.根据添加购物车接口创建<code>ShoppingCartController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/shoppingCart&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Api(tags = &quot;C端购物车相关接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShoppingCartService shoppingCartService;<br><br>    <span class="hljs-comment">//添加购物车</span><br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;添加购物车&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;添加购物车，商品信息为：&#123;&#125;&quot;</span>,shoppingCartDTO);<br>        shoppingCartService.addShoppingCart(shoppingCartDTO);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.创建<code>ShoppingCartService</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShoppingCartService</span> &#123;<br>    <span class="hljs-comment">//添加购物车</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.创建<code>ShoppingCartServiceImpl</code>实现类，并实现<code>add</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShoppingCartService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ShoppingCartMapper shoppingCartMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br><br>    <span class="hljs-comment">//添加购物车</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;<br>        <span class="hljs-comment">//判断当前加入到购物车中的商品是否已经存在了</span><br>        <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>        BeanUtils.copyProperties(shoppingCartDTO, shoppingCart);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>        shoppingCart.setUserId(userId);<br><br>        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<br><br>        <span class="hljs-comment">//如果已经存在了，只需要将数量加一</span><br>        <span class="hljs-keyword">if</span>(list != <span class="hljs-literal">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//只会查找到一条</span><br>            cart.setNumber(cart.getNumber() + <span class="hljs-number">1</span>);<span class="hljs-comment">//update shopping_cart set number = ? where id = ?</span><br>            shoppingCartMapper.updateNumberById(cart);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果不存在，需要插入一条购物车数据</span><br>            <span class="hljs-comment">//判断本次添加到购物车的是菜品还是套餐</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">dishId</span> <span class="hljs-operator">=</span> shoppingCartDTO.getDishId();<br>            <span class="hljs-keyword">if</span>(dishId != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//本次添加到购物车的是菜品</span><br>                <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> dishMapper.getById(dishId);<br>                shoppingCart.setName(dish.getName());<br>                shoppingCart.setImage(dish.getImage());<br>                shoppingCart.setAmount(dish.getPrice());<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//本次添加到购物车的是套餐</span><br>                <span class="hljs-type">Long</span> <span class="hljs-variable">setmealId</span> <span class="hljs-operator">=</span> shoppingCartDTO.getSetmealId();<br>                <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> setmealMapper.getById(setmealId);<br>                shoppingCart.setName(setmeal.getName());<br>                shoppingCart.setImage(setmeal.getImage());<br>                shoppingCart.setAmount(setmeal.getPrice());<br>            &#125;<br>            shoppingCart.setNumber(<span class="hljs-number">1</span>);<br>            shoppingCart.setCreateTime(LocalDateTime.now());<br>            shoppingCartMapper.insert(shoppingCart);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.创建<code>ShoppingCartMapper</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ShoppingCartMapper</span> &#123;<br>    <span class="hljs-comment">//动态条件查询</span><br>    List&lt;ShoppingCart&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(ShoppingCart shoppingCart)</span>;<br><br>    <span class="hljs-comment">//根据id修改商品数量</span><br>    <span class="hljs-meta">@Update(&quot;update shopping_cart set number = #&#123;number&#125;  where id = #&#123;id&#125;;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateNumberById</span><span class="hljs-params">(ShoppingCart shoppingCart)</span>;<br><br>    <span class="hljs-comment">//插入购物车数据</span><br>    <span class="hljs-meta">@Insert(&quot;insert into shopping_cart (name, user_id, dish_id, setmeal_id, dish_flavor, number, amount, image, create_time) &quot; +</span><br><span class="hljs-meta">            &quot;values (#&#123;name&#125;, #&#123;userId&#125;, #&#123;dishId&#125;, #&#123;setmealId&#125;, #&#123;dishFlavor&#125;, #&#123;number&#125;, #&#123;amount&#125;, #&#123;image&#125;, #&#123;createTime&#125;);&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(ShoppingCart shoppingCart)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.创建<code>ShoppingCartMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.ShoppingCartMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.entity.ShoppingCart&quot;</span>&gt;</span><br>        select * from shopping_cart<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userId != null&quot;</span>&gt;</span>and user_id = #&#123;userId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;setmealId != null&quot;</span>&gt;</span>and setmeal_id = #&#123;setmealId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dishId != null&quot;</span>&gt;</span>and dish_id = #&#123;dishId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dishFlavor != null&quot;</span>&gt;</span>and dish_flavor = #&#123;dishFlavor&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="查看购物车"><a href="#查看购物车" class="headerlink" title="查看购物车"></a>查看购物车</h3><h4 id="产品原型-3"><a href="#产品原型-3" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%9F%A5%E7%9C%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%9F%A5%E7%9C%8B%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.在<code>ShoppingCartController</code>中创建查看购物车的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//查看购物车</span><br><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;查看购物车&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>    List&lt;ShoppingCart&gt; list = shoppingCartService.showShoppingCart();<br>    <span class="hljs-keyword">return</span> Result.success(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>ShoppingCartService</code>接口中声明查看购物车的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//查看购物车</span><br>List&lt;ShoppingCart&gt; <span class="hljs-title function_">showShoppingCart</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>ShoppingCartServiceImpl</code>中实现查看购物车的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//查看购物车</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;ShoppingCart&gt; <span class="hljs-title function_">showShoppingCart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取到当前微信用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">UserId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>    <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> ShoppingCart.builder().userId(UserId).build();<br>    List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="清空购物车"><a href="#清空购物车" class="headerlink" title="清空购物车"></a>清空购物车</h3><h4 id="产品原型-4"><a href="#产品原型-4" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%B8%85%E7%A9%BA%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-4"><a href="#接口设计-4" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E6%B8%85%E7%A9%BA%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-6"><a href="#代码开发-6" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.在<code>ShoppingCartController</code>中创建清空购物车的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//清空购物车</span><br><span class="hljs-meta">@DeleteMapping(&quot;/clean&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;清空购物车&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>&#123;<br>    shoppingCartService.cleanShoppingCart();<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>ShoppingCartService</code>接口中声明清空购物车的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//清空购物车</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanShoppingCart</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>ShoppingCartServiceImpl</code>中实现清空购物车的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//清空购物车</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanShoppingCart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取到当前微信用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">UserId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br>    shoppingCartMapper.deleteByUserId(UserId);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>ShoppingCartMapper</code>接口中创建删除购物车数据的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据用户id删除购物车数据</span><br><span class="hljs-meta">@Delete(&quot;delete from shopping_cart where user_id = #&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByUserId</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><h3 id="删除购物车中一个商品"><a href="#删除购物车中一个商品" class="headerlink" title="删除购物车中一个商品"></a>删除购物车中一个商品</h3><h4 id="产品原型-5"><a href="#产品原型-5" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%88%A0%E9%99%A4%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%95%86%E5%93%81%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-5"><a href="#接口设计-5" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%882%EF%BC%89/%E5%88%A0%E9%99%A4%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%95%86%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-7"><a href="#代码开发-7" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.<code>ShoppingCartController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除购物车中一个商品</span><br><span class="hljs-meta">@PostMapping(&quot;/sub&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;删除购物车中一个商品&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;删除购物车中一个商品，商品：&#123;&#125;&quot;</span>, shoppingCartDTO);<br>    shoppingCartService.subShoppingCart(shoppingCartDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>ShoppingCartService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除购物车中一个商品</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">subShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>ShoppingCartServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除购物车中一个商品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subShoppingCart</span><span class="hljs-params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;<br>    <span class="hljs-type">ShoppingCart</span> <span class="hljs-variable">shoppingCart</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoppingCart</span>();<br>    BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);<br>    <span class="hljs-comment">//设置查询条件，查询当前登录用户的购物车数据</span><br>    shoppingCart.setUserId(BaseContext.getCurrentId());<br><br>    List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<br><br>    <span class="hljs-keyword">if</span>(list != <span class="hljs-literal">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        shoppingCart = list.get(<span class="hljs-number">0</span>);<br><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> shoppingCart.getNumber();<br>        <span class="hljs-keyword">if</span>(number == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//当前商品在购物车中的份数为1，直接删除当前记录</span><br>            shoppingCartMapper.deleteById(shoppingCart.getId());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当前商品在购物车中的份数不为1，修改份数即可</span><br>            shoppingCart.setNumber(shoppingCart.getNumber() - <span class="hljs-number">1</span>);<br>            shoppingCartMapper.updateNumberById(shoppingCart);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>ShoppingCartMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据id删除购物车数据</span><br><span class="hljs-meta">@Delete(&quot;delete from shopping_cart where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：接口开发（1）</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h2><h3 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h3><h4 id="产品原型"><a href="#产品原型" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E5%91%98%E5%B7%A5%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E5%91%98%E5%B7%A5%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><p>【注意】本项目约定：</p><p>管理端发出的请求，统一使用<code>/admin</code>作为前缀。</p><p>用户端发出的请求，统一使用<code>/user</code>作为前缀。</p><h4 id="数据库设计（employee表）"><a href="#数据库设计（employee表）" class="headerlink" title="数据库设计（employee表）"></a>数据库设计（employee表）</h4><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>姓名</td><td></td></tr><tr><td>username</td><td>varchar(32)</td><td>用户名</td><td>唯一</td></tr><tr><td>password</td><td>varchar(64)</td><td>密码</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>id_number</td><td>varchar(18)</td><td>身份证号</td><td></td></tr><tr><td>status</td><td>Int</td><td>账号状态</td><td>1正常 0锁定</td></tr><tr><td>create_time</td><td>Datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h4 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据新增员工接口设计对应的<code>DTO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<span class="hljs-comment">//sky-pojo工程</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<span class="hljs-comment">//序列化</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String phone;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String idNumber;<br>&#125;<br></code></pre></td></tr></table></figure><p>（1）注意：当前端提交的数据和实体类中对应的属性差别比较大时，建议使用<code>DTO</code>来封装数据。</p><p>使用<code>DTO</code>的好处：假设你数据库中定义了<code>User</code>类，包含用户名、密码、邮箱、手机号等等；当用户登录时一般只需要输入用户名和密码，那么传入服务端的用户名和密码就可以在<code>controller</code>层封装到<code>UserDto</code>实体类中。<code>DTO</code>解决了在客户端和服务器端之间传递大量数据的问题，但是客户端往往需要更细粒度的数据访问。</p><p><a href="https://blog.csdn.net/Kevinnsm/article/details/114998540">DTO数据传输对象详解_dto撖寡情-CSDN博客</a></p><p><a href="https://blog.csdn.net/Eddie_920/article/details/138580309">Spring Boot中的数据传输对象（DTO）_springboot dto-CSDN博客</a></p><p>（2）序列化<code>Serializable</code>：</p><p><a href="https://blog.csdn.net/weixin_44209555/article/details/107837108">Serializable是什么，为什么要实现Serializable接口？-CSDN博客</a></p><p>2.后端统一返回结果<code>Result</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.result;<span class="hljs-comment">//sky-common工程</span><br><br><span class="hljs-comment">//后端统一返回结果</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code; <span class="hljs-comment">//编码：1成功，0和其它数字为失败</span><br>    <span class="hljs-keyword">private</span> String msg; <span class="hljs-comment">//错误信息</span><br>    <span class="hljs-keyword">private</span> T data; <span class="hljs-comment">//数据</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;T&gt;();<br>        result.code = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T object)</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;T&gt;();<br>        result.data = object;<br>        result.code = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.msg = msg;<br>        result.code = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在<code>EmployeeController</code>中创建新增员工方法，接收前端提交的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//新增员工</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;新增员工&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;新增员工：&#123;&#125;&quot;</span>, employeeDTO);<br>    employeeService.save(employeeDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>EmployeeService</code>接口中声明新增员工方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//新增员工</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span>;<br></code></pre></td></tr></table></figure><p>5.在<code>EmployeeServiceImpl</code>中实现新增员工方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>    <span class="hljs-comment">//对象属性拷贝</span><br>    BeanUtils.copyProperties(employeeDTO, employee);<br>    <span class="hljs-comment">//设置账号的状态，默认正常状态，1表示正常，0表示锁定</span><br>    employee.setStatus(StatusConstant.ENABLE);<br>    <span class="hljs-comment">//设置密码，默认密码123456</span><br>    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));<br>    <span class="hljs-comment">//设置当前记录的创建时间和修改时间</span><br>    employee.setCreateTime(LocalDateTime.now());<br>    employee.setUpdateTime(LocalDateTime.now());<br>    <span class="hljs-comment">//设置当前记录创建人id和修改人id</span><br>    <span class="hljs-comment">// TODO 后期需要改为当前登录用户的id</span><br>    <span class="hljs-comment">//employee.setCreateUser(10L);</span><br>    <span class="hljs-comment">//employee.setUpdateUser(10L);</span><br>    employee.setCreateUser(BaseContext.getCurrentId());<br>    employee.setUpdateUser(BaseContext.getCurrentId());<br><br>    employeeMapper.insert(employee);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>BeanUtils.copyProperties</code>：<a href="https://blog.csdn.net/m0_51176516/article/details/138063329">Spring BeanUtils：灵活高效的JavaBean操作助手-CSDN博客</a></p><p>6.在<code>EmployeeMapper</code>中声明<code>insert</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//插入员工数据</span><br><span class="hljs-meta">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, status, create_time, update_time, create_user, update_user)&quot; +</span><br><span class="hljs-meta">        &quot;VALUES (#&#123;name&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;status&#125;, #&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><h5 id="处理已存在用户名异常"><a href="#处理已存在用户名异常" class="headerlink" title="处理已存在用户名异常"></a>处理已存在用户名异常</h5><p>通过全局异常处理器来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.handler;<span class="hljs-comment">//sky-server工程</span><br><br><span class="hljs-comment">//全局异常处理器，处理项目中抛出的业务异常</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br><br>    <span class="hljs-comment">//处理SQL异常</span><br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(SQLIntegrityConstraintViolationException ex)</span>&#123;<br>        <span class="hljs-comment">//Duplicate entry &#x27;zhangsan&#x27; for key &#x27;employee.idx_username&#x27;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> ex.getMessage();<br>        <span class="hljs-keyword">if</span>(message.contains(<span class="hljs-string">&quot;Duplicate entry&quot;</span>))&#123;<br>            String[] split = message.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">2</span>];<span class="hljs-comment">//第三个单词为username</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> username + MessageConstant.ALREADY_EXISTS;<br>            <span class="hljs-keyword">return</span> Result.error(msg);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="设置创建人id和修改人id"><a href="#设置创建人id和修改人id" class="headerlink" title="设置创建人id和修改人id"></a>设置创建人id和修改人id</h5><p>需要动态获取当前登录员工的<code>id</code>。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92.png"></p><p>员工登录成功后会生成<code>JWT</code>令牌并响应给前端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmployeeController</span><br><span class="hljs-comment">//登录成功后，生成jwt令牌</span><br>Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>claims.put(JwtClaimsConstant.EMP_ID, employee.getId());<br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtil.createJWT(<br>    jwtProperties.getAdminSecretKey(),<br>    jwtProperties.getAdminTtl(),<br>    claims);<br></code></pre></td></tr></table></figure><p>后续请求中，前端会携带<code>JWT</code>令牌，通过<code>JWT</code>令牌可以解析出当前登录员工<code>id</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//JwtTokenAdminInterceptor</span><br><span class="hljs-comment">//1、从请求头中获取令牌</span><br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());<br><br><span class="hljs-comment">//2、校验令牌</span><br><span class="hljs-keyword">try</span> &#123;<br>    log.info(<span class="hljs-string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);<br>    <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">empId</span> <span class="hljs-operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());<br>    log.info(<span class="hljs-string">&quot;当前员工id：&quot;</span>, empId);<br>    <span class="hljs-comment">//3、通过，放行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>    <span class="hljs-comment">//4、不通过，响应401状态码</span><br>    response.setStatus(<span class="hljs-number">401</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h6><p><code>ThreadLocal</code>并不是一个<code>Thread</code>，而是<code>Thread</code>的<strong>局部变量</strong>。</p><p><code>ThreadLocal</code><strong>为每个线程提供单独一份存储空间</strong>，具有<strong>线程隔离</strong>的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p><p><code>ThreadLocal</code>常用方法：</p><ul><li><code>public void set(T value)</code>：设置当前线程的线程局部变量的值。</li><li><code>public T get()</code>：返回当前线程所对应的线程局部变量的值。</li><li><code>public void remove()</code>：移除当前线程的线程局部变量。</li></ul><p>注意：客户端发送的<strong>每次请求</strong>，后端的<code>Tomcat</code>服务器都会<strong>分配一个单独的线程来处理请求</strong>。</p><p>参考链接：</p><p><a href="https://blog.csdn.net/u010445301/article/details/111322569">史上最全ThreadLocal详解（一）-CSDN博客</a></p><p><a href="https://www.mianshiya.com/question/1780933295064772609">Java 中的 ThreadLocal 是如何实现线程资源隔离的？ - 面试鸭 - 程序员求职面试刷题神器</a></p><p>Java四大引用：</p><p><a href="https://blog.csdn.net/qq_39192827/article/details/85611873">Java：强引用，软引用，弱引用和虚引用_强弱引用-CSDN博客</a></p><p>初始工程中已经封装了<code>ThreadLocal</code>操作的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.context;<span class="hljs-comment">//sky-common工程</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContext</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentId</span><span class="hljs-params">(Long id)</span> &#123;<br>        threadLocal.set(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">getCurrentId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeCurrentId</span><span class="hljs-params">()</span> &#123;<br>        threadLocal.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在拦截器中解析出当前登录员工<code>id</code>，并放入线程局部变量中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//sky-server工程：package com.sky.interceptor;</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//判断当前拦截到的是Controller的方法还是其他资源</span><br>    <span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>        <span class="hljs-comment">//当前拦截到的不是动态方法，直接放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//1、从请求头中获取令牌</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());<br><br>    <span class="hljs-comment">//2、校验令牌</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        log.info(<span class="hljs-string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">empId</span> <span class="hljs-operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());<br>        log.info(<span class="hljs-string">&quot;当前员工id：&quot;</span>, empId);<br>        BaseContext.setCurrentId(empId);<span class="hljs-comment">//添加这句代码即可！！！</span><br>        <span class="hljs-comment">//3、通过，放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        <span class="hljs-comment">//4、不通过，响应401状态码</span><br>        response.setStatus(<span class="hljs-number">401</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>Service</code>中获取线程局部变量中的值。</p><h4 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h4><p>1.通过接口文档测试。</p><p>由于<code>JWT</code>令牌校验失败，导致<code>EmployeeController</code>的<code>save</code>方法没有被调用。</p><p>解决办法：调用员工登录接口获得一个合法的<code>JWT</code>令牌，将合法的<code>JWT</code>令牌添加到全局参数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.interceptor;<span class="hljs-comment">//sky-server工程</span><br><br><span class="hljs-comment">//jwt令牌校验的拦截器</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenAdminInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtProperties jwtProperties;<br>    <br>    <span class="hljs-comment">//校验jwt</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//判断当前拦截到的是Controller的方法还是其他资源</span><br>        <span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>            <span class="hljs-comment">//当前拦截到的不是动态方法，直接放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//1、从请求头中获取令牌</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(jwtProperties.getAdminTokenName());<br><br>        <span class="hljs-comment">//2、校验令牌</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            log.info(<span class="hljs-string">&quot;jwt校验:&#123;&#125;&quot;</span>, token);<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtil.parseJWT(jwtProperties.getAdminSecretKey(), token);<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">empId</span> <span class="hljs-operator">=</span> Long.valueOf(claims.get(JwtClaimsConstant.EMP_ID).toString());<br>            log.info(<span class="hljs-string">&quot;当前员工id：&quot;</span>, empId);<br>            <span class="hljs-comment">//3、通过，放行</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//4、不通过，响应401状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.通过前后端联调测试。</p><p>注意：由于开发阶段前端和后端是并行开发的，后端完成某个功能后，此时前端对应的功能可能还没有开发完成，导致无法进行前后端联调测试。所以在开发阶段，后端测试主要以接口文档测试为主。</p><h3 id="员工分页查询"><a href="#员工分页查询" class="headerlink" title="员工分页查询"></a>员工分页查询</h3><h4 id="产品原型-1"><a href="#产品原型-1" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%91%98%E5%B7%A5%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%91%98%E5%B7%A5%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据分页查询接口设计对应的<code>DTO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<span class="hljs-comment">//sky-pojo工程</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeePageQueryDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//员工姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> page;<span class="hljs-comment">//页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<span class="hljs-comment">//每页显示记录数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.后面所有的分页查询，统一都封装成<code>PageResult</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.result;<br><br><span class="hljs-comment">//封装分页查询结果</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageResult</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> total; <span class="hljs-comment">//总记录数</span><br>    <span class="hljs-keyword">private</span> List records; <span class="hljs-comment">//当前页数据集合</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.员工信息分页查询后端返回的对象类型为：<code>Result&lt;PageResult&gt;</code>。根据接口定义创建分页查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//员工分页查询</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;员工分页查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;员工分页查询，参数为：&#123;&#125;&quot;</span>, employeePageQueryDTO);<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> employeeService.pageQuery(employeePageQueryDTO);<br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>EmployeeService</code>接口中声明<code>pageQuery</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//员工分页查询</span><br>PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>5.在<code>EmployeeServiceImpl</code>中实现<code>pageQuery</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//员工分页查询</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;<br>    <span class="hljs-comment">//select * from employee limit 0,10</span><br>    <span class="hljs-comment">//开始分页查询</span><br>    PageHelper.startPage(employeePageQueryDTO.getPage(), employeePageQueryDTO.getPageSize());<br>    <span class="hljs-comment">//Page类是继承ArrayList的集合</span><br>    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> page.getTotal();<br>    List&lt;Employee&gt; records = page.getResult();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(total, records);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：此处使用<code>mybatis</code>的分页插件<code>PageHelper</code>来简化分页代码的开发。底层基于<code>mybatis</code>的拦截器实现。</p><p><strong>【PageHelp原理】</strong><code>PageHelp</code>底层是基于<code>ThreadLocal</code>实现的，通过把<code>page</code>（包含<code>pageNum</code>和<code>pageSize</code>）存储到存储空间，在进行分页查询之前，通过<code>ThreadLocal</code>把<code>pageNum</code>和<code>pageSize</code>取出，然后在<code>SQL</code>语句查询时动态的把<code>limit</code>关键字拼进去。</p><p>6.在<code>EmployeeMapper</code>中声明<code>pageQuery</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//分页查询</span><br>Page&lt;Employee&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>7.在<code>EmployeeMapper.xml</code>（路径：<code>sky-server/src/main/resources/mapper/EmployeeMapper.xml</code>）中编写<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.EmployeeMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span><br>        select * from employee<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>                and name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by create_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="操作时间字段显示错误"><a href="#操作时间字段显示错误" class="headerlink" title="操作时间字段显示错误"></a>操作时间字段显示错误</h5><p>解决方式：</p><p>方式一：在属性上加入注解，对日期进行格式化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-comment">//其他的属性省略了</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：在<code>WebMvcConfiguration</code>中扩展<code>Spring MVC</code>的消息转换器，统一对日期类型进行格式化处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.config;<span class="hljs-comment">//sky-server工程</span><br><br><span class="hljs-comment">//配置类，注册web层相关组件</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-comment">//扩展Spring MVC框架的消息转换器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;扩展消息转换器&quot;</span>);<br>        <span class="hljs-comment">//创建消息转换器对象</span><br>        <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>();<br>        <span class="hljs-comment">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span><br>        converter.setObjectMapper(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonObjectMapper</span>());<br>        <span class="hljs-comment">//将自己的消息转换器加入容器中，设置索引0，表示该消息转化器顺序排在第一位，优先使用</span><br>        converters.add(<span class="hljs-number">0</span>, converter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【补充】</p><p>1.<code>@DateTimeFormat</code>和<code>@JsonFormat</code>。</p><p>参考链接：</p><p><a href="https://blog.csdn.net/zhuzicc/article/details/106529485">@JsonFormat 和 @DateTimeFormat 时间格式化注解详解（不看血亏）_jsonformat注解-CSDN博客</a></p><p><a href="https://blog.csdn.net/zhuzicc/article/details/127956849">Spring @DateTimeFormat日期格式化时注解浅析分享_datetimeformatter注解用法-CSDN博客</a></p><p>总结：<code>@DateTimeFormat</code>只是规定了前端传给后端的时间格式，但是<code>@JsonFormat</code>才能控制前端如何显示时间。</p><p>2.消息转换器</p><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_51033936/article/details/128172420">一步到位 SpringBoot 序列化与消息转换器 (你需要的这里都有)_objectmapper和messageconverter的关系与区别-CSDN博客</a></p><p><a href="https://blog.csdn.net/ylsace/article/details/132394490">Spring MVC 消息转换器_springmvc消息转换器-CSDN博客</a></p><p><a href="https://blog.csdn.net/o0way0o/article/details/135320565">WebMvcConfigurer和WebMvcConfigurationSupport（MVC配置）-CSDN博客</a></p><p><a href="https://blog.csdn.net/u014390502/article/details/136573371">重学SpringBoot3-WebMvcAutoConfiguration类-CSDN博客</a></p><p><code>@DateTimeFormat</code>：当从<code>requestParam</code>中获取<code>string</code>参数并需要转化为<code>Date</code>类型时，会根据此注解的参数<code>pattern</code>的格式进行转化。</p><p><code>@JsonFormat</code>：当从请求体中获取<code>json</code>字符序列，需要反序列化为对象时，时间类型会按照这个注解的属性内容进行处理。</p><p>这两个注解需要加在实体类的对应字段上即可。</p><p>3.自定义序列化</p><p>参考链接：</p><p><a href="https://blog.csdn.net/TM007_/article/details/136041820">【自定义序列化器】⭐️通过继承JsonSerializer和实现WebMvcConfigurer类完成自定义序列化_webmvcconfigurer 自定义jackson-CSDN博客</a></p><p><a href="https://blog.csdn.net/huang714/article/details/142456609">SpringBoot中Jackson实现自定义序列化和反序列化总结_jackson 自定义反序列化-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/2398487">实现自定义序列化和反序列化控制的5种方式-腾讯云开发者社区-腾讯云</a></p><h3 id="启用禁用员工账号"><a href="#启用禁用员工账号" class="headerlink" title="启用禁用员工账号"></a>启用禁用员工账号</h3><h4 id="产品原型-2"><a href="#产品原型-2" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%90%AF%E7%94%A8%E7%A6%81%E7%94%A8%E5%91%98%E5%B7%A5%E8%B4%A6%E5%8F%B7%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ol><li>可以对状态为“启用” 的员工账号进行“禁用”操作。</li><li>可以对状态为“禁用”的员工账号进行“启用”操作。</li><li>状态为“禁用”的员工账号不能登录系统。</li></ol><h4 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%90%AF%E7%94%A8%E7%A6%81%E7%94%A8%E5%91%98%E5%B7%A5%E8%B4%A6%E5%8F%B7%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据接口设计中的请求参数形式对应的在<code>EmployeeController</code>中创建启用禁用员工账号的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//启用禁用员工账号</span><br><span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;启用禁用员工账号：&#123;&#125;，&#123;&#125;&quot;</span>, status, id);<br>    employeeService.startOrStop(status, id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>EmployeeService</code>接口中声明启用禁用员工账号的业务方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//启用禁用员工账号</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>EmployeeServiceImpl</code>中实现启用禁用员工账号的业务方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//启用禁用员工账号</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>    <span class="hljs-comment">//update employee set status = ? where id = ?</span><br>    <span class="hljs-comment">//法一：</span><br>    <span class="hljs-comment">/*        Employee employee = new Employee();</span><br><span class="hljs-comment">        employee.setStatus(status);</span><br><span class="hljs-comment">        employee.setId(id);*/</span><br><br>    <span class="hljs-comment">//法二：</span><br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> Employee.builder()<br>        .status(status)<br>        .id(id)<br>        .build();<br>    employeeMapper.update(employee);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>4.在<code>EmployeeMapper</code>接口中声明<code>update</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据主键动态修改属性</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><p>5.在<code>EmployeeMapper.xml</code>中编写<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Employee&quot;</span>&gt;</span><br>    -- parameterType可以省略。可以只写Employee，不用写上包名。<br>    -- 因为配置文件设置mybatis: type-aliases-package: com.sky.entity 整体扫描了这个包，<br>    -- Employee就在这个包里面，就统一扫到为这些实体创建了别名，所以可以只写别名Employee，不用写完整的包名<br>    update employee<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username = #&#123;username&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span>password = #&#123;password&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null&quot;</span>&gt;</span>sex = #&#123;sex&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;idNumber != null&quot;</span>&gt;</span>id_Number = #&#123;idNumber&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span>update_Time = #&#123;updateTime&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateUser != null&quot;</span>&gt;</span>update_User = #&#123;updateUser&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编辑员工"><a href="#编辑员工" class="headerlink" title="编辑员工"></a>编辑员工</h3><h4 id="产品原型-3"><a href="#产品原型-3" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E7%BC%96%E8%BE%91%E5%91%98%E5%B7%A5%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-3"><a href="#接口设计-3" class="headerlink" title="接口设计"></a>接口设计</h4><p>编辑员工功能涉及到两个接口：</p><p>1.根据id查询员工信息。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E7%BC%96%E8%BE%91%E5%91%98%E5%B7%A5%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AEid%E6%9F%A5%E8%AF%A2%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%EF%BC%89.png"></p><p>2.编辑员工信息。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E7%BC%96%E8%BE%91%E5%91%98%E5%B7%A5%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%BC%96%E8%BE%91%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%EF%BC%89.png"></p><h4 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.在<code>EmployeeController</code>中创建<code>getById</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询员工信息</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;Employee&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;根据id查询员工信息：&#123;&#125;&quot;</span>, id);<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeService.getById(id);<br>    <span class="hljs-keyword">return</span> Result.success(employee);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>EmployeeService</code>接口中声明<code>getById</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询员工信息</span><br>Employee <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>EmployeeServiceImpl</code>中实现<code>getById</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询员工信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeMapper.getById(id);<br>    employee.setPassword(<span class="hljs-string">&quot;****&quot;</span>);<span class="hljs-comment">//加密密码，加强安全性</span><br>    <span class="hljs-keyword">return</span> employee;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>EmployeeMapper</code>接口中声明<code>getById</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询员工信息</span><br><span class="hljs-meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span><br>Employee <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>5.在<code>EmployeeController</code>中创建<code>update</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//编辑员工信息</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;编辑员工信息&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EmployeeDTO employeeDTO)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;编辑员工信息：&#123;&#125;&quot;</span>, employeeDTO);<br>    employeeService.update(employeeDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>6.在<code>EmployeeService</code>接口中声明<code>update</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//编辑员工信息</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span>;<br></code></pre></td></tr></table></figure><p>7.在<code>EmployeeServiceImpl</code>中实现<code>update</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//编辑员工信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span> &#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>    BeanUtils.copyProperties(employeeDTO, employee);<br>    employee.setUpdateTime(LocalDateTime.now());<br>    employee.setUpdateUser(BaseContext.getCurrentId());<br>    employeeMapper.update(employee);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分类模块"><a href="#分类模块" class="headerlink" title="分类模块"></a>分类模块</h2><h3 id="产品原型-4"><a href="#产品原型-4" class="headerlink" title="产品原型"></a>产品原型</h3><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9D%97%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="业务规则"><a href="#业务规则" class="headerlink" title="业务规则"></a>业务规则</h4><ul><li>分类名称必须是唯一的。</li><li>分类按照类型可以分为菜品分类和套餐分类。</li><li>新添加的分类状态默认为“禁用”。</li></ul><h3 id="接口设计-4"><a href="#接口设计-4" class="headerlink" title="接口设计"></a>接口设计</h3><ul><li>新增分类</li><li>分类分页查询</li><li>根据id删除分类</li><li>修改分类</li><li>启用禁用分类</li><li>根据类型查询分类</li></ul><h3 id="数据库设计（category表）"><a href="#数据库设计（category表）" class="headerlink" title="数据库设计（category表）"></a>数据库设计（category表）</h3><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>分类名称</td><td>唯一</td></tr><tr><td>type</td><td>int</td><td>分类类型</td><td>1菜品分类 2套餐分类</td></tr><tr><td>sort</td><td>int</td><td>排序字段</td><td>用于分类数据的排序</td></tr><tr><td>status</td><td>int</td><td>状态</td><td>1启用 0禁用</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h3 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h3><p>1.<code>CategoryController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-comment">//分类管理</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/category&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;分类相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryService categoryService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CategoryDTO categoryDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;新增分类：&#123;&#125;&quot;</span>, categoryDTO);<br>        categoryService.save(categoryDTO);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分类分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;分类分页查询&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;分页查询：&#123;&#125;&quot;</span>, categoryPageQueryDTO);<br>        <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> categoryService.pageQuery(categoryPageQueryDTO);<br>        <span class="hljs-keyword">return</span> Result.success(pageResult);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DeleteMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;删除分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;删除分类：&#123;&#125;&quot;</span>, id);<br>        categoryService.deleteById(id);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;修改分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CategoryDTO categoryDTO)</span>&#123;<br>        categoryService.update(categoryDTO);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启用、禁用分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;启用禁用分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long id)</span>&#123;<br>        categoryService.startOrStop(status,id);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类型查询分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据类型查询分类&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;Category&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer type)</span>&#123;<br>        List&lt;Category&gt; list = categoryService.list(type);<br>        <span class="hljs-keyword">return</span> Result.success(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>CategoryMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CategoryMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> category</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Insert(&quot;insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)&quot; +</span><br><span class="hljs-meta">            &quot; VALUES&quot; +</span><br><span class="hljs-meta">            &quot; (#&#123;type&#125;, #&#123;name&#125;, #&#123;sort&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Category category)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Page&lt;Category&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Delete(&quot;delete from category where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id修改分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> category</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Category category)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类型查询分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Category&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer type)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>DishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span><br>    Integer <span class="hljs-title function_">countByCategoryId</span><span class="hljs-params">(Long categoryId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SetmealMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询套餐的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select count(id) from setmeal where category_id = #&#123;categoryId&#125;&quot;)</span><br>    Integer <span class="hljs-title function_">countByCategoryId</span><span class="hljs-params">(Long id)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5.<code>CategoryService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CategoryService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(CategoryDTO categoryDTO)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(CategoryDTO categoryDTO)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启用、禁用分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类型查询分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Category&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer type)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.<code>CategoryServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-comment">//分类业务层</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CategoryService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryMapper categoryMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(CategoryDTO categoryDTO)</span> &#123;<br>        <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Category</span>();<br>        <span class="hljs-comment">//属性拷贝</span><br>        BeanUtils.copyProperties(categoryDTO, category);<br><br>        <span class="hljs-comment">//分类状态默认为禁用状态0</span><br>        category.setStatus(StatusConstant.DISABLE);<br><br>        <span class="hljs-comment">//设置创建时间、修改时间、创建人、修改人</span><br>        category.setCreateTime(LocalDateTime.now());<br>        category.setUpdateTime(LocalDateTime.now());<br>        category.setCreateUser(BaseContext.getCurrentId());<br>        category.setUpdateUser(BaseContext.getCurrentId());<br><br>        categoryMapper.insert(category);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryPageQueryDTO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;<br>        PageHelper.startPage(categoryPageQueryDTO.getPage(),categoryPageQueryDTO.getPageSize());<br>        <span class="hljs-comment">//下一条sql进行分页，自动加入limit关键字分页</span><br>        Page&lt;Category&gt; page = categoryMapper.pageQuery(categoryPageQueryDTO);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), page.getResult());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id删除分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">//查询当前分类是否关联了菜品，如果关联了就抛出业务异常</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> dishMapper.countByCategoryId(id);<br>        <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//当前分类下有菜品，不能删除</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.CATEGORY_BE_RELATED_BY_DISH);<br>        &#125;<br><br>        <span class="hljs-comment">//查询当前分类是否关联了套餐，如果关联了就抛出业务异常</span><br>        count = setmealMapper.countByCategoryId(id);<br>        <span class="hljs-keyword">if</span>(count &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//当前分类下有菜品，不能删除</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.CATEGORY_BE_RELATED_BY_SETMEAL);<br>        &#125;<br><br>        <span class="hljs-comment">//删除分类数据</span><br>        categoryMapper.deleteById(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryDTO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(CategoryDTO categoryDTO)</span> &#123;<br>        <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Category</span>();<br>        BeanUtils.copyProperties(categoryDTO,category);<br><br>        <span class="hljs-comment">//设置修改时间、修改人</span><br>        category.setUpdateTime(LocalDateTime.now());<br>        category.setUpdateUser(BaseContext.getCurrentId());<br><br>        categoryMapper.update(category);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启用、禁用分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>        <span class="hljs-type">Category</span> <span class="hljs-variable">category</span> <span class="hljs-operator">=</span> Category.builder()<br>                .id(id)<br>                .status(status)<br>                .updateTime(LocalDateTime.now())<br>                .updateUser(BaseContext.getCurrentId())<br>                .build();<br>        categoryMapper.update(category);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类型查询分类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Category&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Integer type)</span> &#123;<br>        <span class="hljs-keyword">return</span> categoryMapper.list(type);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.<code>CategoryMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.CategoryMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.entity.Category&quot;</span>&gt;</span><br>        select * from category<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null&quot;</span>&gt;</span><br>                and type = #&#123;type&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by sort asc , create_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Category&quot;</span>&gt;</span><br>        update category<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null&quot;</span>&gt;</span><br>                type = #&#123;type&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                name = #&#123;name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sort != null&quot;</span>&gt;</span><br>                sort = #&#123;sort&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                status = #&#123;status&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>                update_time = #&#123;updateTime&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateUser != null&quot;</span>&gt;</span><br>                update_user = #&#123;updateUser&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Category&quot;</span>&gt;</span><br>        select * from category<br>        where status = 1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null&quot;</span>&gt;</span><br>            and type = #&#123;type&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        order by sort asc,create_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h2><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>业务表中的公共字段：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td></tr></tbody></table><p>公共代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//设置当前记录的创建时间、修改时间、创建人、修改人</span><br>category.setCreateTime(LocalDateTime.now());<br>category.setUpdateTime(LocalDateTime.now());<br>category.setCreateUser(BaseContext.getCurrentId());<br>category.setUpdateUser(BaseContext.getCurrentId());<br></code></pre></td></tr></table></figure><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>操作类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td><td>insert</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td><td>insert</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td><td>insert、update</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td><td>insert、update</td></tr></tbody></table><ul><li>自定义注解<code>AutoFill</code>，用于标识需要进行公共字段自动填充的方法。</li><li>自定义切面类<code>AutoFillAspect</code>，统一拦截加入了<code>AutoFill</code>注解的方法，通过反射为公共字段赋值。</li><li>在<code>Mapper</code>的方法上加入<code>AutoFill</code>注解。</li></ul><p>技术点：枚举、注解、<code>AOP</code>、反射。</p><h4 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.自定义注解<code>AutoFill</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.annotation;<br><br><span class="hljs-comment">//自定义注解，用于标识某个方法需要进行功能字段自动填充处理</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoFill &#123;<br>    <span class="hljs-comment">//数据库操作类型：UPDATE INSERT</span><br>    OperationType <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.自定义切面<code>AutoFillAspect</code>，完善自定义切面<code>AutoFillAspect</code>的<code>autoFill</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.aspect;<br><br><span class="hljs-comment">//自定义切面，实现公共字段自动填充处理逻辑</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoFillAspect</span> &#123;<br>    <span class="hljs-comment">//切入点</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFillPointCut</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//前置通知，在通知中进行公共字段的赋值</span><br>    <span class="hljs-meta">@Before(&quot;autoFillPointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFill</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始进行公共字段自动填充&quot;</span>);<br><br>        <span class="hljs-comment">//获取到当前被拦截的方法上的数据库操作类型</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="hljs-comment">//方法签名对象</span><br>        <span class="hljs-type">AutoFill</span> <span class="hljs-variable">autoFill</span> <span class="hljs-operator">=</span> methodSignature.getMethod().getAnnotation(AutoFill.class);<span class="hljs-comment">//获得方法上的注解对象</span><br>        <span class="hljs-type">OperationType</span> <span class="hljs-variable">operationType</span> <span class="hljs-operator">=</span> autoFill.value();<span class="hljs-comment">//获得数据库操作类型</span><br><br>        <span class="hljs-comment">//获取到当前被拦截的方法的参数--实体对象</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">if</span>(args == <span class="hljs-literal">null</span> || args.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<span class="hljs-comment">//约定传进来的第一个参数就是Employee对象</span><br><br>        <span class="hljs-comment">//准备赋值的数据</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">currentId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><br>        <span class="hljs-comment">//根据当前不同的操作类型，为对应的属性通过反射来赋值</span><br>        <span class="hljs-keyword">if</span>(operationType == OperationType.INSERT) &#123;<br>            <span class="hljs-comment">//为4个公共字段赋值</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateTime</span> <span class="hljs-operator">=</span> entity.getClass().getMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateUser</span> <span class="hljs-operator">=</span> entity.getClass().getMethod(AutoFillConstant.SET_CREATE_USER, Long.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br>                <span class="hljs-comment">//通过反射为对象属性赋值</span><br>                setCreateTime.invoke(entity, now);<br>                setCreateUser.invoke(entity, currentId);<br>                setUpdateTime.invoke(entity, now);<br>                setUpdateUser.invoke(entity, currentId);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(operationType == OperationType.UPDATE) &#123;<br>            <span class="hljs-comment">//为2个公共字段赋值</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br>                <span class="hljs-comment">//通过反射为对象属性赋值</span><br>                setUpdateTime.invoke(entity, now);<br>                setUpdateUser.invoke(entity, currentId);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在<code>Mapper</code>接口的方法上加入<code>AutoFill</code>注解。（<code>CategoryMapper.java</code>和<code>EmployeeMapper.java</code>的插入和更新操作都需要添加<code>AutoFill</code>注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//插入员工数据</span><br><span class="hljs-meta">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, status, create_time, update_time, create_user, update_user)&quot; +</span><br><span class="hljs-meta">        &quot;VALUES (#&#123;name&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;status&#125;, #&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span><br><span class="hljs-meta">@AutoFill(value = OperationType.INSERT)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Employee employee)</span>;<br><br><span class="hljs-comment">//根据主键动态修改属性</span><br><span class="hljs-meta">@AutoFill(value = OperationType.UPDATE)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><p>4.将业务层为公共字段赋值的代码注释掉。</p><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><h4 id="产品原型-5"><a href="#产品原型-5" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%93%81%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ol><li>菜品名称必须是唯一的。</li><li>菜品必须属于某个分类下，不能单独存在。</li><li>新增菜品时可以根据情况选择菜品的口味。</li><li>每个菜品必须对应一张图片。</li></ol><h4 id="接口设计-5"><a href="#接口设计-5" class="headerlink" title="接口设计"></a>接口设计</h4><h5 id="根据类型查询分类（已完成）"><a href="#根据类型查询分类（已完成）" class="headerlink" title="根据类型查询分类（已完成）"></a>根据类型查询分类（已完成）</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9F%A5%E8%AF%A2%E5%88%86%E7%B1%BB%EF%BC%89.png"></p><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%89.png"></p><h5 id="新增菜品-1"><a href="#新增菜品-1" class="headerlink" title="新增菜品"></a>新增菜品</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%93%81%EF%BC%89.png"></p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><h5 id="dish菜品表"><a href="#dish菜品表" class="headerlink" title="dish菜品表"></a>dish菜品表</h5><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>菜品名称</td><td>唯一</td></tr><tr><td>category_id</td><td>bigint</td><td>分类id</td><td>逻辑外键</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>菜品价格</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>description</td><td>varchar(255)</td><td>菜品描述</td><td></td></tr><tr><td>status</td><td>int</td><td>售卖状态</td><td>1起售 0停售</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h5 id="dish-flavor口味表"><a href="#dish-flavor口味表" class="headerlink" title="dish_flavor口味表"></a>dish_flavor口味表</h5><table><thead><tr><th><strong>字段名</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>name</td><td>varchar(32)</td><td>口味名称</td><td></td></tr><tr><td>value</td><td>varchar(255)</td><td>口味值</td><td></td></tr></tbody></table><h4 id="代码开发-6"><a href="#代码开发-6" class="headerlink" title="代码开发"></a>代码开发</h4><h5 id="文件上传接口"><a href="#文件上传接口" class="headerlink" title="文件上传接口"></a>文件上传接口</h5><p><code>application-dev.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">alioss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">oss-cn-hangzhou.aliyuncs.com</span><br>    <span class="hljs-attr">access-key-id:</span> <br>    <span class="hljs-attr">access-key-secret:</span> <br>    <span class="hljs-attr">bucket-name:</span> <span class="hljs-string">srr-web-tlias</span><br></code></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">alioss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">$&#123;sky.alioss.endpoint&#125;</span><br>    <span class="hljs-attr">access-key-id:</span> <span class="hljs-string">$&#123;sky.alioss.access-key-id&#125;</span><br>    <span class="hljs-attr">access-key-secret:</span> <span class="hljs-string">$&#123;sky.alioss.access-key-secret&#125;</span><br>    <span class="hljs-attr">bucket-name:</span> <span class="hljs-string">$&#123;sky.alioss.bucket-name&#125;</span><br></code></pre></td></tr></table></figure><p><code>OssConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-comment">//配置类，用于创建AliOssUtil对象</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span> <span class="hljs-comment">//保证整个spring容器里面只有一个AliOssUtil对象</span><br>    <span class="hljs-keyword">public</span> AliOssUtil <span class="hljs-title function_">aliOssUtil</span><span class="hljs-params">(AliOssProperties aliOssProperties)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始创建阿里云文件上传工具类对象：&#123;&#125;&quot;</span>, aliOssProperties);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AliOssUtil</span>(aliOssProperties.getEndpoint(),<br>                aliOssProperties.getAccessKeyId(),<br>                aliOssProperties.getAccessKeySecret(),<br>                aliOssProperties.getBucketName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CommonController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-comment">//通用接口</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/common&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;通用接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOssUtil aliOssUtil;<br>    <span class="hljs-comment">//文件上传</span><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;文件上传&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;文件上传：&#123;&#125;&quot;</span>, file);<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//原始文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>            <span class="hljs-comment">//获取原始文件名的后缀</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>            <span class="hljs-comment">//构造新文件名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + extension;<br>            <span class="hljs-comment">//文件的请求路径</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> aliOssUtil.upload(file.getBytes(), objectName);<br>            <span class="hljs-keyword">return</span> Result.success(filePath);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            log.error(<span class="hljs-string">&quot;文件上传失败：&#123;&#125;&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="新增菜品接口"><a href="#新增菜品接口" class="headerlink" title="新增菜品接口"></a>新增菜品接口</h5><p>1.根据新增菜品接口设计对应的<code>DTO</code>：<code>DishDTO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">//菜品名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//菜品分类id</span><br>    <span class="hljs-keyword">private</span> Long categoryId;<br>    <span class="hljs-comment">//菜品价格</span><br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-comment">//图片</span><br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-comment">//描述信息</span><br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-comment">//0 停售 1 起售</span><br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-comment">//口味</span><br>    <span class="hljs-keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>DishController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-comment">//菜品管理</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/dish&quot;)</span><br><span class="hljs-meta">@Api(&quot;菜品相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishService dishService;<br>    <span class="hljs-comment">//新增菜品</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增菜品&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;新增菜品：&#123;&#125;&quot;</span>,dishDTO);<br>        dishService.saveWithFlavor(dishDTO);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>DishService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishService</span> &#123;<br>    <span class="hljs-comment">//新增菜品和对应的口味</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启注解方式的事务管理</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DishService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishMapper dishMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DishFlavorMapper dishFlavorMapper;<br>    <span class="hljs-comment">//新增菜品和对应的口味</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//设计多个数据表的操作，使用事务注解保证数据的一致性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span> &#123;<br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>        BeanUtils.copyProperties(dishDTO, dish);<br>        <span class="hljs-comment">//向菜品表插入1条数据</span><br>        dishMapper.insert(dish);<br><br>        <span class="hljs-comment">//获取insert语句生成的主键值</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">dishId</span> <span class="hljs-operator">=</span> dish.getId();<br><br>        List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();<br>        <span class="hljs-keyword">if</span>(flavors != <span class="hljs-literal">null</span> &amp;&amp; flavors.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            flavors.forEach(dishFlavor -&gt; &#123;<span class="hljs-comment">//设置每个口味对应的菜品的id</span><br>                dishFlavor.setDishId(dishId);<br>            &#125;);<br>            <span class="hljs-comment">//向口味表插入n条数据</span><br>            dishFlavorMapper.insertBatch(flavors);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.<code>DishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据分类id查询菜品数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> categoryId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span><br>    Integer <span class="hljs-title function_">countByCategoryId</span><span class="hljs-params">(Long categoryId)</span>;<br><br>    <span class="hljs-comment">//插入菜品数据</span><br>    <span class="hljs-meta">@AutoFill(value = OperationType.INSERT)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Dish dish)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.DishMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    useGeneratedKeys:true 表示获取这条语句insert语句执行后生成的主键值</span><br><span class="hljs-comment">    keyProperty=&quot;id&quot; 表示将主键值赋给传进来的对象的id属性</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into dish (status, name, category_id, price, image, description, create_time, update_time, create_user,update_user)<br>        values (#&#123;status&#125;, #&#123;name&#125;, #&#123;categoryId&#125;, #&#123;price&#125;, #&#123;image&#125;, #&#123;description&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,#&#123;createUser&#125;, #&#123;updateUser&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.<code>DishFlavorMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishFlavorMapper</span> &#123;<br>    <span class="hljs-comment">//批量插入口味数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;DishFlavor&gt; flavors)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span>&gt;</span><br>        insert into dish_flavor (dish_id, name, value) values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;flavors&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;dishFlavor&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;dishFlavor.dishId&#125;,#&#123;dishFlavor.name&#125;,#&#123;dishFlavor.value&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="菜品分页查询"><a href="#菜品分页查询" class="headerlink" title="菜品分页查询"></a>菜品分页查询</h3><h4 id="产品原型-6"><a href="#产品原型-6" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E8%8F%9C%E5%93%81%E5%88%86%E9%A1%B5%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ol><li>根据页码展示菜品信息。</li><li>每页展示10条数据。</li><li>分页查询时可以根据需要输入菜品名称、菜品分类、菜品状态进行查询。</li></ol><h4 id="接口设计-6"><a href="#接口设计-6" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E8%8F%9C%E5%93%81%E5%88%86%E9%A1%B5%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-7"><a href="#代码开发-7" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据菜品分页查询接口定义设计对应的<code>DTO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.dto;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishPageQueryDTO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> page;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageSize;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//分类id</span><br>    <span class="hljs-keyword">private</span> Integer categoryId;<br>    <span class="hljs-comment">//状态 0表示禁用 1表示启用</span><br>    <span class="hljs-keyword">private</span> Integer status;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.根据菜品分页查询接口定义设计对应的<code>VO</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.vo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DishVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">//菜品名称</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//菜品分类id</span><br>    <span class="hljs-keyword">private</span> Long categoryId;<br>    <span class="hljs-comment">//菜品价格</span><br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-comment">//图片</span><br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-comment">//描述信息</span><br>    <span class="hljs-keyword">private</span> String description;<br>    <span class="hljs-comment">//0 停售 1 起售</span><br>    <span class="hljs-keyword">private</span> Integer status;<br>    <span class="hljs-comment">//更新时间</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>    <span class="hljs-comment">//分类名称</span><br>    <span class="hljs-keyword">private</span> String categoryName;<br>    <span class="hljs-comment">//菜品关联的口味</span><br>    <span class="hljs-keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//private Integer copies;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.根据接口定义创建<code>DishController</code>的<code>page</code>分页查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品分页查询</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;菜品分页查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;菜品分页查询：&#123;&#125;&quot;</span>,dishPageQueryDTO);<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> dishService.pageQuery(dishPageQueryDTO);<br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>DishService</code>中扩展分页查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品分页查询</span><br>PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>5.在<code>DishServiceImpl</code>中实现分页查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品分页查询</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span> &#123;<br>    PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());<br>    Page&lt;DishVO&gt; page = dishMapper.pageQuery(dishPageQueryDTO);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), page.getResult());<br>&#125;<br></code></pre></td></tr></table></figure><p>6.在<code>DishMapper</code>接口中声明<code>pageQuery</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品分页查询</span><br>Page&lt;DishVO&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(DishPageQueryDTO dishPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>7.在<code>DishMapper.xml</code>中编写<code>SQL</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.vo.DishVO&quot;</span>&gt;</span><br>    select d.*, c.name categoryName from dish d left outer join category c on d.category_id = c.id<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and d.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and d.category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and d.status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by d.create_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除菜品"><a href="#删除菜品" class="headerlink" title="删除菜品"></a>删除菜品</h3><h4 id="产品原型-7"><a href="#产品原型-7" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%A0%E9%99%A4%E8%8F%9C%E5%93%81%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ol><li>可以一次删除一个菜品，也可以批量删除菜品。</li><li>起售中的菜品不能删除。</li><li>被套餐关联的菜品不能删除。</li><li>删除菜品后，关联的口味数据也需要删除掉。</li></ol><h4 id="接口设计-7"><a href="#接口设计-7" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%A0%E9%99%A4%E8%8F%9C%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="数据库设计-1"><a href="#数据库设计-1" class="headerlink" title="数据库设计"></a>数据库设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%A0%E9%99%A4%E8%8F%9C%E5%93%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.png" alt="image-20241108112931152"></p><h4 id="代码开发-8"><a href="#代码开发-8" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.根据删除菜品的接口定义在<code>DishController</code>中创建方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品批量删除</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;菜品批量删除&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;菜品批量删除：&#123;&#125;&quot;</span>, ids);<br>    dishService.deleteBatch(ids);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.在<code>DishService</code>接口中声明<code>deleteBatch</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品批量删除</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span>;<br></code></pre></td></tr></table></figure><p>3.在<code>DishServiceImpl</code>中实现<code>deleteBatch</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品批量删除</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span> &#123;<br>    <span class="hljs-comment">//判断当前菜品是否能够删除：是否存在起售中的菜品</span><br>    <span class="hljs-keyword">for</span> (Long id : ids) &#123;<br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> dishMapper.getById(id);<br>        <span class="hljs-keyword">if</span>(dish.getStatus() == StatusConstant.ENABLE)&#123;<br>            <span class="hljs-comment">//当前菜品处于起售中，不能删除</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断当前菜品是否能够删除：是否被套餐关联</span><br>    List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);<br>    <span class="hljs-keyword">if</span>(setmealIds != <span class="hljs-literal">null</span> &amp;&amp; setmealIds.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//当前菜品被套餐关联了，不能删除</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);<br>    &#125;<br><br>    <span class="hljs-comment">//删除菜品表中的菜品数据</span><br>    <span class="hljs-comment">//方法一：</span><br>    <span class="hljs-comment">/*        for(Long id : ids)&#123;</span><br><span class="hljs-comment">            dishMapper.deleteById(id);</span><br><span class="hljs-comment">            //删除菜品关联的口味数据</span><br><span class="hljs-comment">            dishFlavorMapper.deleteByDishId(id);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>    <span class="hljs-comment">//方法二：</span><br>    <span class="hljs-comment">//根据菜品id集合批量删除菜品数据：delete from dish where id in (?,?,?)</span><br>    dishMapper.deleteByIds(ids);<br>    <span class="hljs-comment">//根据菜品id集合批量删除关联的口味数据：delete from dish_flavor where dish_id in (?,?,?)</span><br>    dishFlavorMapper.deleteByDishIds(ids);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>DishMapper</code>中声明<code>getById</code>方法，并配置<code>SQL</code>。在<code>DishMapper</code>中声明<code>deleteById</code>方法并配置<code>SQL</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据主键查询菜品</span><br><span class="hljs-meta">@Select(&quot;select * from dish where id = #&#123;id&#125;&quot;)</span><br>Dish <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-comment">//根据主键删除菜品数据</span><br><span class="hljs-meta">@Delete(&quot;delete from dish where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-comment">//根据菜品id集合批量删除菜品</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(List&lt;Long&gt; ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>    delete from dish where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.创建<code>SetmealDishMapper</code>，声明<code>getSetmealIdsByDishIds</code>方法，并在<code>xml</code>文件中编写<code>SQL</code>。在<code>DishFlavorMapper</code>中声明<code>deleteByDishId</code>方法并配置<code>SQL</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DishFlavorMapper</span> &#123;<br>    <span class="hljs-comment">//批量插入口味数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;DishFlavor&gt; flavors)</span>;<br><br>    <span class="hljs-comment">//根据菜品id删除对应的口味数据</span><br>    <span class="hljs-meta">@Delete(&quot;delete from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByDishId</span><span class="hljs-params">(Long id)</span>;<br><br>    <span class="hljs-comment">//根据菜品id集合批量删除关联的口味数据</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByDishIds</span><span class="hljs-params">(List&lt;Long&gt; dishIds)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span>&gt;</span><br>        insert into dish_flavor (dish_id, name, value) values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;flavors&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;dishFlavor&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;dishFlavor.dishId&#125;,#&#123;dishFlavor.name&#125;,#&#123;dishFlavor.value&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByDishIds&quot;</span>&gt;</span><br>        delete from dish_flavor where dish_id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;dishIds&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;dishId&quot;</span>&gt;</span><br>            #&#123;dishId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><h4 id="产品原型-8"><a href="#产品原型-8" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%93%81%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-8"><a href="#接口设计-8" class="headerlink" title="接口设计"></a>接口设计</h4><h5 id="根据id查询菜品"><a href="#根据id查询菜品" class="headerlink" title="根据id查询菜品"></a>根据id查询菜品</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AEid%E6%9F%A5%E8%AF%A2%E8%8F%9C%E5%93%81%EF%BC%89.png"></p><h5 id="根据类型查询分类（已实现）"><a href="#根据类型查询分类（已实现）" class="headerlink" title="根据类型查询分类（已实现）"></a>根据类型查询分类（已实现）</h5><h5 id="文件上传（已实现）"><a href="#文件上传（已实现）" class="headerlink" title="文件上传（已实现）"></a>文件上传（已实现）</h5><h5 id="修改菜品-1"><a href="#修改菜品-1" class="headerlink" title="修改菜品"></a>修改菜品</h5><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%93%81%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%93%81%EF%BC%89.png"></p><h4 id="代码开发-9"><a href="#代码开发-9" class="headerlink" title="代码开发"></a>代码开发</h4><h5 id="根据id查询菜品接口开发"><a href="#根据id查询菜品接口开发" class="headerlink" title="根据id查询菜品接口开发"></a>根据id查询菜品接口开发</h5><p>1.<code>DishController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询菜品</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;根据id查询菜品&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;DishVO&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;根据id查询菜品：&#123;&#125;&quot;</span>, id);<br>    <span class="hljs-type">DishVO</span> <span class="hljs-variable">dishVO</span> <span class="hljs-operator">=</span> dishService.getByIdWithFlavor(id);<br>    <span class="hljs-keyword">return</span> Result.success(dishVO);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>DishService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询菜品和对应的口味数据</span><br>DishVO <span class="hljs-title function_">getByIdWithFlavor</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>DishServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id查询菜品</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> DishVO <span class="hljs-title function_">getByIdWithFlavor</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">//根据id查询菜品数据</span><br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> dishMapper.getById(id);<br><br>    <span class="hljs-comment">//根据菜品id查询口味数据</span><br>    List&lt;DishFlavor&gt; dishFlavors = dishFlavorMapper.getByDishId(id);<br><br>    <span class="hljs-comment">//将查询到的数据封装到VO</span><br>    <span class="hljs-type">DishVO</span> <span class="hljs-variable">dishVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DishVO</span>();<br>    BeanUtils.copyProperties(dish, dishVO);<br>    dishVO.setFlavors(dishFlavors);<br>    <span class="hljs-comment">// 这里不需要给categoryName赋值，因为前端在点击修改时发送了http://localhost/api/category/list?type=1请求，</span><br>    <span class="hljs-comment">// 该请求会返回所有分类，前端通过categoryId即可得到categoryName进行回显</span><br>    <span class="hljs-keyword">return</span> dishVO;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishFlavorMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据菜品id查询对应的口味数据</span><br><span class="hljs-meta">@Select(&quot;select * from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span><br>List&lt;DishFlavor&gt; <span class="hljs-title function_">getByDishId</span><span class="hljs-params">(Long dishId)</span>;<br></code></pre></td></tr></table></figure><h5 id="修改菜品接口开发"><a href="#修改菜品接口开发" class="headerlink" title="修改菜品接口开发"></a>修改菜品接口开发</h5><p>1.<code>DishController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//修改菜品</span><br><span class="hljs-meta">@PutMapping()</span><br><span class="hljs-meta">@ApiOperation(&quot;修改菜品&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;修改菜品：&#123;&#125;&quot;</span>,dishDTO);<br>    dishService.updateWithFlavor(dishDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>DishService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id修改菜品基本信息和对应的口味信息</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>DishServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id修改菜品基本信息和对应的口味信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWithFlavor</span><span class="hljs-params">(DishDTO dishDTO)</span> &#123;<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>    BeanUtils.copyProperties(dishDTO, dish);<br>    <span class="hljs-comment">//修改菜品表基本信息</span><br>    dishMapper.update(dish);<br>    <span class="hljs-comment">//删除原有的口味数据</span><br>    dishFlavorMapper.deleteByDishId(dishDTO.getId());<br>    <span class="hljs-comment">//重新插入口味数据</span><br>    List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();<br>    <span class="hljs-keyword">if</span>(flavors != <span class="hljs-literal">null</span> &amp;&amp; flavors.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        flavors.forEach(dishFlavor -&gt; &#123;<span class="hljs-comment">//设置每个口味对应的菜品的id</span><br>            dishFlavor.setDishId(dishDTO.getId());<br>        &#125;);<br>        <span class="hljs-comment">//向口味表插入n条数据</span><br>        dishFlavorMapper.insertBatch(flavors);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id动态修改菜品数据</span><br><span class="hljs-meta">@AutoFill(value = OperationType.UPDATE)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>DishMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>    update dish<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            name = #&#123;name&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            category_id = #&#123;categoryId&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;price != null&quot;</span>&gt;</span><br>            price = #&#123;price&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span><br>            image = #&#123;image&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;description != null&quot;</span>&gt;</span><br>            description = #&#123;description&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            status = #&#123;status&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>            update_time = #&#123;updateTime&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateUser != null&quot;</span>&gt;</span><br>            update_user = #&#123;updateUser&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="菜品起售停售"><a href="#菜品起售停售" class="headerlink" title="菜品起售停售"></a>菜品起售停售</h3><h4 id="接口设计-9"><a href="#接口设计-9" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E8%8F%9C%E5%93%81%E8%B5%B7%E5%94%AE%E5%81%9C%E5%94%AE%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码开发-10"><a href="#代码开发-10" class="headerlink" title="代码开发"></a>代码开发</h4><p>1.<code>DishController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品起售停售</span><br><span class="hljs-meta">@PostMapping(&quot;status/&#123;status&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;菜品起售停售&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;菜品起售停售：&#123;&#125;，&#123;&#125;&quot;</span>,status, id);<br>    dishService.startOrStop(status, id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>DishService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品起售停售</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>DishServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//菜品起售停售</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>    <span class="hljs-comment">//菜品起售停售</span><br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> Dish.builder().id(id).status(status).build();<br>    dishMapper.update(dish);<br><br>    <span class="hljs-keyword">if</span>(status == StatusConstant.DISABLE)&#123;<br>        <span class="hljs-comment">// 如果是停售操作，还需要将包含当前菜品的套餐也停售</span><br>        List&lt;Long&gt; dishIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        dishIds.add(id);<br>        <span class="hljs-comment">// select setmeal_id from setmeal_dish where dish_id in (?,?,?)</span><br>        List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(dishIds);<br>        <span class="hljs-keyword">if</span>(setmealIds != <span class="hljs-literal">null</span> &amp;&amp; setmealIds.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(Long setmealId : setmealIds)&#123;<br>                <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> Setmeal.builder().id(setmealId).status(StatusConstant.DISABLE).build();<br>                setmealMapper.update(setmeal);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据id修改套餐</span><br><span class="hljs-meta">@AutoFill(value = OperationType.UPDATE)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Setmeal setmeal)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>SetmealMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sky.mapper.SetmealMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span>&gt;</span><br>        update setmeal<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                name = #&#123;name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>                category_id = #&#123;categoryId&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;price != null&quot;</span>&gt;</span><br>                price = #&#123;price&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                status = #&#123;status&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;description != null&quot;</span>&gt;</span><br>                description = #&#123;description&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span><br>                image = #&#123;image&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>                update_time = #&#123;updateTime&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateUser != null&quot;</span>&gt;</span><br>                update_user = #&#123;updateUser&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h2><h3 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h3><h4 id="产品原型-9"><a href="#产品原型-9" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E5%A5%97%E9%A4%90%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E4%B8%BB%E9%A1%B5%E9%9D%A2%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E5%A5%97%E9%A4%90%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%EF%BC%88%E6%B7%BB%E5%8A%A0%E8%8F%9C%E5%93%81%E9%A1%B5%E9%9D%A2%EF%BC%89.png"></p><p>业务规则：</p><ul><li>套餐名称唯一。</li><li>套餐必须属于某个分类。</li><li>套餐必须包含菜品。</li><li>名称、分类、价格、图片为必填项。</li><li>添加菜品窗口需要根据分类类型来展示菜品。</li><li>新增的套餐默认为停售状态。</li></ul><h4 id="接口设计-10"><a href="#接口设计-10" class="headerlink" title="接口设计"></a>接口设计</h4><ul><li>根据类型查询分类（已完成）。</li><li>根据分类<code>id</code>查询菜品。</li><li>图片上传（已完成）。</li><li>新增套餐。</li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E5%A5%97%E9%A4%90%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AE%E5%88%86%E7%B1%BBid%E6%9F%A5%E8%AF%A2%E8%8F%9C%E5%93%81%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E6%96%B0%E5%A2%9E%E5%A5%97%E9%A4%90%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%96%B0%E5%A2%9E%E5%A5%97%E9%A4%90%EF%BC%89.png"></p><h4 id="数据库设计-2"><a href="#数据库设计-2" class="headerlink" title="数据库设计"></a>数据库设计</h4><p><code>setmeal</code>表为套餐表，用于存储套餐的信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>套餐名称</td><td>唯一</td></tr><tr><td>category_id</td><td>bigint</td><td>分类id</td><td>逻辑外键</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>套餐价格</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>description</td><td>varchar(255)</td><td>套餐描述</td><td></td></tr><tr><td>status</td><td>int</td><td>售卖状态</td><td>1起售 0停售</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><p><code>setmeal_dish</code>表为套餐菜品关系表，用于存储套餐和菜品的关联关系。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>name</td><td>varchar(32)</td><td>菜品名称</td><td>冗余字段</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>菜品单价</td><td>冗余字段</td></tr><tr><td>copies</td><td>int</td><td>菜品份数</td><td></td></tr></tbody></table><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>DishController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据分类id查询菜品</span><br><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;根据分类id查询菜品：&#123;&#125;&quot;</span>,categoryId);<br>    List&lt;Dish&gt; list = dishService.list(categoryId);<br>    <span class="hljs-keyword">return</span> Result.success(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>DishService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据分类id查询菜品</span><br>List&lt;Dish&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>DishServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据分类id查询菜品</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Dish&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Long categoryId)</span> &#123;<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> Dish.builder().categoryId(categoryId).status(StatusConstant.ENABLE).build();<br>    List&lt;Dish&gt; list = dishMapper.list(dish);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据分类id查询菜品</span><br>List&lt;Dish&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Dish dish)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>DishMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Dish&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Dish&quot;</span>&gt;</span><br>    select * from dish<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by create_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.<code>SetmealController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/setmeal&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;套餐相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealService setmealService;<br><br>    <span class="hljs-comment">//新增套餐</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-meta">@ApiOperation(&quot;新增套餐&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SetmealDTO setmealDTO)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;新增套餐：&#123;&#125;&quot;</span>,setmealDTO);<br>        setmealService.saveWithDish(setmealDTO);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.<code>SetmealService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SetmealService</span> &#123;<br>    <span class="hljs-comment">//新增套餐</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithDish</span><span class="hljs-params">(SetmealDTO setmealDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8.<code>SetmealServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetmealServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SetmealService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealMapper setmealMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SetmealDishMapper setmealDishMapper;<br><br>    <span class="hljs-comment">//新增套餐，同时需要保存套餐和菜品的关联关系</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveWithDish</span><span class="hljs-params">(SetmealDTO setmealDTO)</span> &#123;<br>        <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>        BeanUtils.copyProperties(setmealDTO, setmeal);<br>        <span class="hljs-comment">//向套餐表插入数据</span><br>        setmealMapper.insert(setmeal);<br>        <span class="hljs-comment">//获取生成的套餐id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">setmealId</span> <span class="hljs-operator">=</span> setmeal.getId();<br><br>        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();<br>        setmealDishes.forEach(setmealDish -&gt; &#123;<br>            setmealDish.setSetmealId(setmealId);<br>        &#125;);<br>        setmealDishMapper.insertBatch(setmealDishes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新增套餐</span><br><span class="hljs-meta">@AutoFill(value = OperationType.INSERT)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Setmeal setmeal)</span>;<br></code></pre></td></tr></table></figure><p>10.<code>SetmealMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Setmeal&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into setmeal<br>    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)<br>    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,<br>    #&#123;createUser&#125;, #&#123;updateUser&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>11.<code>SetmealDishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量保存套餐和菜品的关联关系</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;SetmealDish&gt; setmealDishes)</span>;<br></code></pre></td></tr></table></figure><p>12.<code>SetmealDishMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>    insert into setmeal_dish<br>    (setmeal_id, dish_id, name, price, copies)<br>    values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;setmealDishes&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;sd&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        (#&#123;sd.setmealId&#125;, #&#123;sd.dishId&#125;, #&#123;sd.name&#125;, #&#123;sd.price&#125;, #&#123;sd.copies&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="套餐分页查询"><a href="#套餐分页查询" class="headerlink" title="套餐分页查询"></a>套餐分页查询</h3><h4 id="产品原型-10"><a href="#产品原型-10" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%A5%97%E9%A4%90%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>根据页码进行分页展示。</li><li>每页展示10条数据。</li><li>可以根据需要，按照套餐名称、分类、售卖状态进行查询。</li></ul><h4 id="接口设计-11"><a href="#接口设计-11" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%A5%97%E9%A4%90%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>SetmealController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询</span><br><span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;分页查询&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;PageResult&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;分页查询：&#123;&#125;&quot;</span>,setmealPageQueryDTO);<br>    <span class="hljs-type">PageResult</span> <span class="hljs-variable">pageResult</span> <span class="hljs-operator">=</span> setmealService.pageQuery(setmealPageQueryDTO);<br>    <span class="hljs-keyword">return</span> Result.success(pageResult);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>SetmealService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询</span><br>PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>SetmealServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;<br>    PageHelper.startPage(setmealPageQueryDTO.getPage(), setmealPageQueryDTO.getPageSize());<br>    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(page.getTotal(), page.getResult());<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询</span><br>Page&lt;SetmealVO&gt; <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>SetmealMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pageQuery&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span><br>    select s.*, c.name categoryName from setmeal s<br>    left join category c<br>    on s.category_id = c.id<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            and s.name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>            and s.status = #&#123;status&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;categoryId != null&quot;</span>&gt;</span><br>            and s.category_id = #&#123;categoryId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by s.create_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h3><h4 id="产品原型-11"><a href="#产品原型-11" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%A0%E9%99%A4%E5%A5%97%E9%A4%90%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>可以一次删除一个套餐，也可以批量删除套餐。</li><li>起售中的套餐不能删除。</li></ul><h4 id="接口设计-12"><a href="#接口设计-12" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%88%A0%E9%99%A4%E5%A5%97%E9%A4%90%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>SetmealController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量删除套餐</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;批量删除套餐&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;批量删除套餐：&#123;&#125;&quot;</span>, ids);<br>    setmealService.deleteBatch(ids);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>SetmealService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量删除套餐</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>SetmealServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//批量删除套餐</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(List&lt;Long&gt; ids)</span> &#123;<br>    ids.forEach(id -&gt; &#123;<br>        <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> setmealMapper.getById(id);<br>        <span class="hljs-keyword">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;<br>            <span class="hljs-comment">//起售中的套餐不能删除</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);<br>        &#125;<br>    &#125;);<br><br>    ids.forEach(setmealId -&gt; &#123;<br>        <span class="hljs-comment">//删除套餐表中的数据</span><br>        setmealMapper.deleteById(setmealId);<br>        <span class="hljs-comment">//删除套餐菜品关系表中的数据</span><br>        setmealDishMapper.deleteBySetmealId(setmealId);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>SetmealMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询套餐</span><br><span class="hljs-meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span><br>Setmeal <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-comment">//根据id删除套餐</span><br><span class="hljs-meta">@Delete(&quot;delete from setmeal where id = #&#123;setmealId&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><p>5.<code>SetmealDishMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据套餐id删除套餐和菜品的关联关系</span><br><span class="hljs-meta">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h3 id="修改套餐"><a href="#修改套餐" class="headerlink" title="修改套餐"></a>修改套餐</h3><h4 id="产品原型-12"><a href="#产品原型-12" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BF%AE%E6%94%B9%E5%A5%97%E9%A4%90%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h4 id="接口设计-13"><a href="#接口设计-13" class="headerlink" title="接口设计"></a>接口设计</h4><ul><li>根据<code>id</code>查询套餐。</li><li>根据类型查询分类（已完成）。</li><li>根据分类id查询菜品（已完成）。</li><li>图片上传（已完成）。</li><li>修改套餐。</li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BF%AE%E6%94%B9%E5%A5%97%E9%A4%90%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E6%A0%B9%E6%8D%AEid%E6%9F%A5%E8%AF%A2%E5%A5%97%E9%A4%90%EF%BC%89.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E4%BF%AE%E6%94%B9%E5%A5%97%E9%A4%90%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BF%AE%E6%94%B9%E5%A5%97%E9%A4%90%EF%BC%89.png"></p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>SetmealController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询套餐，用于修改页面回显数据</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;根据id查询套餐&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;SetmealVO&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;根据id查询套餐：&#123;&#125;&quot;</span>, id);<br>    <span class="hljs-type">SetmealVO</span> <span class="hljs-variable">setmealVO</span> <span class="hljs-operator">=</span> setmealService.getByIdWithDish(id);<br>    <span class="hljs-keyword">return</span> Result.success(setmealVO);<br>&#125;<br><br><span class="hljs-comment">//修改套餐</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;修改套餐&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SetmealDTO setmealDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;修改套餐：&#123;&#125;&quot;</span>,setmealDTO);<br>    setmealService.update(setmealDTO);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>SetmealService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询套餐</span><br>SetmealVO <span class="hljs-title function_">getByIdWithDish</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-comment">//修改套餐</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(SetmealDTO setmealDTO)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>SetmealServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SetmealVO <span class="hljs-title function_">getByIdWithDish</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> setmealMapper.getById(id);<br>    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);<br><br>    <span class="hljs-type">SetmealVO</span> <span class="hljs-variable">setmealVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetmealVO</span>();<br>    BeanUtils.copyProperties(setmeal, setmealVO);<br>    setmealVO.setSetmealDishes(setmealDishes);<br>    <span class="hljs-keyword">return</span> setmealVO;<br>&#125;<br><br><span class="hljs-comment">//修改套餐</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(SetmealDTO setmealDTO)</span> &#123;<br>    <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Setmeal</span>();<br>    BeanUtils.copyProperties(setmealDTO, setmeal);<br><br>    <span class="hljs-comment">//1、修改套餐表，执行update</span><br>    setmealMapper.update(setmeal);<br><br>    <span class="hljs-comment">//套餐id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">setmealId</span> <span class="hljs-operator">=</span> setmeal.getId();<br><br>    <span class="hljs-comment">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span><br>    setmealDishMapper.deleteBySetmealId(setmealId);<br><br>    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();<br>    setmealDishes.forEach(setmealDish -&gt; &#123;<br>        setmealDish.setSetmealId(setmealId);<br>    &#125;);<br>    <span class="hljs-comment">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span><br>    setmealDishMapper.insertBatch(setmealDishes);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>SetmealDishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据套餐id查询套餐和菜品的关联关系</span><br><span class="hljs-meta">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span><br>List&lt;SetmealDish&gt; <span class="hljs-title function_">getBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h3 id="起售停售套餐"><a href="#起售停售套餐" class="headerlink" title="起售停售套餐"></a>起售停售套餐</h3><h4 id="产品原型-13"><a href="#产品原型-13" class="headerlink" title="产品原型"></a>产品原型</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E8%B5%B7%E5%94%AE%E5%81%9C%E5%94%AE%E5%A5%97%E9%A4%90%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><p>业务规则：</p><ul><li>可以对状态为起售的套餐进行停售操作，可以对状态为停售的套餐进行起售操作。</li><li>起售的套餐可以展示在用户端，停售的套餐不能展示在用户端。</li><li>起售套餐时，如果套餐内包含停售的菜品，则不能起售。</li></ul><h4 id="接口设计-14"><a href="#接口设计-14" class="headerlink" title="接口设计"></a>接口设计</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E8%B5%B7%E5%94%AE%E5%81%9C%E5%94%AE%E5%A5%97%E9%A4%90%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.png"></p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>1.<code>SetmealController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//套餐起售停售</span><br><span class="hljs-meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span><br><span class="hljs-meta">@ApiOperation(&quot;套餐起售停售&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status, Long id)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;套餐起售停售：&#123;&#125;，&#123;&#125;&quot;</span>,status, id);<br>    setmealService.startOrStop(status, id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>SetmealService</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//套餐起售停售</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span>;<br></code></pre></td></tr></table></figure><p>3.<code>SetmealServiceImpl</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//套餐起售停售</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOrStop</span><span class="hljs-params">(Integer status, Long id)</span> &#123;<br>    <span class="hljs-comment">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span><br>    <span class="hljs-keyword">if</span>(status == StatusConstant.ENABLE)&#123;<br>        <span class="hljs-comment">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span><br>        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);<br>        <span class="hljs-keyword">if</span>(dishList != <span class="hljs-literal">null</span> &amp;&amp; dishList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            dishList.forEach(dish -&gt; &#123;<br>                <span class="hljs-keyword">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">Setmeal</span> <span class="hljs-variable">setmeal</span> <span class="hljs-operator">=</span> Setmeal.builder().id(id).status(status).build();<br>    setmealMapper.update(setmeal);<br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>DishMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据套餐id查询菜品</span><br><span class="hljs-meta">@Select(&quot;select d.* from dish d left join setmeal_dish s &quot; +</span><br><span class="hljs-meta">        &quot;on d.id = s.dish_id where s.setmeal_id = #&#123;setmealId&#125;&quot;)</span><br>List&lt;Dish&gt; <span class="hljs-title function_">getBySetmealId</span><span class="hljs-params">(Long setmealId)</span>;<br></code></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h3><h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><p><code>Redis</code>是一个基于内存的<code>key-value</code>结构数据库。</p><p>优点：基于<strong>内存</strong>存储，读写性能高。适合存储热点数据（热点商品、资讯、新闻）。企业应用广泛。</p><p>官网：<a href="https://redis.io/">https://redis.io</a></p><p>中文网：<a href="https://www.redis.net.cn/">https://www.redis.net.cn/</a></p><h4 id="Redis下载与安装"><a href="#Redis下载与安装" class="headerlink" title="Redis下载与安装"></a>Redis下载与安装</h4><p><code>Redis</code>安装包分为<code>Windows</code>版和<code>Linux</code>版：</p><ul><li><code>Windows</code>版下载地址：<a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li><li><code>Linux</code>版下载地址： <a href="https://download.redis.io/releases/">https://download.redis.io/releases/</a></li></ul><p><code>Redis</code>的<code>Windows</code>版属于绿色软件，直接解压即可使用，解压后目录结构如下：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/Redis%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"></p><h4 id="Redis服务启动与停止"><a href="#Redis服务启动与停止" class="headerlink" title="Redis服务启动与停止"></a>Redis服务启动与停止</h4><p>1.服务启动命令：<code>redis-server.exe redis.windows.conf</code>。</p><p>2.<code>Redis</code>服务默认端口号为<code>6379</code>，通过快捷键<code>Ctrl + C</code>即可停止<code>Redis</code>服务。</p><p>3.客户端连接命令：<code>redis-cli.exe</code>。</p><p>4.通过<code>redis-cli.exe</code>命令默认连接的是本地的<code>redis</code>服务，并且使用默认<code>6379</code>端口。也可以通过指定如下参数连接：</p><ul><li><code>-h</code> <code>ip</code>地址</li><li><code>-p</code> 端口号</li><li><code>-a</code> 密码（如果需要）</li></ul><p>5.设置<code>Redis</code>服务密码，修改<code>redis.windows.conf</code>：<code>requirepass 123456</code>。</p><p>注意：</p><ul><li>修改密码后需要重启<code>Redis</code>服务才能生效。</li><li><code>Redis</code>配置文件中<code>#</code>表示注释。</li></ul><p>6.<code>Redis</code>客户端图形工具：<code>Another Redis Desktop Manager</code>。</p><h3 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h3><h4 id="5种常用数据类型介绍"><a href="#5种常用数据类型介绍" class="headerlink" title="5种常用数据类型介绍"></a>5种常用数据类型介绍</h4><p><code>Redis</code>存储的是<code>key-value</code>结构的数据，其中<code>key</code>是字符串类型，<code>value</code>有5种常用的数据类型：</p><ul><li>字符串<code>string</code></li><li>哈希<code>hash</code></li><li>列表<code>list</code></li><li>集合<code>set</code></li><li>有序集合<code>sorted set / zset</code></li></ul><h4 id="各种数据类型的特点"><a href="#各种数据类型的特点" class="headerlink" title="各种数据类型的特点"></a>各种数据类型的特点</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/Redis%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><p>字符串（<code>string</code>）：普通字符串，<code>Redis</code>中最简单的数据类型。</p><p>哈希（<code>hash</code>）：也叫散列，类似于<code>Java</code>中的<code>HashMap</code>结构。</p><p>列表（<code>list</code>）：按照插入顺序排序，可以有重复元素，类似于<code>Java</code>中的<code>LinkedList</code>。</p><p>集合（<code>set</code>）：无序集合，没有重复元素，类似于<code>Java</code>中的<code>HashSet</code>。</p><p>有序集合（<code>sorted set / zset</code>）：集合中每个元素关联一个分数（<code>score</code>），根据分数升序排序，没有重复元素。</p><h3 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h3><h4 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h4><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>SET key value</td><td>设置指定key的值</td></tr><tr><td>GET key</td><td>获取指定key的值</td></tr><tr><td>SETEX key seconds value</td><td>设置指定key的值，并将 key 的过期时间设为 seconds 秒</td></tr><tr><td>SETNX key value</td><td>只有在 key 不存在时设置 key 的值</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs redis">&gt; set name surourou<br>OK<br>&gt; set age 23<br>OK<br>&gt; setex token 60 whfiewrhfoiwhfoilwejrfoilw<br>OK<br>&gt; setnx name srr<br>0<br>&gt; setnx nickname mm<br>1<br></code></pre></td></tr></table></figure><h4 id="哈希操作命令"><a href="#哈希操作命令" class="headerlink" title="哈希操作命令"></a>哈希操作命令</h4><p><code>Redis hash</code>是一个<code>string</code>类型的<code>field</code>和<code>value</code>的映射表，<code>hash</code>特别适合用于存储对象。</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>HSET key field value</td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td>HGET key field</td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td>HDEL key field</td><td>删除存储在哈希表中的指定字段</td></tr><tr><td>HKEYS key</td><td>获取哈希表中所有字段</td></tr><tr><td>HVALS key</td><td>获取哈希表中所有值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt; hset student name surourou<br><span class="hljs-number">1</span><br>&gt; hset student age <span class="hljs-number">23</span><br><span class="hljs-number">1</span><br>&gt; hget student name<br>surourou<br>&gt; hkeys student<br>name<br>age<br>&gt; hvals student<br>surourou<br><span class="hljs-number">23</span><br>&gt; hdel student age<br><span class="hljs-number">1</span><br>&gt; hkeys student<br>name<br></code></pre></td></tr></table></figure><h4 id="列表操作命令"><a href="#列表操作命令" class="headerlink" title="列表操作命令"></a>列表操作命令</h4><p><code>Redis</code>列表是简单的字符串列表，按照插入顺序排序。</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>LPUSH key value1 [value2]</td><td>将一个或多个值插入到列表头部(左边)</td></tr><tr><td>LRANGE key start stop</td><td>获取列表指定范围内的元素</td></tr><tr><td>RPOP key</td><td>移除并获取列表最后一个元素(右边)</td></tr><tr><td>LLEN key</td><td>获取列表长度</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt; lpush arr <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">3</span><br>&gt; rpush <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-number">2</span><br>&gt; rpush arr <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-number">6</span><br>&gt; lrange arr <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br>&gt; rpop arr<br><span class="hljs-number">6</span><br>&gt; llen arr<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="集合操作命令"><a href="#集合操作命令" class="headerlink" title="集合操作命令"></a>集合操作命令</h4><p><code>Redis</code>的<code>set</code> 是<code>string</code>类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据。</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>SADD key member1 [member2]</td><td>向集合添加一个或多个成员</td></tr><tr><td>SMEMBERS key</td><td>返回集合中的所有成员</td></tr><tr><td>SCARD key</td><td>获取集合的成员数</td></tr><tr><td>SINTER key1 [key2]</td><td>返回给定所有集合的交集</td></tr><tr><td>SUNION key1 [key2]</td><td>返回所有给定集合的并集</td></tr><tr><td>SREM key member1 [member2]</td><td>删除集合中一个或多个成员</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt; sadd set1 <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>&gt; sadd set2 <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">8</span><br><span class="hljs-number">3</span><br>&gt; smembers set1<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>&gt; scard set1<br><span class="hljs-number">2</span><br>&gt; sinter set1 set2<br><span class="hljs-number">1</span><br>&gt; sunion set1 set2<br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">8</span><br>&gt; srem set2 <span class="hljs-number">3</span><br><span class="hljs-number">1</span><br>&gt; smembers set2<br><span class="hljs-number">1</span><br><span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h4 id="有序集合操作命令"><a href="#有序集合操作命令" class="headerlink" title="有序集合操作命令"></a>有序集合操作命令</h4><p><code>Redis</code>有序集合是<code>string</code>类型元素的集合，且不允许有重复成员。每个元素都会关联一个<code>double</code>类型的分数。（默认根据<code>score</code>升序排序。）</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>ZADD key score1 member1 [score2 member2]</td><td>向有序集合添加一个或多个成员</td></tr><tr><td>ZRANGE key start stop [WITHSCORES]</td><td>通过索引区间返回有序集合中指定区间内的成员</td></tr><tr><td>ZINCRBY key increment member</td><td>有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>ZREM key member [member …]</td><td>移除有序集合中的一个或多个成员</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt; zadd zset1 <span class="hljs-number">1</span> srr <span class="hljs-number">2</span> surourou <span class="hljs-number">3</span> surrou<br><span class="hljs-number">3</span><br>&gt; zrange zset1 <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br>srr<br>surourou<br>surrou<br>&gt; zincrby zset1 <span class="hljs-number">8</span> surourou<br><span class="hljs-number">10</span><br>&gt; zrange zset1 <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br>srr<br>surrou<br>surourou<br>&gt; zrem zset1 surrou<br><span class="hljs-number">1</span><br>&gt; zrange zset1 <span class="hljs-number">0</span> -<span class="hljs-number">1</span><br>srr<br>surourou<br></code></pre></td></tr></table></figure><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><p><code>Redis</code>的通用命令是不分数据类型的，都可以使用的命令。</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>KEYS pattern</td><td>查找所有符合给定模式( pattern)的 key</td></tr><tr><td>EXISTS key</td><td>检查给定 key 是否存在</td></tr><tr><td>TYPE key</td><td>返回 key 所储存的值的类型</td></tr><tr><td>DEL key</td><td>该命令用于在 key 存在是删除 key</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java">&gt; keys *<br>set1<br>arr<br>age<br>name<br>student<br>zset1<br>set2<br>nickname<br>&gt; exists arr<br><span class="hljs-number">1</span><br>&gt; type name<br>string<br>&gt; type zset1<br>zset<br>&gt; del nickname<br><span class="hljs-number">1</span><br>&gt; keys a*<br>arr<br>age<br>&gt; keys *<br>set1<br>arr<br>age<br>name<br>student<br>zset1<br>set2<br></code></pre></td></tr></table></figure><h3 id="在Java中操作Redis"><a href="#在Java中操作Redis" class="headerlink" title="在Java中操作Redis"></a>在Java中操作Redis</h3><h4 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h4><p><code>Redis</code>的<code>Java</code>客户端很多，常用的几种：</p><ul><li><code>Jedis</code></li><li><code>Lettuce</code></li><li><code>Spring Data Redis</code></li></ul><p><code>Spring Data Redis</code>是<code>Spring</code>的一部分，对<code>Redis</code>底层开发包进行了高度封装。在<code>Spring</code>项目中，可以使用<code>Spring Data Redis</code>来简化操作。</p><h4 id="Spring-Data-Redis使用方式"><a href="#Spring-Data-Redis使用方式" class="headerlink" title="Spring Data Redis使用方式"></a>Spring Data Redis使用方式</h4><p>操作步骤：</p><p>1.导入<code>Spring Data Redis</code>的<code>maven</code>坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.配置<code>Redis</code>数据源。</p><p><code>application-dev.yml</code>文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><code>application.yml</code>文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;sky.redis.host&#125;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;sky.redis.port&#125;</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;sky.redis.password&#125;</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">$&#123;sky.redis.database&#125;</span><br></code></pre></td></tr></table></figure><p>3.编写配置类，创建<code>RedisTemplate</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始创建redis模板对象&quot;</span>);<br>        <span class="hljs-comment">//RedisConnectionFactory是redis连接工厂，starter创建好连接工厂对象，并放到容器当中，参数声明即可注入</span><br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>();<br>        <span class="hljs-comment">//设置redis的连接工厂对象</span><br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-comment">//设置redis中key的序列花器</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<span class="hljs-comment">//字符串类型的redis序列化器</span><br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.通过<code>RedisTemplate</code>对象操作<code>Redis</code>。</p><p><code>RedisTemplate</code>针对大量<code>api</code>进行了归类封装,将同一数据类型的操作封装为对应的<code>Operation</code>接口，具体分类如下：</p><ul><li><code>ValueOperations</code>：<code>string</code>数据操作。</li><li><code>SetOperations</code>：<code>set</code>类型数据操作。</li><li><code>ZSetOperations</code>：<code>zset</code>类型数据操作。</li><li><code>HashOperations</code>：<code>hash</code>类型的数据操作。</li><li><code>ListOperations</code>：<code>list</code>类型的数据操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.test;<span class="hljs-comment">//文件路径：src/test/java/com/sky/test/SpringDataRedisTest.java</span><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDataRedisTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisTemplate</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(redisTemplate);<br>        <span class="hljs-type">ValueOperations</span> <span class="hljs-variable">valueOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue();<br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>        <span class="hljs-type">ListOperations</span> <span class="hljs-variable">listOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForList();<br>        <span class="hljs-type">SetOperations</span> <span class="hljs-variable">setOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet();<br>        <span class="hljs-type">ZSetOperations</span> <span class="hljs-variable">zSetOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet();<br>    &#125;<br><br>    <span class="hljs-comment">//操作字符串类型的数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;广东&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">city</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;city&quot;</span>);<br>        System.out.println(city);<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">3</span>, TimeUnit.MINUTES);<br>        redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-number">1</span>);<br>        redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//操作哈希类型的数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br><br>        hashOperations.put(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;srr&quot;</span>);<br>        hashOperations.put(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) hashOperations.get(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> hashOperations.keys(<span class="hljs-string">&quot;100&quot;</span>);<br>        System.out.println(keys);<br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> hashOperations.values(<span class="hljs-string">&quot;100&quot;</span>);<br>        System.out.println(values);<br><br>        hashOperations.delete(<span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//操作列表类型的数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ListOperations</span> <span class="hljs-variable">listOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForList();<br><br>        listOperations.leftPushAll(<span class="hljs-string">&quot;mylist&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>        listOperations.rightPush(<span class="hljs-string">&quot;mylist&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br><br>        <span class="hljs-type">List</span> <span class="hljs-variable">mylist</span> <span class="hljs-operator">=</span> listOperations.range(<span class="hljs-string">&quot;mylist&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        System.out.println(mylist);<br><br>        listOperations.rightPop(<span class="hljs-string">&quot;mylist&quot;</span>);<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> listOperations.size(<span class="hljs-string">&quot;mylist&quot;</span>);<br>        System.out.println(size);<br>    &#125;<br><br>    <span class="hljs-comment">//操作集合类型的数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SetOperations</span> <span class="hljs-variable">setOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet();<br><br>        setOperations.add(<span class="hljs-string">&quot;set1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>);<br>        setOperations.add(<span class="hljs-string">&quot;set2&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">members</span> <span class="hljs-operator">=</span> setOperations.members(<span class="hljs-string">&quot;set1&quot;</span>);<br>        System.out.println(members);<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> setOperations.size(<span class="hljs-string">&quot;set1&quot;</span>);<br>        System.out.println(size);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">intersect</span> <span class="hljs-operator">=</span> setOperations.intersect(<span class="hljs-string">&quot;set1&quot;</span>, <span class="hljs-string">&quot;set2&quot;</span>);<br>        System.out.println(intersect);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">union</span> <span class="hljs-operator">=</span> setOperations.union(<span class="hljs-string">&quot;set1&quot;</span>, <span class="hljs-string">&quot;set2&quot;</span>);<br>        System.out.println(union);<br><br>        setOperations.remove(<span class="hljs-string">&quot;set1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//操作有序集合类型的数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZSet</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ZSetOperations</span> <span class="hljs-variable">zSetOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet();<br><br>        zSetOperations.add(<span class="hljs-string">&quot;zset1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10</span>);<br>        zSetOperations.add(<span class="hljs-string">&quot;zset2&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">20</span>);<br>        zSetOperations.add(<span class="hljs-string">&quot;zset3&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">8</span>);<br><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">zset</span> <span class="hljs-operator">=</span> zSetOperations.range(<span class="hljs-string">&quot;zset1&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>        System.out.println(zset);<br><br>        zSetOperations.incrementScore(<span class="hljs-string">&quot;zset1&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">10</span>);<br><br>        zSetOperations.remove(<span class="hljs-string">&quot;zset1&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//通用命令操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCommon</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> redisTemplate.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(keys);<br><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">set1</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(<span class="hljs-string">&quot;set1&quot;</span>);<br><br>        <span class="hljs-keyword">for</span>(Object key : keys)&#123;<br>            <span class="hljs-type">DataType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> redisTemplate.type(key);<br>            System.out.println(type);<br>        &#125;<br><br>        redisTemplate.delete(<span class="hljs-string">&quot;mylist&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="店铺营业状态设置"><a href="#店铺营业状态设置" class="headerlink" title="店铺营业状态设置"></a>店铺营业状态设置</h2><h3 id="产品原型-14"><a href="#产品原型-14" class="headerlink" title="产品原型"></a>产品原型</h3><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%BA%97%E9%93%BA%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B.png"></p><h3 id="接口设计-15"><a href="#接口设计-15" class="headerlink" title="接口设计"></a>接口设计</h3><p>设置营业状态。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%BA%97%E9%93%BA%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%AE%BE%E7%BD%AE%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%EF%BC%89.png"></p><p>管理端查询营业状态。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%BA%97%E9%93%BA%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AE%A1%E7%90%86%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%EF%BC%89.png"></p><p>用户端查询营业状态。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%EF%BC%881%EF%BC%89/%E5%BA%97%E9%93%BA%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%94%A8%E6%88%B7%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%90%A5%E4%B8%9A%E7%8A%B6%E6%80%81%EF%BC%89.png"></p><p>本项目约定：</p><ul><li>管理端发出的请求，统一使用<code>/admin</code>作为前缀。</li><li>用户端发出的请求，统一使用<code>/user</code>作为前缀。</li></ul><p>营业状态数据存储方式：基于<code>Redis</code>的字符串来进行存储。约定：1表示营业，0表示打烊。</p><h3 id="代码开发-11"><a href="#代码开发-11" class="headerlink" title="代码开发"></a>代码开发</h3><p>1.管理端<code>ShopController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-meta">@RestController(&quot;adminShopController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/shop&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;店铺相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SHOP_STATUS&quot;</span>;<br><br>    <span class="hljs-comment">//设置店铺的营业状态</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;设置店铺的营业状态&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer status)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;设置店铺的营业状态：&#123;&#125;&quot;</span>, status == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;营业中&quot;</span> : <span class="hljs-string">&quot;打烊中&quot;</span>);<br>        redisTemplate.opsForValue().set(KEY, status);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//获取店铺的营业状态</span><br>    <span class="hljs-meta">@GetMapping(&quot;/status&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);<br>        log.info(<span class="hljs-string">&quot;获取店铺的营业状态：&#123;&#125;&quot;</span>, status == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;营业中&quot;</span> : <span class="hljs-string">&quot;打烊中&quot;</span>);<br>        <span class="hljs-keyword">return</span> Result.success(status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.用户端<code>ShopController</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.controller.user;<br><br><span class="hljs-meta">@RestController(&quot;userShopController&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/user/shop&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;店铺相关接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SHOP_STATUS&quot;</span>;<br>    <br>    <span class="hljs-comment">//获取店铺的营业状态</span><br>    <span class="hljs-meta">@GetMapping(&quot;/status&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);<br>        log.info(<span class="hljs-string">&quot;获取店铺的营业状态：&#123;&#125;&quot;</span>, status == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;营业中&quot;</span> : <span class="hljs-string">&quot;打烊中&quot;</span>);<br>        <span class="hljs-keyword">return</span> Result.success(status);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：因为管理端和用户端都命名为<code>ShopController</code>，在创建<code>Bean</code>时都会使用默认的名字<code>shopController</code>发生冲突，出现报错。</p><p>报错：<code>Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name &#39;shopController&#39; for bean class [com.sky.controller.user.ShopController] conflicts with existing, non-compatible bean definition of same name and class [com.sky.controller.admin.ShopController]</code></p><p>解决：分别给两个<code>ShopController</code>命名为：<code>@RestController(&quot;adminShopController&quot;)</code>和<code>@RestController(&quot;userShopController&quot;)</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：开发环境搭建</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="前端环境搭建"><a href="#前端环境搭建" class="headerlink" title="前端环境搭建"></a>前端环境搭建</h3><p>前端工程基于<code>nginx</code>运行。</p><p>启动<code>nginx</code>：双击<code>nginx.exe</code>即可启动<code>nginx</code>服务，访问端口号为<code>80</code>，访问链接：<a href="http://localhost/">苍穹外卖</a>。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B.png"></p><h3 id="后端环境搭建"><a href="#后端环境搭建" class="headerlink" title="后端环境搭建"></a>后端环境搭建</h3><p>后端工程基于<code>maven</code>进行项目构建，并且进行分模块开发。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B.png">后端项目结构</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>sky-take-out</td><td>maven父工程，统一管理依赖版本，聚合其他子模块</td></tr><tr><td>sky-common</td><td>子模块，存放公共类，例如：工具类、常量类、异常类等</td></tr><tr><td>sky-pojo</td><td>子模块，存放实体类、VO、DTO等</td></tr><tr><td>sky-server</td><td>子模块，后端服务，存放配置文件、Controller、Service、Mapper等</td></tr></tbody></table><h5 id="sky-common"><a href="#sky-common" class="headerlink" title="sky-common"></a>sky-common</h5><p><code>sky-common</code>子模块中存放的是一些公共类，可以供其他模块使用。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/sky-common%E5%AD%90%E6%A8%A1%E5%9D%97.png"></p><h5 id="sky-pojo"><a href="#sky-pojo" class="headerlink" title="sky-pojo"></a>sky-pojo</h5><p><code>sky-pojo</code>子模块中存放的是一些<code>entity</code>、<code>DTO</code>、<code>VO</code>。</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Entity</td><td>实体，通常和数据库中的表对应</td></tr><tr><td>DTO</td><td>数据传输对象，通常用于程序中各层之间传递数据</td></tr><tr><td>VO</td><td>视图对象，为前端展示数据提供的对象</td></tr><tr><td>POJO</td><td>普通Java对象，只有属性和对应的getter和setter</td></tr></tbody></table><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/sky-pojo%E5%AD%90%E6%A8%A1%E5%9D%97.png"></p><h5 id="sky-server"><a href="#sky-server" class="headerlink" title="sky-server"></a>sky-server</h5><p><code>sky-server</code>子模块中存放的是 配置文件、配置类、拦截器、<code>controller</code>、<code>service</code>、<code>mapper</code>、启动类等。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/sky-server%E5%AD%90%E6%A8%A1%E5%9D%97.png"></p><h4 id="使用Git进行版本控制"><a href="#使用Git进行版本控制" class="headerlink" title="使用Git进行版本控制"></a>使用Git进行版本控制</h4><p>1.在<code>IDEA</code>的<code>Settings</code>里设置<code>Git</code>的路径。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/IDEA%E8%AE%BE%E7%BD%AEGit%E8%B7%AF%E5%BE%84.png"></p><p>2.在窗口<code>VCS</code>中选择<code>Create Git Repository</code>，选择当前工程，点击<code>OK</code>，创建<code>Git</code>本地仓库。</p><p>点击<code>Commit</code>，如果<code>Changes</code>里没有显示当前需要提交的工程，是因为当前目录不安全。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/IDEA%E4%BD%BF%E7%94%A8Git.png"></p><p>打开<code>Git Bash</code>进入当前目录运行<code>git status</code>，会出现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">srr18@srr MINGW64 /e/2_learn/Java-waimai/code/sky-take-out<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>fatal: detected dubious ownership in repository at &#x27;E:/2_learn/Java-waimai/code/sky-take-out&#x27;<br>&#x27;E:/2_learn/Java-waimai/code/sky-take-out&#x27; is on a file system that does not record ownership<br>To add an exception for this directory, call:<br><br>        git config --global --add safe.directory E:/2_learn/Java-waimai/code/sky-take-out<br><br>srr18@srr MINGW64 /e/2_learn/Java-waimai/code/sky-take-out<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global --add safe.directory E:/2_learn/Java-waimai/code/sky-take-out</span><br><br>srr18@srr MINGW64 /e/2_learn/Java-waimai/code/sky-take-out (master)<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.<br>  (use &quot;git push&quot; to publish your local commits)<br><br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure><p>提示需要运行<code>git config --global --add safe.directory E:/2_学习/Java-waimai/code/sky-take-out</code>命令，然后就可以成功在<code>IDEA</code>里面成功使用<code>Git</code>进行版本管理。</p><p>3.设置<code>Github</code>账户。在<code>Settings</code>中搜索<code>GitHub</code>，点击<code>Log in via GitHub</code>，通过网页验证登录<code>GitHub</code>账号。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/IDEA%E7%99%BB%E5%BD%95Github.png"></p><p>4.在<code>Git</code>下点击<code>push</code>，弹出如下窗口。首先设置远程仓库，在<code>Github</code>上新建远程仓库，然后将远程仓库地址填入<code>URL</code>中，点击<code>push</code>。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/IDEA%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.png"></p><p>如果出现如下报错，原因是我使用了<code>Github</code>加速器<code>Watt Toolkit</code>。关闭该加速器即可解决问题。</p><p>参考链接：<a href="https://blog.csdn.net/m0_51241043/article/details/140182379">解决ssh: connect to host github.com port 22: Connection refused_ssh: connect to host master port 22: connection re-CSDN博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">10:15:23.435: [sky-take-out] git -c credential.helper= -c core.quotepath=false -c log.showSignature=false push --progress --porcelain origin refs/heads/master:refs/heads/master --set-upstream<br>ssh: connect to host github.com port 22: Connection refused<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights<br>and the repository exists.<br></code></pre></td></tr></table></figure><p>关闭<code>Watt Toolkit</code>之后进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\srr18&gt;ssh -T git@github.com<br>Hi surourou8! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">表示SSH连接成功，但GitHub不提供shell 访问/接入权限。只是提示语，不是Bug，没有任何影响。</span><br></code></pre></td></tr></table></figure><p>重新进行<code>git push</code>上传操作，上传成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">10:17:38.814: [sky-take-out] git -c credential.helper= -c core.quotepath=false -c log.showSignature=false push --progress --porcelain origin refs/heads/master:refs/heads/master --set-upstream<br>Enumerating objects: 135, done.<br>Writing objects: 100% (135/135), 34.24 KiB | 922.00 KiB/s, done.<br>Total 135 (delta 34), reused 0 (delta 0), pack-reused 0 (from 0)<br>remote: Resolving deltas: 100% (34/34), done.        <br>To github.com:surourou8/sky-take-out.git<br>*refs/heads/master:refs/heads/master[new branch]<br>branch &#x27;master&#x27; set up to track &#x27;origin/master&#x27;.<br>Done<br></code></pre></td></tr></table></figure><h4 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h4><p>通过数据库建表语句创建数据库表结构。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84.png"></p><h4 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h4><p>后端的初始工程中已经实现了登录功能，直接进行前后端联调测试即可。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%EF%BC%9A%E7%99%BB%E5%BD%95%E6%93%8D%E4%BD%9C.png"></p><h5 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h5><p>前端请求地址：<a href="http://localhost/api/employee/login">http://localhost/api/employee/login</a></p><p>后端接口地址：<a href="http://localhost:8080/admin/employee/login">http://localhost:8080/admin/employee/login</a></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%E5%92%8C%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80.png"></p><p><code>nginx</code>反向代理，就是将前端发送的动态请求由<code>nginx</code><strong>转发</strong>到后端服务器。</p><p><code>nginx</code>反向代理的好处：提高访问速度、进行负载均衡（负载均衡就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器）、保证后端服务安全。</p><p><code>nginx</code>反向代理的配置方式：（在<code>conf</code>目录下的<code>nginx.conf</code>文件中配置）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><br><span class="hljs-section">location</span> /api/ &#123; <br>            <span class="hljs-attribute">proxy_pass</span>   http://localhost:8080/admin/;  <span class="hljs-comment">#反向代理</span><br>&#125;<br>&#125;<br><span class="hljs-comment">#http://localhost/api/employee/login请求能匹配到api这个字符串，nginx通过反向代理将该请求转发到后端指定的地址http://localhost:8080/admin/，剩余的动态请求路径/employee/login，则会追加到http://localhost:8080/admin/后面，得到完整的路径http://localhost:8080/admin/employee/login。</span><br></code></pre></td></tr></table></figure><p><code>nginx</code>负载均衡（本质基于反向代理来实现，都是转发请求）的配置方式：（在<code>conf</code>目录下的<code>nginx.conf</code>文件中配置）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123; <span class="hljs-comment"># 转发地址：webservers，该名称上下保持一致即可。</span><br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span>;<br>&#125;<br><br>server&#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> localhost;<br><br><span class="hljs-section">location</span> /api/ &#123;<br>            <span class="hljs-attribute">proxy_pass</span>   http://webservers/admin/;  <span class="hljs-comment">#负载均衡</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>nginx</code>负载均衡策略：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式，默认为1，权重越高，被分配的客户端请求就越多</td></tr><tr><td>ip_hash</td><td>依据ip分配方式，这样每个访客可以固定访问一个后端服务</td></tr><tr><td>least_conn</td><td>依据最少连接方式，把请求优先分配给连接数少的后端服务</td></tr><tr><td>url_hash</td><td>依据url分配方式，这样相同的url会被分配到同一个后端服务</td></tr><tr><td>fair</td><td>依据响应时间方式，响应时间短的服务将会被优先分配</td></tr></tbody></table><h3 id="完善登陆功能"><a href="#完善登陆功能" class="headerlink" title="完善登陆功能"></a>完善登陆功能</h3><p>问题：员工表中的密码是明文存储，安全性太低。</p><p>解决：</p><p>1.将密码加密后存储，提高安全性。使用<code>MD5</code>加密方式对明文密码加密。<code>123456</code>经过<code>MD5</code>加密后为<code>e10adc3949ba59abbe56e057f20f883e</code>。</p><p>2.修改<code>Java</code>代码，前端提交的密码进行MD5加密后再跟数据库中密码比对。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//com.sky.service.impl包下的EmployeeService类</span><br><br><span class="hljs-comment">//密码比对</span><br><span class="hljs-comment">// TODO 后期需要进行md5加密，然后再进行比对</span><br><span class="hljs-comment">// 对前端传过来的明文密码进行md5加密处理</span><br>password = DigestUtils.md5DigestAsHex(password.getBytes());<br><span class="hljs-keyword">if</span> (!password.equals(employee.getPassword())) &#123;<br>    <span class="hljs-comment">//密码错误</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordErrorException</span>(MessageConstant.PASSWORD_ERROR);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="导入接口文档"><a href="#导入接口文档" class="headerlink" title="导入接口文档"></a>导入接口文档</h3><p>在<code>Apifox</code>中导入接口文档。<code>项目设置</code>-&gt;<code>导入数据</code>-&gt;<code>YApi</code>-&gt;导入-&gt;选择<code>json</code>接口文档导入即可。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Apifox%E5%AF%BC%E5%85%A5%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.png"></p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>使用<code>Swagger</code>只需要按照它的规范去定义接口及接口相关的信息，就可以做到生成接口文档，以及在线接口调试页面。</p><p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p><p><code>Knife4j</code>是为<code>Java MVC</code>框架集成<code>Swagger</code>生成<code>Api</code>文档的增强解决方案。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>1.导入<code>knife4j</code>的<code>maven</code>坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在配置类中加入<code>knife4j</code>相关配置。设置静态资源映射，否则接口文档页面无法访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-comment">//配置类，注册web层相关组件</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过knife4j生成接口文档</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApiInfo</span> <span class="hljs-variable">apiInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;苍穹外卖项目接口文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;2.0&quot;</span>)<br>                .description(<span class="hljs-string">&quot;苍穹外卖项目接口文档&quot;</span>)<br>                .build();<br>        <span class="hljs-type">Docket</span> <span class="hljs-variable">docket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.sky.controller&quot;</span>))<span class="hljs-comment">//指定生成接口需要扫描的包</span><br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置静态资源映射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//生成接口文档之后，这些文件会放到这些路径下面，将这些请求映射到这些路径下才可以访问到接口文档。</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口文档访问路径为：<a href="http://ip:port/doc.html">http://ip:port/doc.html</a> </p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Swagger%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.png"></p><p>在接口文档中进行接口测试。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Swagger%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95.png"></p><p>注意：</p><ol><li><code>Yapi</code>是设计阶段使用的工具，管理和维护接口。</li><li><code>Swagger</code>在开发阶段使用的框架，帮助后端开发人员做后端的接口测试。</li></ol><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>通过注解可以控制生成的接口文档，使接口文档拥有更好的可读性，常用注解如下：</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java项目苍穹外卖：前端开发</title>
    <link href="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="苍穹外卖"><a href="#苍穹外卖" class="headerlink" title="苍穹外卖"></a>苍穹外卖</h1><h2 id="苍穹外卖前端开发"><a href="#苍穹外卖前端开发" class="headerlink" title="苍穹外卖前端开发"></a>苍穹外卖前端开发</h2><h3 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h3><h4 id="基于脚手架创建前端工程"><a href="#基于脚手架创建前端工程" class="headerlink" title="基于脚手架创建前端工程"></a>基于脚手架创建前端工程</h4><p>1.环境要求：</p><ul><li><code>node.js</code>：前端项目的运行环境。</li><li><code>npm</code>：<code>JavaScript</code>的包管理工具。</li><li><code>Vue CLI</code>：基于<code>Vue</code>进行快速开发的完整系统，实现交互式的项目脚手架。</li></ul><p>2.使用<code>Vue CLI</code>创建前端工程：</p><ul><li>方式一：<code>vue create 项目名称</code></li><li>方式二：<code>vue ui</code></li></ul><p>3.项目结构</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><p>4.启动前端项目：<code>npm run serve</code>。</p><p>5.前端项目启动后，服务端口默认为<code>8080</code>，很容易和后端<code>tomcat</code>端口号冲突。可以修改前端服务的端口号。</p><p>在<code>vue.config.js</code>中配置前端服务端口号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7070</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Vue基本使用方式"><a href="#Vue基本使用方式" class="headerlink" title="Vue基本使用方式"></a>Vue基本使用方式</h4><h5 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h5><p><code>Vue</code>的组件文件以<code>.vue</code>结尾，每个组件由三部分组成：</p><ol><li>结构<code>&lt;template&gt;</code>：只有一个根元素，由它生成<code>HTML</code>代码。</li><li>样式<code>&lt;style&gt;</code>：编写<code>CSS</code>，控制页面展示效果，全局样式，影响所有组件，局部样式，只作用于当前组件。</li><li>逻辑<code>&lt;script&gt;</code>：编写<code>JS</code>代码，控制模版的数据来源和行为。</li></ol><h5 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h5><p>作用：用来绑定<code>data</code>方法返回的对象属性。</p><p>用法：<code>&#123;&#123;&#125;&#125;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;<br>        &lt;h1&gt;&#123;&#123; age &gt; 60 ? &#x27;老年&#x27; : &#x27;青年&#x27; &#125;&#125;&lt;/h1&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    export default &#123;<br>        data() &#123;<br>            return &#123; name: &#x27;张三&#x27;, age: 30 &#125;;<br>        &#125;<br>    &#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h5><p>作用：为标签的属性绑定<code>data</code>方法中返回的属性。</p><p>用法：<code>v-bind:xxx</code>，简写为 <code>:xxx</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;<br>        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;<br>        &lt;div&gt;&lt;img :src=&quot;url&quot;/&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    data () &#123;<br>        return &#123;<br>            name: &#x27;王五&#x27;,<br>            age: 20,<br>            src: &#x27;https://www.itcast.cn/2018czgw/images/logo2.png&#x27;<br>        &#125;;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>作用：为元素绑定对应的事件。</p><p>用法：<code>v-on:xxx</code>，简写为<code>@xxx</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>      &lt;div&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;保存&quot; v-on:click=&quot;handleSave&quot;/&gt;<br>        &lt;input type=&quot;button&quot; value=&quot;保存&quot; @click=&quot;handleSave&quot;/&gt;&lt;br&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    data()&#123; return &#123; name: ‘张三’&#125;<br>    &#125;,<br>    methods: &#123;<br>        handleSave()&#123;<br>            alert(this.name)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h5><p>作用：表单输入项和 data 方法中的属性进行绑定，任意一方改变都会同步给另一方。</p><p>用法：<code>v-model</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div&gt;<br>            双向绑定：&#123;&#123; name &#125;&#125;<br>            &lt;input type=&quot;text&quot; v-model=&quot;name&quot; /&gt;<br>            &lt;input type=&quot;button&quot; value=&quot;改变&quot; @click=&quot;handleChange&quot;/&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    data()&#123;return &#123;name: &#x27;张三&#x27;&#125;<br>    &#125;,<br>    methods: &#123;<br>        handleChange()&#123;<br>            this.name = &#x27;李四&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h5><p>作用：根据表达式的值来动态渲染页面元素。</p><p>用法：<code>v-if</code>、<code>v-else</code>、<code>v-else-if</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div v-if=&quot;sex == 1&quot;&gt;<br>            男<br>        &lt;/div&gt;<br>        &lt;div v-else-if=&quot;sex == 2&quot;&gt;<br>            女<br>        &lt;/div&gt;<br>        &lt;div v-else&gt;<br>            未知<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>  <br>&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return &#123;sex: 1&#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h5><p><code>Axios</code>是一个基于<code>promise</code>的网络请求库，作用于浏览器和<code>node.js</code>中。</p><p>安装命令：<code>npm install axios</code>。</p><p>导入命令：<code>import axios from &#39;axios&#39;</code>。</p><p><code>axios</code>的<code>API</code>列表：</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/axios%E7%9A%84API%E5%88%97%E8%A1%A8.png"></p><p>参数说明：</p><ul><li><code>url</code>：请求路径。</li><li><code>data</code>：请求体数据，最常见的是<code>JSON</code>格式数据。</li><li><code>config</code>：配置对象，可以设置查询参数、请求头信息。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input type=&quot;button&quot; value=&quot;发送POST请求&quot; @click=&quot;handleSendPOST&quot; /&gt;<br>    &lt;input type=&quot;button&quot; value=&quot;发送GET请求&quot; @click=&quot;handleSendGET&quot; /&gt;<br>    &lt;input type=&quot;button&quot; value=&quot;统一请求方式&quot; @click=&quot;handleSend&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;<br><br>export default &#123;<br>  methods: &#123;<br>    handleSendPOST()&#123;<br>      axios.post(&#x27;/api/admin/employee/login&#x27;, &#123;<br>        username: &#x27;admin&#x27;,<br>        password: &#x27;123456&#x27;<br>      &#125;).then(res =&gt; &#123;<br>        console.log(res.data)<br>      &#125;).catch(error =&gt; &#123;<br>        console.log(error.response)<br>      &#125;)<br>    &#125;,<br>      <br>    handleSendGET()&#123;<br>      axios.get(&#x27;api/admin/shop/status&#x27;, &#123;<br>        headers: &#123;<br>          token: &quot;eyJhbGciOiJIUzI1NiJ9.eyJlbXBJZCI6MSwiZXhwIjoxNzMwNzgxODY0fQ.F9E5ntRqyRP2sVa4-95ZjErIfuDEV6q4Oi3Btya17Qg&quot;<br>        &#125;<br>      &#125;).then(res =&gt; &#123;<br>        console.log(res.data)<br>      &#125;)<br>    &#125;,<br>      <br>    handleSend()&#123; //axios统一调用方式发送请求<br>      axios(&#123;<br>        url: &#x27;/api/admin/employee/login&#x27;,<br>        method: &#x27;post&#x27;,<br>        data: &#123;<br>          username: &#x27;admin&#x27;,<br>          password: &#x27;123456&#x27;<br>        &#125;<br>      &#125;).then(res =&gt; &#123;<br>        console.log(res.data.data.token)<br>        axios(&#123;<br>          url: &#x27;api/admin/shop/status&#x27;,<br>          method: &#x27;get&#x27;,<br>          headers: &#123;<br>            token: res.data.data.token<br>          &#125;<br>        &#125;)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h6><p>为了解决跨域问题，可以在<code>vue.config.js</code>文件中配置代理：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JSON">const <span class="hljs-punctuation">&#123;</span> defineConfig <span class="hljs-punctuation">&#125;</span> = require(&#x27;@vue/cli-service&#x27;)<br>module.exports = defineConfig(<span class="hljs-punctuation">&#123;</span><br>  transpileDependencies<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  devServer<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    port<span class="hljs-punctuation">:</span> <span class="hljs-number">7070</span><span class="hljs-punctuation">,</span><br>    proxy<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//配置前端代理</span><br>      &#x27;/api&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//前端请求路径前缀api</span><br>        target<span class="hljs-punctuation">:</span> &#x27;http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:8080&#x27;, //路径转发</span><br>        pathRewrite<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//路径重写</span><br>          &#x27;^/api&#x27; <span class="hljs-punctuation">:</span> &#x27;&#x27;<br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><h4 id="路由Vue-Router"><a href="#路由Vue-Router" class="headerlink" title="路由Vue-Router"></a>路由Vue-Router</h4><p><code>vue</code>属于<strong>单页面</strong>应用，所谓的路由，就是根据浏览器路径不同，用不同的视图组件替换这个页面内容。</p><p><code>vue</code>实现路由：通过<code>vue-router</code>实现路由功能，需要安装<code>js</code>库（<code>npm install vue-router</code>）。</p><h5 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h5><p>路由组成：</p><p><code>VueRouter</code>：路由器，根据路由请求在路由视图中动态渲染对应的视图组件。</p><p><code>&lt;router-link&gt;</code>：路由链接组件，浏览器会解析成<code>&lt;a&gt;</code>。</p><p><code>&lt;router-view&gt;</code>：路由视图组件，用来展示与路由路径匹配的视图组件。</p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue%E8%B7%AF%E7%94%B1%E7%BB%84%E6%88%90.png"></p><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E8%B7%AF%E7%94%B1%E8%B7%AF%E5%BE%84%E5%92%8C%E8%A7%86%E5%9B%BE%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.png"></p><h6 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h6><ul><li><p>标签式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>编程式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;nav&gt;<br>      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |<br>      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt; |<br>      &lt;input type=&quot;button&quot; value=&quot;编程式路由跳转&quot; @click=&quot;jump&quot;/&gt;<br>    &lt;/nav&gt;<br>    &lt;!-- 视图组件展示的位置 --&gt;<br>    &lt;router-view/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default&#123;<br>  methods: &#123;<br>    jump()&#123;<br>      //使用编程式路由跳转方式<br>      this.$router.push(&#x27;about&#x27;) //this.$router 是获取到路由对象，push方法是根据url进行跳转<br><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h6 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//index.js</span><br><span class="hljs-comment">//维护路由表，某个路由路径对应哪个视图组件</span><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span> <span class="hljs-comment">//静态导入</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>) <span class="hljs-comment">//懒加载，动态导入</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/404View.vue&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-comment">//前面的都匹配不到，就会走到这</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span> <span class="hljs-comment">//重定向到404</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;!-- 404View.vue --&gt;<br>&lt;template&gt;<br>&lt;div class=&quot;about&quot;&gt;<br>    &lt;h1&gt;您请求的资源不存在&lt;/h1&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h5><p>嵌套路由：组件内要切换内容，就需要用到嵌套路由（子路由）。</p><p>实现步骤：</p><p>1.安装并导入<a href="https://element.eleme.io/#/zh-CN/component/installation">elementui</a>：<code>npm i element-ui -S</code>，实现页面布局（<code>Container</code>布局容器）：<code>ContainerView.vue</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;el-container&gt;<br>            &lt;el-header&gt;Header&lt;/el-header&gt;<br>            &lt;el-container&gt;<br>                &lt;el-aside width=&quot;200px&quot;&gt;<br>                    &lt;router-link to=&quot;/c/p1&quot;&gt;P1&lt;/router-link&gt; &lt;br&gt;<br>                    &lt;router-link to=&quot;/c/p2&quot;&gt;P2&lt;/router-link&gt; &lt;br&gt;<br>                    &lt;router-link to=&quot;/c/p3&quot;&gt;P3&lt;/router-link&gt; &lt;br&gt;<br>                &lt;/el-aside&gt;<br>                &lt;el-main&gt;<br>                    &lt;router-view&gt;&lt;/router-view&gt;<br>                &lt;/el-main&gt;<br>            &lt;/el-container&gt;<br>        &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.el-header,<br>.el-footer &#123;<br>    background-color: #B3C0D1;<br>    color: #333;<br>    text-align: center;<br>    line-height: 60px;<br>&#125;<br><br>.el-aside &#123;<br>    background-color: #D3DCE6;<br>    color: #333;<br>    text-align: center;<br>    line-height: 200px;<br>&#125;<br><br>.el-main &#123;<br>    background-color: #E9EEF3;<br>    color: #333;<br>    text-align: center;<br>    line-height: 160px;<br>&#125;<br><br>body&gt;.el-container &#123;<br>    margin-bottom: 40px;<br>&#125;<br><br>.el-container:nth-child(5) .el-aside,<br>.el-container:nth-child(6) .el-aside &#123;<br>    line-height: 260px;<br>&#125;<br><br>.el-container:nth-child(7) .el-aside &#123;<br>    line-height: 320px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>2.提供子视图组件，用于效果展示：<code>P1View.vue</code>、<code>P2View.vue</code>、<code>P3View.vue</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        P1View &lt;!-- 三个组件更换这部分内容即可 --&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>3.在<code>src/router/index.js</code>中配置路由映射规则（嵌套路由配置）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/c&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/container/ContainerView.vue&#x27;</span>),<br>            <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/c/p1&#x27;</span>,<br>                <span class="hljs-comment">//嵌套路由（子路由），对应的组件会展示在当前组件内部</span><br>                <span class="hljs-attr">children</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/c/p1&#x27;</span>,<br>                        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/container/P1View.vue&#x27;</span>)<br>                    &#125;,<br>                    &#123;<br>                        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/c/p2&#x27;</span>,<br>                        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/container/P2View.vue&#x27;</span>)<br>                    &#125;,<br>                    &#123;<br>                        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/c/p3&#x27;</span>,<br>                        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/container/P3View.vue&#x27;</span>)<br>                    &#125;<br>                ]<br>&#125;,<br></code></pre></td></tr></table></figure><p>4.在布局容器视图中添加<code>&lt;router-view&gt;</code>，实现子视图组件展示。</p><p>5.在布局容器视图中添加<code>&lt;router-link&gt;</code>，实现路由请求。</p><p>注意：子路由变化，切换的是【<code>ContainerView</code>组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容。</p><h4 id="状态管理vuex"><a href="#状态管理vuex" class="headerlink" title="状态管理vuex"></a>状态管理vuex</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p><code>vuex</code>是一个专为<code>Vue.js</code>应用程序开发的状态管理库。</p><p><code>vuex</code>可以在多个组件之间共享数据，并且共享的数据是响应式的，即数据的变更能及时渲染到模板。</p><p><code>vuex</code>采用集中式存储管理所有组件的状态。</p><p>安装<code>vuex</code>：<code>npm install vuex@next --save</code>。（可以创建带有<code>vuex</code>功能的脚手架工程来使用<code>vuex</code>）</p><p>核心概念：</p><ol><li><code>state</code>：状态对象，集中定义各个组件共享的数据。</li><li><code>mutations</code>：类似于一个事件，用于修改共享数据，要求必须是同步函数。</li><li><code>actions</code>：类似于<code>mutation</code>，可以包含异步操作，通过调用<code>mutation</code>来改变共享数据。</li></ol><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><p>在<code>store</code>对象的<code>state</code>属性中定义共享数据。</p><p>在<code>store</code>对象的<code>mutations</code>属性中定义修改共享数据的函数。</p><p>在<code>store</code>对象的<code>actions</code>属性中定义调用<code>mutation</code>的函数，可以进行异步操作。</p><p><code>mutations</code>中的函数不能直接调用，只能通过<code>store</code>对象的<code>commit</code>方法调用。</p><p><code>actions</code>中定义的函数不能直接调用，只能通过<code>store</code>对象的<code>dispatch</code>方法调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>) <span class="hljs-comment">//导入vuex，在次文件中统一管理共享数据</span><br><br><span class="hljs-comment">//集中管理多个组件共享的数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123; <span class="hljs-comment">//集中定义共享数据</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;未登录游客&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">mutations</span>: &#123; <span class="hljs-comment">//修改共享数据只能通过mutations实现，必须是同步操作</span><br>    <span class="hljs-title function_">setName</span>(<span class="hljs-params">state, newName</span>)&#123;<br>      state.<span class="hljs-property">name</span> = newName<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123; <span class="hljs-comment">//通过actions可以调用到mutations，在actions中可以进行异步操作</span><br>    <span class="hljs-title function_">setNameByAxios</span>(<span class="hljs-params">context</span>)&#123;<br>      <span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/admin/employee/login&#x27;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>          <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>          <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span><br>        &#125;<br>      &#125;).<span class="hljs-title function_">then</span>( <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">1</span>)&#123;<br>          <span class="hljs-comment">//异步请求后，需要修改共享数据</span><br>          <span class="hljs-comment">//在actions中调用mutation中定义的setName函数</span><br>          context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;setName&#x27;</span>, res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">name</span>)<br>        &#125;<br>      &#125;)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;!-- App.vue --&gt;<br>&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    欢迎你，&#123;&#123; $store.state.name &#125;&#125;<br>    &lt;input type=&quot;button&quot; value=&quot;通过mutations修改共享数据&quot; @click=&quot;handleUpdate&quot;/&gt;<br>    &lt;input type=&quot;button&quot; value=&quot;通过actions修改共享数据&quot; @click=&quot;handleCallAction&quot;/&gt;<br><br>    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;<br>    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;<br><br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    HelloWorld<br>  &#125;,<br>  methods: &#123;<br>    handleUpdate()&#123;<br>      //mutations中定义的函数不能直接调用，必须通过这种方式来调用<br>      //第一个参数为mutations中定义的函数名称，第二个参数为传递的参数<br>      this.$store.commit(&#x27;setName&#x27;, &#x27;李四&#x27;)<br>    &#125;,<br>    handleCallAction()&#123;<br>      //调用actions中定义的函数<br>      this.$store.dispatch(&#x27;setNameByAxios&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: Avenir, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//vue.config.js文件，配置代理</span><br><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7777</span>,<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span> : &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>        <span class="hljs-string">&#x27;^/api&#x27;</span> : <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><ul><li><code>TypeScript</code>（简称：<code>TS</code>） 是微软推出的开源语言。</li><li><code>TypeScript</code>是<code>JavaScript</code>的超集（<code>JS</code>有的<code>TS</code>都有）。</li><li><code>TypeScript = Type + JavaScript</code>（在<code>JS</code>基础上增加了类型支持）。</li><li><code>TypeScript</code>文件扩展名为<code>ts</code>。</li><li><code>TypeScript</code>可编译成标准的<code>JavaScript</code>，并且在编译时进行类型检查。</li></ul><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/TypeScript%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91.png"></p><p>在前端项目中使用<code>TypeScript</code>，需要进行安装，命令为：<code>npm install -g typescript</code>。</p><p>查看<code>TypeScript</code>版本：<code>tsc -v</code>。</p><h5 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h5><p>1.创建<code>hello.ts</code>文件。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//定义一个函数 hello，并且指定参数类型为string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params"><span class="hljs-attr">msg</span>:<span class="hljs-built_in">string</span></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)<br>&#125;<br><br><span class="hljs-comment">//调用上面的函数，传递非string类型的参数</span><br><span class="hljs-title function_">hello</span>(<span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><p>2.使用<code>tsc</code>命令编译<code>hello.ts</code>文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS E:\2_learn\Java-waimai\code\vue_project\ts-demo&gt; tsc .\hello.ts<br>hello.ts:7:7 - error TS2345: Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;string&#x27;.<br><br>7 hello(123)<br>        ~~~<br><br><br>Found 1 error in hello.ts:7<br></code></pre></td></tr></table></figure><p>可以看到编译报错，提示参数类型不匹配。这说明在编译时<code>TS</code>会进行类型检查。需要注意的是在编译为<code>JS</code>文件后，类型会被擦除。</p><p>编译后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//定义一个函数 hello，并且指定参数类型为string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">msg</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg);<br>&#125;<br><span class="hljs-comment">//调用上面的函数，传递非string类型的参数</span><br><span class="hljs-title function_">hello</span>(<span class="hljs-string">&quot;hi&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>TypeScript</code>和<code>JavaScript</code>的区别：</p><ul><li><code>TS</code>属于静态类型编程语言，<code>JS</code>属于动态类型编程语言。</li><li>静态类型在编译期做类型检查，动态类型在执行期做类型检查。</li><li>对于<code>JS</code>来说，需要等到代码执行的时候才能发现错误（晚）。</li><li>对于<code>TS</code>来说，在代码编译的时候就可以发现错误（早）。</li><li>配合<code>VSCode</code>开发工具，<code>TS</code>可以提前到在编写代码的同时就发现代码中的错误，减少找<code>Bug</code>、改<code>Bug</code>的时间。</li></ul><h5 id="TypeScript-常用类型"><a href="#TypeScript-常用类型" class="headerlink" title="TypeScript 常用类型"></a>TypeScript 常用类型</h5><table><thead><tr><th><strong>类型</strong></th><th><strong>例</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[],  boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() &#x3D;&gt;  void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>“a”|”b”|”c”</td><td>限制变量或参数的取值</td></tr><tr><td>class 类</td><td>class Animal</td><td></td></tr></tbody></table><p>基于<code>TS</code>进行前端开发时，类型标注的位置有如下3个：标注变量、标注参数、标注返回值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//标注变量，指定变量msg的类型为string</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">msg</span>:<span class="hljs-built_in">string</span>=<span class="hljs-string">&#x27;hello ts !&#x27;</span><br><span class="hljs-comment">//标注参数和返回值，指定m2函数的参数类型为string，并且返回值也为string</span><br><span class="hljs-keyword">const</span> m2 = (name : <span class="hljs-built_in">string</span>) : <span class="hljs-function"><span class="hljs-params">string</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> name.<span class="hljs-title function_">toLowerCase</span>() + msg<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="字符串、数字、布尔类型"><a href="#字符串、数字、布尔类型" class="headerlink" title="字符串、数字、布尔类型"></a>字符串、数字、布尔类型</h6><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//字符串类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;itcast&#x27;</span><br><br><span class="hljs-comment">//数字类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">20</span><br><br><span class="hljs-comment">//布尔类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">isTrue</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(username)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isTrue)<br></code></pre></td></tr></table></figure><h6 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h6><p>字面量类型用于限定数据的取值范围，类似于<code>java</code>中的枚举。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//字面量类型</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printText</span>(<span class="hljs-params"><span class="hljs-attr">s</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">alignment</span>: <span class="hljs-string">&#x27;left&#x27;</span>|<span class="hljs-string">&#x27;right&#x27;</span>|<span class="hljs-string">&#x27;center&#x27;</span></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s,alignment)<br>&#125;<br><br><span class="hljs-title function_">printText</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;left&#x27;</span>)<br><span class="hljs-comment">//printText(&#x27;hello&#x27;,&#x27;aaa&#x27;)</span><br></code></pre></td></tr></table></figure><h6 id="interface类型"><a href="#interface类型" class="headerlink" title="interface类型"></a>interface类型</h6><p><code>interface</code>类型是<code>TS</code>中的复杂类型，它让<code>TypeScript</code>具备了<code>JavaScript</code>所缺少的、描述较为复杂数据结构的能力。</p><p>可以通过在属性名后面加上<code>?</code>，表示当前属性为可选。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    age?: <span class="hljs-built_in">number</span> <span class="hljs-comment">//当前属性为可选</span><br>&#125;<br><br><span class="hljs-comment">//定义变量，并且指定为Cat类型</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">c1</span>: <span class="hljs-title class_">Cat</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">c2</span>: <span class="hljs-title class_">Cat</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小白&#x27;</span>&#125; <span class="hljs-comment">//正确， age属性为可选</span><br><span class="hljs-comment">//const c3: Cat = &#123;name: &#x27;小白&#x27;, age: 1, sex: &#x27;&#x27;&#125; //错误，多出sex属性</span><br></code></pre></td></tr></table></figure><h6 id="class-类型"><a href="#class-类型" class="headerlink" title="class 类型"></a>class 类型</h6><p>使用<code>class</code>关键字来定义类，类中可以包含属性、构造方法、普通方法等。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//定义一个类，使用class关键字</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>; <span class="hljs-comment">//指定类中的属性</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span></span>)&#123; <span class="hljs-comment">//构造方法</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br><br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-title function_">study</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;正在学习&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用User类型</span><br><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;张三&#x27;</span>)<br><span class="hljs-comment">//输出类中的属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//调用类中的方法</span><br>user.<span class="hljs-title function_">study</span>()<br></code></pre></td></tr></table></figure><p>在定义类时，可以使用<code>implments</code>关键字实现接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-title function_">eat</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-comment">//定义一个类，实现上面的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bird</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br><br>    <span class="hljs-title function_">eat</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;eat&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建类型为Bird的对象</span><br><span class="hljs-keyword">const</span> b1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>(<span class="hljs-string">&#x27;燕子&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b1.<span class="hljs-property">name</span>)<br>b1.<span class="hljs-title function_">eat</span>()<br></code></pre></td></tr></table></figure><p>在定义类时，可以使用<code>extends</code>关键字 继承其他类。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//定义一个类，继承上面的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parrot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Bird</span> &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27; say hello&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> myParrot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parrot</span>(<span class="hljs-string">&#x27;Polly&#x27;</span>)<br><br>myParrot.<span class="hljs-title function_">eat</span>()<br>myParrot.<span class="hljs-title function_">say</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myParrot.<span class="hljs-property">name</span>)<br></code></pre></td></tr></table></figure><h3 id="前端环境搭建"><a href="#前端环境搭建" class="headerlink" title="前端环境搭建"></a>前端环境搭建</h3><h4 id="代码导入"><a href="#代码导入" class="headerlink" title="代码导入"></a>代码导入</h4><p>直接导入课程资料中提供的前端工程，在此基础上开发即可。</p><p>使用的<code>node</code>版本为<code>12.22.0</code>可以成功<code>npm install</code>所需的包。</p><h4 id="前端代码结构"><a href="#前端代码结构" class="headerlink" title="前端代码结构"></a>前端代码结构</h4><p><img src="/2024/11/21/Java%E9%A1%B9%E7%9B%AE%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png"></p><ul><li><code>api</code>：存放封装了<code>Ajax</code>请求文件的目录。</li><li><code>components</code>：公共组件存放目录。</li><li><code>views</code>：存放视图组件的目录。</li><li><code>App.vue</code>：项目的主组件，页面的入口文件。</li><li><code>main.ts</code>：整个项目的入口文件。</li><li><code>router.ts</code>：路由文件。</li></ul><h3 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h3><h4 id="员工分页查询"><a href="#员工分页查询" class="headerlink" title="员工分页查询"></a>员工分页查询</h4><p>1.从路由文件<code>router.ts</code>中找到员工管理页面（组件）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;employee&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/employee/index.vue&quot;</span>),<br>            <span class="hljs-attr">meta</span>: &#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;员工管理&quot;</span>,<br>                    <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;icon-employee&quot;</span><br>            &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>2.制作页面头部效果，为<code>查询</code>按钮绑定事件，发送<code>Ajax</code>请求获取分页数据。</p><p>输入框和按钮都是使用<code>ElementUI</code>提供的组件。</p><p>对于前端的组件只需要参考<code>ElementUI</code>提供的文档，进行修改即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;div class=&quot;tableBar&quot;&gt;<br>    &lt;label style=&quot;margin-right: 5px;&quot;&gt;<br>        员工姓名：<br>    &lt;/label&gt;<br>    &lt;el-input placeholder=&quot;请输入员工姓名&quot; style=&quot;width: 15%;&quot;  v-model=&quot;name&quot; /&gt;<br>    &lt;el-button type=&quot;primary&quot; style=&quot;margin-left: 25px;&quot; @click=&quot;pageQuery()&quot;&gt;查询&lt;/el-button&gt;<br>    &lt;el-button type=&quot;primary&quot; style=&quot;float: right;&quot;&gt;+添加员工&lt;/el-button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>3.在<code>src/api/employee.ts</code>中定义方法，发送<code>Ajax</code>请求获取分页数据。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 分页查询员工</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getEmployeeList</span> = (<span class="hljs-params"><span class="hljs-attr">params</span>: <span class="hljs-built_in">any</span></span>) =&gt;<br><span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">`/employee/page`</span>,<br>    <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;params&#x27;</span>: params<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.（1）定义<code>pageQuery</code>方法，发送<code>Ajax</code>请求获取分页数据。</p><p>先验证当前<code>pageQuery</code>方法能否正常执行。按照规范，真正发送<code>Ajax</code>请求的代码需要封装到<code>api</code>目录下的<code>ts</code>文件中（<code>src/api/employee.ts</code>）。<code>pageQuery</code>方法中调用<code>getEmployeeList</code>方法。</p><p>（2）在员工管理组件中导入<code>employee.ts</code>中定义的方法，并在<code>data() </code>方法中定义分页相关的模型数据。</p><p>注意：需要将<code>name</code>属性和上面的输入框进行双向绑定。</p><p>（3）提供<code>vue</code>的初始化方法<code>created()</code>，在页面加载后就查询分页数据。</p><p>（4）使用<code>ElementUI</code>提供的表格组件展示分页数据。</p><p>（5）动态展示启用、禁用按钮：</p><ul><li>如果当前员工的状态为启用，则展示为【禁用】按钮。</li><li>如果当前员工的状态为禁用，则展示为【启用】按钮。</li></ul><p>（6）使用<code>ElementUI</code>提供的分页条组件，并绑定事件处理函数。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; getEmployeeList &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/employee&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//员工姓名，对应上面的输入框</span><br>      <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">//页码</span><br>      <span class="hljs-attr">pageSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">//每页记录数</span><br>      <span class="hljs-attr">total</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//总记录数</span><br>      <span class="hljs-attr">records</span>: [] <span class="hljs-comment">//当前页要展示的数据集合</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pageQuery</span>() <span class="hljs-comment">//当页面加载的时候发送一次分页请求</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-title function_">pageQuery</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> params = &#123; <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-attr">page</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span>, <span class="hljs-attr">pageSize</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">pageSize</span> &#125;<br>      <span class="hljs-comment">//发送Ajax请求，访问后端服务，获取分页数据</span><br>      <span class="hljs-title function_">getEmployeeList</span>(params).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">total</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">total</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">records</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">records</span><br>        &#125;<br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求出错了：&quot;</span> + err.<span class="hljs-property">message</span>)<br>      &#125;)<br>    &#125;,<br><br>    <span class="hljs-comment">//pageSize发生变化时触发</span><br>    <span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">pageSize</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">pageSize</span> = pageSize<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pageQuery</span>()<br>    &#125;,<br>    <span class="hljs-comment">//page发生变化时出发</span><br>    <span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">page</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">page</span> = page<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pageQuery</span>()<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="启用禁用员工账号"><a href="#启用禁用员工账号" class="headerlink" title="启用禁用员工账号"></a>启用禁用员工账号</h4><p>1.为启用、禁用按钮绑定单击事件<code>handleStartOrStop</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;el-table-column label=&quot;操作&quot;&gt;<br>    &lt;template slot-scope=&quot;scope&quot;&gt;<br>        &lt;!-- type=&quot;text&quot;表示看起来像文字，但本质是一个按钮 --&gt;<br>        &lt;el-button type=&quot;text&quot;&gt;修改&lt;/el-button&gt;<br>        &lt;el-button type=&quot;text&quot; @click=&quot;handleStartOrStop(scope.row)&quot;&gt;&#123;&#123; scope.row.status === 1 ? &#x27;禁用&#x27; : &#x27;启用&#x27;<br>            &#125;&#125;&lt;/el-button&gt;<br>    &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><p>2.编写handleStartOrStop&#96;方法。</p><p>注意：如果是管理员账号则不允许更改账号状态。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//启用禁用员工账号</span><br><span class="hljs-title function_">handleStartOrStop</span>(<span class="hljs-params">row</span>) &#123;<br>    <span class="hljs-comment">//alert(`id=$&#123;row.id&#125;, status=$&#123;row.status&#125;`)</span><br>    <span class="hljs-keyword">if</span> (row.<span class="hljs-property">username</span> === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;admin为系统的管理员账号，不能更改账号状态！&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-comment">//弹出确认提示框</span><br>    <span class="hljs-variable language_">this</span>.$confirm(<span class="hljs-string">&#x27;确认要修改当前员工账号的状态吗?&#x27;</span>, <span class="hljs-string">&#x27;提示&#x27;</span>, &#123;<br>        <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确定&#x27;</span>,<br>        <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span><br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> p = &#123;<br>            <span class="hljs-attr">id</span>: row.<span class="hljs-property">id</span>,<br>            <span class="hljs-attr">status</span>: !row.<span class="hljs-property">status</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-title function_">enableOrDisableEmployee</span>(p).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;员工的账号状态修改成功&#x27;</span>)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pageQuery</span>()<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在<code>employee.ts</code>中封装启用禁用员工账号方法，发送<code>Ajax</code>请求。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 启用禁用员工账号</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">enableOrDisableEmployee</span> = (<span class="hljs-params"><span class="hljs-attr">params</span>: <span class="hljs-built_in">any</span></span>) =&gt;<br><span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">`/employee/status/<span class="hljs-subst">$&#123;params.status&#125;</span>`</span>,<br>    <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-string">&#x27;params&#x27;</span>: &#123;<span class="hljs-attr">id</span>: params.<span class="hljs-property">id</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h4><p>添加员工操作步骤：</p><ol><li>点击“添加员工”按钮，跳转到新增页面。</li><li>在新增员工页面录入员工相关信息。</li><li>点击“保存”按钮完成新增操作。</li></ol><p>1.为 “添加员工”按钮绑定单击事件。（<code>index.vue</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;el-button type=&quot;primary&quot; style=&quot;float: right;&quot; @click=&quot;handleAddEmp()&quot;&gt;+添加员工&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><p>2.提供<code>handleAddEmp</code>方法，进行路由跳转。（<code>index.vue</code>）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//跳转到新增员工页面（组件）</span><br><span class="hljs-title function_">handleAddEmp</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//路由跳转，跳转到新增员工组件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/employee/add&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：在路由文件中已经配置了如下路由规则。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/employee/add&quot;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/employee/addEmployee.vue&quot;</span>),<br>            <span class="hljs-attr">meta</span>: &#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;添加/修改员工&quot;</span>,<br>                    <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>            &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>3.根据产品原型，开发页面元素。（<code>addEmployee.vue</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div class=&quot;addBrand-container&quot;&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;180px&quot;&gt;<br>        &lt;el-form-item label=&quot;账号&quot; prop=&quot;username&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.username&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;员工姓名&quot; prop=&quot;name&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.name&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;手机号&quot; prop=&quot;phone&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.phone&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;性别&quot; prop=&quot;sex&quot;&gt;<br>          &lt;el-radio v-model=&quot;ruleForm.sex&quot; label=&quot;1&quot;&gt;男&lt;/el-radio&gt;<br>          &lt;el-radio v-model=&quot;ruleForm.sex&quot; label=&quot;2&quot;&gt;女&lt;/el-radio&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;身份证号&quot; prop=&quot;idNumber&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.idNumber&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;div class=&quot;subBox&quot;&gt;<br>          &lt;!-- submitForm中第一个参数对ruleForm再次校验；第二个参数，false：保存后跳转分页查询页面，true：保存后留在当前页面继续添加 --&gt;<br>          &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;, false)&quot;&gt;保存&lt;/el-button&gt;<br>          &lt;!-- 通过this.optType区分新增和修改页面，add为新增，update为修改 --&gt;<br>          &lt;el-button v-if=&quot;this.optType === &#x27;add&#x27;&quot; type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;, true)&quot;&gt;保存并继续添加员工<br>          &lt;/el-button&gt;<br>          &lt;el-button @click=&quot;() =&gt; this.$router.push(&#x27;/employee&#x27;)&quot;&gt;返回&lt;/el-button&gt;<br>        &lt;/div&gt;<br>      &lt;/el-form&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.addBrand &#123;<br>  &amp;-container &#123;<br>    margin: 30px;<br>    margin-top: 30px;<br><br>    .HeadLable &#123;<br>      background-color: transparent;<br>      margin-bottom: 0px;<br>      padding-left: 0px;<br>    &#125;<br><br>    .container &#123;<br>      position: relative;<br>      z-index: 1;<br>      background: #fff;<br>      padding: 30px;<br>      border-radius: 4px;<br><br>      // min-height: 500px;<br>      .subBox &#123;<br>        padding-top: 30px;<br>        text-align: center;<br>        border-top: solid 1px $gray-5;<br>      &#125;<br>    &#125;<br><br>    .idNumber &#123;<br>      margin-bottom: 39px;<br>    &#125;<br><br>    .el-form-item &#123;<br>      margin-bottom: 29px;<br>    &#125;<br><br>    .el-input &#123;<br>      width: 293px;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>4.在<code>employee.ts</code>中封装新增员工方法，发送<code>Ajax</code>请求。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 新增员工</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">addEmployee</span> = (<span class="hljs-params"><span class="hljs-attr">params</span>: <span class="hljs-built_in">any</span></span>) =&gt;<br><span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">`/employee`</span>,<br>    <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: params <span class="hljs-comment">//请求体传参</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>5.定义模型数据和表单校验规则。在<code>methods</code>中定义提交表单的方法。（<code>addEmployee.vue</code>）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; addEmployee &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/employee&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">optType</span>: <span class="hljs-string">&#x27;add&#x27;</span>,<br>      <span class="hljs-attr">ruleForm</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-attr">phone</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">idNumber</span>: <span class="hljs-string">&#x27;&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">rules</span>: &#123; <span class="hljs-comment">//校验规则</span><br>        <span class="hljs-attr">name</span>: [<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入员工姓名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125; <span class="hljs-comment">//失去焦点时，如果不输入该值，会报message中的错误</span><br>        ],<br>        <span class="hljs-attr">username</span>: [<br>          &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入员工账号&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;<br>        ],<br>        <span class="hljs-attr">phone</span>: [ <span class="hljs-comment">//validator是校验器，rule：规则，value：当前用户输入，callback：回调</span><br>          &#123;<br>            <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span> || (! <span class="hljs-regexp">/^1(3|4|5|6|7|8|9)\d&#123;9&#125;$/</span>.<span class="hljs-title function_">test</span>(value))) &#123;<br>                <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入正确的手机号！&#x27;</span>))<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">callback</span>()<br>              &#125;<br>            &#125;<br>          &#125;<br>        ],<br>        <span class="hljs-attr">idNumber</span>: [ <span class="hljs-comment">//validator是校验器，rule：规则，value：当前用户输入，callback：回调</span><br>          &#123;<br>            <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span> || (! <span class="hljs-regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|^\d&#123;17&#125;(X|x)$/</span>.<span class="hljs-title function_">test</span>(value))) &#123;<br>                <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入正确的身份证号！&#x27;</span>))<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">callback</span>()<br>              &#125;<br>            &#125;<br>          &#125;<br>        ]<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">submitForm</span>(<span class="hljs-params">fromName, isContinue</span>) &#123;<br>      <span class="hljs-comment">//进行表单校验</span><br>      <span class="hljs-comment">//因为ref=&quot;ruleForm&quot;，所以通过$refs得到表单对象</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[fromName].<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (valid) &#123;<br>          <span class="hljs-comment">//表单校验通过</span><br>          <span class="hljs-title function_">addEmployee</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ruleForm</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">1</span>) &#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;员工添加成功！&#x27;</span>)<br><br>              <span class="hljs-keyword">if</span> (isContinue) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">ruleForm</span> = &#123;<br>                  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>                  <span class="hljs-attr">phone</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                  <span class="hljs-attr">idNumber</span>: <span class="hljs-string">&#x27;&#x27;</span><br>                &#125;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/employee&#x27;</span>)<br>              &#125;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>)<br>            &#125;<br>          &#125;)<br>        &#125;<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h4><p>修改员工操作步骤：</p><ol><li>点击 “修改”按钮，跳转到修改页面。</li><li>在修改员工页面录入员工相关信息。</li><li>点击“保存”按钮完成修改操作。</li></ol><p>注意：</p><p>由于添加员工和修改员工的表单项非常类似，所以添加和修改操作可以共用同一个页面（<code>addEmployee.vue</code>）。</p><p>修改员工涉及到原始数据回显，所以需要传递员工<code>id</code>作为参数。</p><p>1.在员工管理页面<code>index.vue</code>中，为“修改”按钮绑定单击事件，用于跳转到修改页面。（<code>index.vue</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;el-button type=&quot;text&quot; @click=&quot;handleUpdateEmp(scope.row)&quot;&gt;修改&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//跳转到修改员工页面（组件）</span><br><span class="hljs-title function_">handleUpdateEmp</span>(<span class="hljs-params">row</span>)&#123;<br>    <span class="hljs-keyword">if</span>(row.<span class="hljs-property">username</span> === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;admin为系统的管理员账号，不能修改！&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">//跳转到修改页面，通过地址栏传递参数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/employee/add&#x27;</span>,<br>        <span class="hljs-attr">query</span>: &#123;<span class="hljs-attr">id</span>: row.<span class="hljs-property">id</span>&#125; <span class="hljs-comment">//与增加组件的区别，传递了id参数</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>2.由于<code>addEmployee.vue</code>为新增和修改共用页面，需要能够区分当前操作：</p><p>如果路由中传递了<code>id</code>参数，则当前操作为修改。</p><p>如果路由中没有传递<code>id</code>参数，则当前操作为新增。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;div class=&quot;subBox&quot;&gt;<br>    &lt;!-- submitForm中第一个参数对ruleForm再次校验；第二个参数，false：保存后跳转分页查询页面，true：保存后留在当前页面继续添加 --&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;, false)&quot;&gt;保存&lt;/el-button&gt;<br>    &lt;!-- 通过this.optType区分新增和修改页面，add为新增，update为修改 --&gt;<br>    &lt;el-button v-if=&quot;this.optType === &#x27;add&#x27;&quot; type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;, true)&quot;&gt;保存并继续添加员工<br>    &lt;/el-button&gt;<br>    &lt;el-button @click=&quot;() =&gt; this.$router.push(&#x27;/employee&#x27;)&quot;&gt;返回&lt;/el-button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>3.如果是修改操作，需要根据<code>id</code>查询员工原始信息用于页面回显，在<code>employee.ts</code>中创建如下方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 根据id查询员工</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">queryEmployeeById</span> = (<span class="hljs-params"><span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span></span>) =&gt;<br><span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">`/employee/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>    <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;GET&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>4.在修改员工页面的<code>created</code>方法中查询员工原始信息用于页面数据回显。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//获取路由参数（id），如果有则为修改操作，否则为新增操作</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">optType</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span>.<span class="hljs-property">id</span> ? <span class="hljs-string">&#x27;update&#x27;</span> : <span class="hljs-string">&#x27;add&#x27;</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">optType</span> === <span class="hljs-string">&#x27;update&#x27;</span>) &#123;<br>        <span class="hljs-comment">//修改操作，需要根据id查询员工信息用于页面回显</span><br>        <span class="hljs-title function_">queryEmployeeById</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">query</span>.<span class="hljs-property">id</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">ruleForm</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>5.如果是修改操作，“保存并继续添加员工”按钮则不需要显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;div class=&quot;subBox&quot;&gt;<br>    &lt;!-- submitForm中第一个参数对ruleForm再次校验；第二个参数，false：保存后跳转分页查询页面，true：保存后留在当前页面继续添加 --&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;, false)&quot;&gt;保存&lt;/el-button&gt;<br>    &lt;!-- 通过this.optType区分新增和修改页面，add为新增，update为修改 --&gt;<br>    &lt;el-button v-if=&quot;this.optType === &#x27;add&#x27;&quot; type=&quot;primary&quot; @click=&quot;submitForm(&#x27;ruleForm&#x27;, true)&quot;&gt;保存并继续添加员工<br>    &lt;/el-button&gt;<br>    &lt;el-button @click=&quot;() =&gt; this.$router.push(&#x27;/employee&#x27;)&quot;&gt;返回&lt;/el-button&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>6.在<code>employee.ts</code>中创建方法，用于修改员工。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">// 修改员工</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateEmployee</span> = (<span class="hljs-params"><span class="hljs-attr">params</span>: <span class="hljs-built_in">any</span></span>) =&gt;<br><span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">`/employee`</span>,<br>    <span class="hljs-string">&#x27;method&#x27;</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-string">&#x27;data&#x27;</span>: params <span class="hljs-comment">//请求体传参</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>7.修改<code>submitForm</code>方法，需要根据当前操作类型执行新增或者修改操作。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs TYpeScript"><span class="hljs-title function_">submitForm</span>(<span class="hljs-params">fromName, isContinue</span>) &#123;<br>    <span class="hljs-comment">//进行表单校验</span><br>    <span class="hljs-comment">//因为ref=&quot;ruleForm&quot;，所以通过$refs得到表单对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[fromName].<span class="hljs-title function_">validate</span>(<span class="hljs-function">(<span class="hljs-params">valid</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (valid) &#123;<br>            <span class="hljs-comment">//表单校验通过</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">optType</span> === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;<br>                <span class="hljs-title function_">addEmployee</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ruleForm</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;员工添加成功！&#x27;</span>)<br><br>                        <span class="hljs-keyword">if</span> (isContinue) &#123;<br>                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">ruleForm</span> = &#123;<br>                                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                                <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                                <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>                                <span class="hljs-attr">phone</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                                <span class="hljs-attr">idNumber</span>: <span class="hljs-string">&#x27;&#x27;</span><br>                            &#125;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/employee&#x27;</span>)<br>                        &#125;<br><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span>)<br>                    &#125;<br>                &#125;)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//修改操作</span><br>                <span class="hljs-title function_">updateEmployee</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ruleForm</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;员工信息修改成功&#x27;</span>)<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/employee&#x27;</span>)<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">msg</span>)<br>                    &#125;<br>                &#125;)<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h3><h4 id="套餐分页查询"><a href="#套餐分页查询" class="headerlink" title="套餐分页查询"></a>套餐分页查询</h4>]]></content>
    
    
    <categories>
      
      <category>Java项目苍穹外卖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java项目苍穹外卖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb后端开发：Maven高级</title>
    <link href="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/"/>
    <url>/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h3><h4 id="分模块设计与开发"><a href="#分模块设计与开发" class="headerlink" title="分模块设计与开发"></a>分模块设计与开发</h4><p>分模块设计：将项目按照功能拆分成若干个子模块。</p><p>作用：方便项目的管理维护、扩展，也方便模块间的相互调用，资源共享。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/%E5%88%86%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91.png"></p><p>1.创建<code>maven</code>模块<code>tlias-pojo</code>，存放实体类。需要在同一个名称的包下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-pojo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.创建<code>maven</code>模块<code>tlias-utils</code>，存放相关工具类。需要在同一个名称的包下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--阿里云OSS依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Web开发起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.主项目需要在<code>pom.xml</code>引入各个子模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- tlias-pojo --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-pojo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- tlias-utils --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：分模块开发需要先针对模块功能进行设计，再进行编码。不会先将工程开发完毕，然后进行拆分。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h5><p>概念：继承描述的是两个工程间的关系，与<code>Java</code>中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p><p>作用：简化依赖配置、统一管理依赖。</p><p>实现：<code>&lt;parent&gt; … &lt;/parent&gt;</code>。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png"></p><p>步骤：</p><p>1.创建<code>maven</code>模块<code>tlias-parent </code>，该工程为父工程，设置打包方式<code>pom</code>（默认<code>jar</code>）。</p><p>三种打包方式：</p><ol><li><code>jar</code>：普通模块打包，<code>springboot</code>项目基本都是<code>jar</code>包（内嵌<code>tomcat</code>运行）。</li><li><code>war</code>：普通<code>web</code>程序打包，需要部署在外部的<code>tomcat</code>服务器中运行。</li><li><code>pom</code>：父工程或聚合工程，该模块不写代码，仅进行依赖管理。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>        <span class="hljs-comment">&lt;!--父工程的相对路径，如果按照上述配置，则从本地仓库中查找--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置打包方式为pom--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 子模块共有的依赖：lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在<strong>子工程</strong>（<code>tlias-pojo</code>、<code>tlias-utils</code>、<code>tlias-web-management</code>）的<code>pom.xml</code>文件中，配置继承关系。子工程中可以删除共有的依赖<code>lombok</code>，因为子工程可以继承父工程的依赖。</p><p>注意：</p><ul><li>在子工程中，配置了继承关系之后，坐标中的<code>groupId</code>是可以省略的，因为会自动继承父工程的 。</li><li><code>relativePath</code>指定父工程的<code>pom</code>文件的相对位置（如果不指定，将从本地仓库&#x2F;远程仓库查找该工程）。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--指定父工程为tlias-parent--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../tlias-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-comment">&lt;!--指定父工程的相对路径--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--&lt;groupId&gt;com.itheima&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--子工程会自动继承父工程的groupId，所以不需要配置子工程的groupId--&gt;</span><br></code></pre></td></tr></table></figure><p>3.在<strong>父工程</strong>中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）。</p><p>注意：若父子工程都配置了同一个依赖的不同版本，以子工程的为准。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/Maven%E9%A1%B9%E7%9B%AE%E7%88%B6%E5%AD%90%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84.png"></p><h5 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h5><p>在<code>maven</code>中，可以在父工程的<code>pom</code>文件中通过<code>&lt;dependencyManagement&gt;</code>来统一管理依赖版本。</p><p>子工程引入依赖时，无需指定<code>&lt;version&gt;</code>版本号，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p><p>1.在父工程的<code>pom.xml</code>文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>        <span class="hljs-comment">&lt;!--父工程的相对路径，如果按照上述配置，则从本地仓库中查找--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置打包方式为pom--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--直接依赖，子工程会加入该依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--统一管理依赖版本：在父工程指定了依赖的版本，则子工程不需要指定依赖版本--&gt;</span><br>    <span class="hljs-comment">&lt;!--只管理依赖版本，子工程需要该依赖还需要引入这些依赖，但无需指定版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--阿里云OSS依赖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--Web开发起步依赖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在子工程<code>tlias-utils</code>的<code>pom.xml</code>文件中可以去掉依赖的版本号。</p><h6 id="自定义属性-引用属性"><a href="#自定义属性-引用属性" class="headerlink" title="自定义属性&#x2F;引用属性"></a>自定义属性&#x2F;引用属性</h6><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/Maven%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>        <span class="hljs-comment">&lt;!--父工程的相对路径，如果按照上述配置，则从本地仓库中查找--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tlias-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置打包方式为pom--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.34<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jjwt.version</span>&gt;</span>0.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">jjwt.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aliyun.oss.version</span>&gt;</span>3.17.4<span class="hljs-tag">&lt;/<span class="hljs-name">aliyun.oss.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jaxb.version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">jaxb.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation.version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">activation.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jaxb.runtime.version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">jaxb.runtime.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--直接依赖，子工程会加入该依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--统一管理依赖版本：在父工程指定了依赖的版本，则子工程不需要指定依赖版本--&gt;</span><br>    <span class="hljs-comment">&lt;!--只管理依赖版本，子工程需要该依赖还需要引入这些依赖，但无需指定版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jjwt.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--阿里云OSS依赖--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jaxb.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;activation.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jaxb.runtime.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!--Web开发起步依赖--&gt;</span><br><span class="hljs-comment">&lt;!--            不用配置，父工程已经默认引入了Web开发起步依赖--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;dependency&gt;</span><br><span class="hljs-comment">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="hljs-comment">                &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="hljs-comment">                &lt;version&gt;3.3.5&lt;/version&gt;</span><br><span class="hljs-comment">            &lt;/dependency&gt;--&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;dependencyManagement&gt;</code>与<code>&lt;dependencies&gt;</code>的区别：</p><ol><li><code>&lt;dependencies&gt;</code>是直接依赖，在父工程配置了依赖，子工程会直接继承下来。 </li><li><code>&lt;dependencyManagement&gt;</code>是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需依赖（无需指定版本）。</li></ol><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>打包工程步骤：</p><ol><li>对所有的子模块执行<code>install</code>下载到本地仓库。（非常繁琐）</li><li>对主模块执行<code>package</code>进行打包。</li></ol><p>聚合：将多个模块组织成一个整体，同时进行项目的构建。</p><p>聚合工程： 一个不具有业务功能的“空”工程（有且仅有一个<code>pom</code>文件）。</p><p>作用：快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/Maven%E8%81%9A%E5%90%88.png"></p><p><code>Maven</code>中可以通过<code>&lt;modules&gt;</code>设置当前聚合工程所包含的子模块名称。</p><p>在<code>tlias-parent</code>的<code>pom.xml</code>文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 聚合其他模块 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../tlias-pojo<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../tlias-utils<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../tlias-web-management<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>聚合其他模块之后，可以通过对<code>tlias-parent</code>进行操作，来对所有模块进行处理。对<code>tlias-parent</code>执行<code>clean</code>会将所有模块进行清理。对<code>tlias-parent</code>执行<code>package</code>会对所有模块进行打包操作。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CMD">[INFO] Reactor Summary:<br>[INFO] <br>[INFO] tlias-parent <span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT .......................... SUCCESS [  <span class="hljs-number">0</span>.<span class="hljs-number">169</span> s]<br>[INFO] tlias-pojo <span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT ............................ SUCCESS [  <span class="hljs-number">0</span>.<span class="hljs-number">181</span> s]<br>[INFO] tlias-utils <span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT ........................... SUCCESS [  <span class="hljs-number">0</span>.<span class="hljs-number">115</span> s]<br>[INFO] tlias-web-management <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-SNAPSHOT ................ SUCCESS [  <span class="hljs-number">0</span>.<span class="hljs-number">461</span> s]<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>注意：聚合工程中所包含的模块，在构建时，会自动根据模块间的依赖关系设置构建顺序，与聚合工程中模块的配置书写位置无关。</p><h4 id="继承和聚合"><a href="#继承和聚合" class="headerlink" title="继承和聚合"></a>继承和聚合</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>聚合用于快速构建项目。</p><p>继承用于简化依赖配置、统一管理依赖。</p><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><p>聚合与继承的<code>pom.xml</code>文件打包方式均为<code>pom</code>，可以将两种关系制作到同一个<code>pom</code>文件中。</p><p>聚合与继承均属于设计型模块，并无实际的模块内容。</p><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些。</p><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己。</p><h4 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h4><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</p><p>依赖查找顺序：本地仓库，私服，中央仓库。</p><p>注意：私服在企业项目开发中，一个项目&#x2F;公司，只需要一台即可（无需我们自己搭建，会使用即可）。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/%E7%A7%81%E6%9C%8D.png"></p><h5 id="资源上传与下载"><a href="#资源上传与下载" class="headerlink" title="资源上传与下载"></a>资源上传与下载</h5><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/%E7%A7%81%E6%9C%8D%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD.png"></p><p>项目版本：</p><p><code>RELEASE</code>（发行版本）：功能趋于稳定、当前更新停止，可以用于<strong>发行的版本</strong>，存储在私服中的<code>RELEASE</code>仓库中。</p><p><code>SNAPSHOT</code>（快照版本）：功能不稳定、尚处于开发中的版本，即<strong>快照版本</strong>，存储在私服的<code>SNAPSHOT</code>仓库中。</p><p>1.设置私服的访问用户名&#x2F;密码（<code>settings.xml</code>中的<code>servers</code>中配置）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.<code>IDEA</code>的<code>maven</code>工程的<code>pom</code>文件中配置上传（发布）地址。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--RELEASE 版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-releases/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SNAPSHOT 版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.设置私服依赖下载的仓库组地址（<code>settings.xml</code>中的<code>mirrors</code>、<code>profiles</code>中配置）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>allow-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-public<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>deploy</code>上传。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E9%AB%98%E7%BA%A7/%E7%A7%81%E6%9C%8D%E8%B5%84%E6%BA%90%E4%B8%8A%E4%BC%A0.png"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb后端开发：原理篇</title>
    <link href="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/"/>
    <url>/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="JavaWeb后端开发原理篇"><a href="#JavaWeb后端开发原理篇" class="headerlink" title="JavaWeb后端开发原理篇"></a>JavaWeb后端开发原理篇</h3><h4 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h4><p>1.<code>SpringBoot</code>中支持三种格式的配置文件，优先级为（高-&gt;低）：<code>application.properties</code>、<code>application.yml</code>、<code>application.yaml</code>。</p><p>注意：虽然<code>SpringBoot</code>支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置 （<strong>yml是主流</strong>）。</p><p>2.<code>SpringBoot</code>除了支持配置文件属性配置，还支持<code>Java</code>系统属性和命令行参数的方式进行属性配置。</p><p><code>Java</code>系统属性：<code>-Dserver.port=9000</code></p><p>命令行参数：<code>--server.port=10010</code></p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/IDEA%E9%85%8D%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7.png"></p><p>测试优先级：</p><p>1.执行<code>maven</code>打包指令<code>package</code>。</p><p>注意：<code>Springboot</code>项目进行打包时，需要引入插件<code>spring-boot-maven-plugin</code>（基于官网骨架创建项目，会自动添加该插件）。</p><p>2.执行<code>java</code>指令，运行<code>jar</code>包。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">java -Dserver.port=<span class="hljs-number">9000</span> -jar springboot-web-tlias-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>-SNAPSHOT.jar --server.port=<span class="hljs-number">10010</span><br></code></pre></td></tr></table></figure><p>优先级排序（低-&gt;高）：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">application</span>.yaml（忽略）<br><span class="hljs-built_in">application</span>.yml<br><span class="hljs-built_in">application</span>.properties<br>java系统属性（-Dxxx=xxx）<br>命令行参数（<span class="hljs-comment">--xxx=xxx）</span><br></code></pre></td></tr></table></figure><h4 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h4><h5 id="获取Bean"><a href="#获取Bean" class="headerlink" title="获取Bean"></a>获取Bean</h5><p>默认情况下，<code>Spring</code>项目启动时，会把<code>bean</code>都创建好放在<code>IOC</code>容器中，如果想要主动获取这些<code>bean</code>，可以通过如下方式：</p><ol><li>根据<code>name</code>获取<code>bean</code>：<code>Object getBean(String name)</code></li><li>根据类型获取<code>bean</code>：<code>&lt;T&gt; T getBean(Class&lt;T&gt; requiredType)</code></li><li>根据<code>name</code>获取<code>bean</code>（带类型转换）：<code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code></li></ol><p>注意：上述所说的 【<code>Spring</code>项目启动时，会把其中的<code>bean</code>都创建好】还会受到<strong>作用域</strong>及<strong>延迟初始化</strong>影响，这里主要针对于默认的单例非延迟加载的bean而言。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebTliasApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<span class="hljs-comment">//注入IOC容器对象</span><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBean</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//根据Bean的名称获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> (DeptController) applicationContext.getBean(<span class="hljs-string">&quot;deptController&quot;</span>);<span class="hljs-comment">//Bean对象名称默认首字母小写</span><br>        System.out.println(bean1);<br><br>        <span class="hljs-comment">//根据Bean的类型获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> applicationContext.getBean(DeptController.class);<br>        System.out.println(bean2);<br><br>        <span class="hljs-comment">//根据Bean的名称及类型获取</span><br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">bean3</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;deptController&quot;</span>, DeptController.class);<br>        System.out.println(bean3);<br>        <span class="hljs-comment">//上述三个获取的都是同一个BeanIOC容器对象默认只有一个,默认情况下Bean是单例的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h5><p><code>Spring</code>支持五种作用域，后三种在<code>web</code>环境才生效：</p><table><thead><tr><th><strong>作用域</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>singleton</td><td>容器内同名称的 bean 只有一个实例（单例）（默认）</td></tr><tr><td>prototype</td><td>每次使用该 bean 时会创建新的实例（非单例）</td></tr><tr><td>request</td><td>每个请求范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>session</td><td>每个会话范围内会创建新的实例（web环境中，了解）</td></tr><tr><td>application</td><td>每个应用范围内会创建新的实例（web环境中，了解）</td></tr></tbody></table><p>可以通过<code>@Scope</code>注解来进行配置作用域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//在DeptController类中写一个无参构造函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DeptController</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;调用DeptController构造方法&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//在SpringbootWebTliasApplicationTests中进行测试，观察无参构造函数的调用情况</span><br><span class="hljs-comment">//bean的作用域</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScope</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">DeptController</span> <span class="hljs-variable">deptController</span> <span class="hljs-operator">=</span> applicationContext.getBean(DeptController.class);<br>        System.out.println(deptController);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>默认<code>singleton</code>的<code>bean</code>，在容器启动时被创建（<code>Bean</code>对象在容器启动的时候就实例化了，并将实例化的<code>Bean</code>对象放到<code>IOC</code>容器当中），可以使用<code>@Lazy</code>注解来<strong>延迟初始化</strong>（延迟到第一次使用时）。在一个类上加上<code>@Lazy</code>注解可以让该<code>Bean</code>对象延迟初始化。</li><li><code>prototype</code>的<code>bean</code>，每一次使用该<code>bean</code>的时候都会创建一个新的实例。</li><li>实际开发当中，绝大部分的<code>Bean</code>是单例的，也就是说绝大部分<code>Bean</code>不需要配置<code>scope</code>属性。</li></ol><h5 id="第三方Bean"><a href="#第三方Bean" class="headerlink" title="第三方Bean"></a>第三方Bean</h5><p>1.如果要管理的<code>bean</code>对象来自于第三方（不是自定义的），是无法用<code>@Component</code>及衍生注解声明<code>bean</code>的，就需要用到<code>@Bean</code>注解。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--dom4j,解析xml文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 位于src/main/resources/1.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">emp</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">emp</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebTliasApplication</span> &#123;<span class="hljs-comment">//在启动类声明第三方Bean</span><br><span class="hljs-comment">//声明第三方Bean</span><br><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将方法返回值交给IOC容器管理,成为IOC容器的Bean对象</span><br><span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebTliasApplicationTests</span> &#123;<span class="hljs-comment">//在测试类进行测试</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> SAXReader saxReader;<span class="hljs-comment">//注入SAXReader</span><br><br><span class="hljs-comment">//第三方bean的管理</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testThirdBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//SAXReader saxReader = new SAXReader();//每次使用都需要new SAXReader对象，浪费资源。</span><br><br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(<span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;1.xml&quot;</span>));<br><span class="hljs-type">Element</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> document.getRootElement();<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rootElement.element(<span class="hljs-string">&quot;name&quot;</span>).getText();<br><span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> rootElement.element(<span class="hljs-string">&quot;age&quot;</span>).getText();<br><br>System.out.println(name + <span class="hljs-string">&quot; : &quot;</span> + age);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.若要管理的第三方<code>bean</code>对象，建议对这些<code>bean</code>进行集中分类配置，可以通过<code>@Configuration</code>注解声明一个配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//将启动类中的@Bean删除，将其复制到如下类，统一管理第三方Bean对象</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.config;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> &#123;<br><span class="hljs-comment">//声明第三方Bean</span><br><span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将方法返回值交给IOC容器管理,成为IOC容器的Bean对象</span><br>          <span class="hljs-comment">//通过@Bean注解的name/value属性指定bean名称，如果未指定，默认是方法名（不需要首字母大写）</span><br><span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.通过<code>@Bean</code>注解的<code>name</code>或<code>value</code>属性可以声明<code>bean</code>的名称，如果不指定，默认<code>bean</code>的名称就是方法名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBean2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;saxReader&quot;</span>);<span class="hljs-comment">//通过名字可获得上述Bean对象</span><br>    System.out.println(saxReader);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.如果第三方<code>bean</code>需要依赖其它<code>bean</code>对象，直接在<code>bean</code>定义方法中<strong>设置形参</strong>即可，容器会根据类型自动装配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SAXReader <span class="hljs-title function_">saxReader</span><span class="hljs-params">(DeptService deptService)</span> &#123;<br>    <span class="hljs-comment">//自定义对象通过@Autowired进行依赖注入。</span><br>    <span class="hljs-comment">//第三方Bean通过指定方法形参即可进行依赖注入，Spring容器会进行自动装配，根据类型去IOC容器中找到Bean对象完成注入操作。</span><br>    System.out.println(deptService);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Component</code>及衍生注解与<code>@Bean</code>注解使用场景：</p><ol><li>项目中自定义的，使用<code>@Component</code>及其衍生注解。</li><li>项目中引入第三方的，使用<code>@Bean</code>注解。</li></ol><h4 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h4><h5 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h5><p>起步依赖的原理：<code>Maven</code>的依赖传递。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/%E8%B5%B7%E6%AD%A5%E4%BE%9D%E8%B5%96%E7%9A%84%E5%8E%9F%E7%90%86.png"></p><h5 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h5><p><code>SpringBoot</code>的自动配置就是当<code>Spring</code>容器启动后，一些配置类、<code>Bean</code>对象就自动存入到了<code>IOC</code>容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p><p>【案例】</p><p>新建项目<code>itheima-utils</code>，声明了三个类型的<code>Bean</code>对象（这三个<code>Bean</code>对象所在的包为<code>com.example</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-meta">@Component</span><span class="hljs-comment">//使用@Component注解交给IOC容器管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenParser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TokenParser ... parse ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderParser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HeaderParser ... parse ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderGenerator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;HeaderGenerator ... generate ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-meta">@Configuration</span><span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//交给IOC容器管理</span><br>    <span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><span class="hljs-comment">//交给IOC容器管理</span><br>    <span class="hljs-keyword">public</span> HeaderGenerator <span class="hljs-title function_">headerGenerator</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderGenerator</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在项目<code>itheima-utils</code>同一目录下另一个项目<code>springboot-web-test</code>中，引入项目<code>itheima-utils</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--引入第三方依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>itheima-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后测试是否引入了项目<code>itheima-utils</code>的三个类型的<code>Bean</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebTestApplicationTests</span> &#123;<br><span class="hljs-comment">//获取TokenParser</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTokenParser</span><span class="hljs-params">()</span>&#123;<br>System.out.println(applicationContext.getBean(TokenParser.class));<br>&#125;<br><br><span class="hljs-comment">//获取HeaderParser</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderParser</span><span class="hljs-params">()</span>&#123;<br>System.out.println(applicationContext.getBean(HeaderParser.class));<br>&#125;<br><br><span class="hljs-comment">//获取HeaderGenerator</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderGenerator</span><span class="hljs-params">()</span>&#123;<br>System.out.println(applicationContext.getBean(HeaderGenerator.class));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【报错】<code>org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#39;com.example.TokenParser&#39; available</code>。</p><p>上述三个测试方法都会出现同一个报错：<code>org.springframework.beans.factory.NoSuchBeanDefinitionException</code>。因为启动类的注解<code>@SpringBootApplication</code>进行包扫描时，扫描范围是当前包及其子包，即：<code>com.itheima</code>及其子包，所以无法扫描第三方依赖中的<code>com.example</code>这个包。</p><h6 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h6><p>方案一：<code>@ComponentScan</code>组件扫描（使用繁琐，性能低）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ComponentScan(&#123;&quot;com.itheima&quot;, &quot;com.example&quot;&#125;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">SpringbootWebTestApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(SpringbootWebTestApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方案二：<code>@Import</code>导入。使用<code>@Import</code>导入的类会被<code>Spring</code>加载到<code>IOC</code>容器中，导入形式主要有以下几种：</p><p>1.导入普通类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Import(&#123;TokenParser.class&#125;)</span><span class="hljs-comment">//导入普通类（普通类上不用加任何注解），交给IOC容器管理</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">SpringbootWebTestApplication</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>2.导入配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Import(&#123;HeaderConfig.class&#125;)</span><span class="hljs-comment">//导入配置类，交给IOC容器管理</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">SpringbootWebTestApplication</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>3.导入<code>ImportSelector</code>接口实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportSelector</span> &#123;<br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;com.example.HeaderConfig&quot;</span>&#125;;<br>        <span class="hljs-comment">//返回类名数组，将这些类交给IOC容器管理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Import(&#123;MyImportSelector.class&#125;)</span><span class="hljs-comment">//导入ImportSelector接口实现类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">SpringbootWebTestApplication</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>4.<code>@EnableXxxx</code>注解，封装<code>@Import</code>注解。（让第三方提供要导入的类，更方便，是<code>SpringBoot</code>中采用的方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Import(MyImportSelector.class)</span><span class="hljs-comment">//第三方使用@Import导入需要的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableHeaderConfig &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableHeaderConfig</span><span class="hljs-comment">//使用第三方提供的注解导入类</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">SpringbootWebTestApplication</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h6 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h6><p><code>@SpringBootApplication</code>：该注解标识在<code>SpringBoot</code>工程引导类上，是<code>SpringBoot</code>中最最最重要的注解。该注解由三个部分组成：</p><ol><li><p><code>@SpringBootConfiguration</code>：该注解与<code>@Configuration</code>注解作用相同，用来<strong>声明当前也是一个配置类</strong>。所以可以在启动类中声明第三方<code>Bean</code>，因为启动类也是一个配置类。</p><p><code>@indexed</code>用来加速应用启动。</p></li><li><p><code>@ComponentScan</code>：<strong>组件扫描</strong>，默认扫描当前引导类所在包及其子包。</p></li><li><p><code>@EnableAutoConfiguration</code>：<code>SpringBoot</code>实现<strong>自动化配置的核心注解</strong>。</p></li></ol><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81%E8%B7%9F%E8%B8%AA%EF%BC%881%EF%BC%89.png"></p><p><code>spring.factories</code>是<code>SpringBoot</code>早期自动配置加载的文件，在<code>SpringBoot2.7.x</code>版本之后，提供了全新的自动配置文件<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，会兼容<code>SpringBoot</code>文件。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%BA%90%E7%A0%81%E8%B7%9F%E8%B8%AA%EF%BC%882%EF%BC%89.png"></p><p><code>@Conditional</code></p><p> 作用：按照一定的条件进行判断，在满足给定条件后才会注册对应的<code>Bean</code>对象到<code>Spring IOC</code>容器中。</p><p> 位置：方法、类。</p><p> <code>@Conditional</code>本身是一个父注解，派生出大量的子注解：</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/@Conditional%E7%9A%84%E5%AD%90%E6%B3%A8%E8%A7%A3.png"></p><p>1.<code>@ConditionalOnClass</code>：判断环境中是否有对应字节码文件，才注册<code>bean</code>到<code>IOC</code>容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnClass(name = &quot;io.jsonwebtoken.Jwts&quot;)</span><br><span class="hljs-comment">//Spring容器启动时自动判断当前环境中是否存在指定的Jwts这个类，存在这个类才会将如下Bean对象注册到IOC容器中</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果引入了<code>jjwt</code>依赖，则可以测试成功（上述<code>@Test</code>测试方法），否则测试失败。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--JWT令牌--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.<code>@ConditionalOnMissingBean</code>：判断环境中没有对应的bean（类型或名称），才注册<code>bean</code>到<code>IOC</code>容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ConditionalOnMissingBean</span> <br><span class="hljs-comment">//不存在该类型的Bean，才会将该Bean加入IOC容器中 --- 指定类型（value属性）或名称（name属性）。</span><br><span class="hljs-comment">//应用：设置默认的Bean对象。用户如果自定义了该类型Bean，就使用用户自定义的，默认的不会生效。用户没有自定义，则使用默认的Bean。</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>@ConditionalOnProperty</code>：判断配置文件中有对应属性和值，才注册<code>bean</code>到<code>IOC</code>容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ConditionalOnProperty(name = &quot;name&quot;, havingValue = &quot;itheima&quot;)</span><br><span class="hljs-comment">//配置文件中存在指定的属性与值，才会将该Bean加入IOC容器中。</span><br><span class="hljs-keyword">public</span> HeaderParser <span class="hljs-title function_">headerParser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaderParser</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>application.properties</code>文件中，加入如下属性值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-attr">name</span>=<span class="hljs-string">itheima</span><br></code></pre></td></tr></table></figure><p>如果是<code>application.yml</code>文件，则为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">itheima</span><br></code></pre></td></tr></table></figure><h6 id="案例（自定义starter）"><a href="#案例（自定义starter）" class="headerlink" title="案例（自定义starter）"></a>案例（自定义starter）</h6><p>在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在<code>SpringBoot</code>的项目中，一般会将这些公共组件封装为<code>SpringBoot</code>的<code>starter</code>。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/SpringBoot%E7%9A%84starter.png"></p><p>需求：自定义<code>aliyun-oss-spring-boot-starter</code>，完成阿里云<code>OSS</code>操作工具类<code>AliyunOSSUtils</code>的自动配置。</p><p>目标：引入起步依赖引入之后，要想使用阿里云<code>OSS</code>，注入<code>AliyunOSSUtils</code>直接使用即可。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/%E8%87%AA%E5%AE%9A%E4%B9%89starter%E7%BB%93%E6%9E%84.png"></p><p>步骤：</p><p>1.创建<code>aliyun-oss-spring-boot-starter</code>模块。该模块下只有<code>aliyun-oss-spring-boot-starter.iml</code>和<code>pom.xml</code>两个文件。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/aliyun-oss-spring-boot-starter%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><p><code>pom.xml</code>文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- aliyun-oss-spring-boot-autoconfigure模块 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果没有<code>iml</code>文件，点击两下<code>Ctrl</code>键，在如下页面运行<code>mvn idea:module</code>命令，即可生成<code>aliyun-oss-spring-boot-starter.iml</code>文件。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/%E7%94%9F%E6%88%90iml%E6%96%87%E4%BB%B6.png"></p><p>2.创建<code>aliyun-oss-spring-boot-autoconfigure</code>模块，在<code>starter</code>中引入该模块。</p><p>在<code>aliyun-oss-spring-boot-autoconfigure</code>模块中的定义自动配置功能，并定义自动配置文件<code>META-INF/spring/xxxx.imports</code>。</p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/aliyun-oss-spring-boot-autoconfigure%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--SpringWeb开发依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--阿里云OSS依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.aliyun.oss;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br>    <span class="hljs-keyword">private</span> String bucketName;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEndpoint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> endpoint;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEndpoint</span><span class="hljs-params">(String endpoint)</span> &#123;<br>        <span class="hljs-built_in">this</span>.endpoint = endpoint;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAccessKeyId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accessKeyId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccessKeyId</span><span class="hljs-params">(String accessKeyId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.accessKeyId = accessKeyId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAccessKeySecret</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> accessKeySecret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccessKeySecret</span><span class="hljs-params">(String accessKeySecret)</span> &#123;<br>        <span class="hljs-built_in">this</span>.accessKeySecret = accessKeySecret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getBucketName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bucketName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBucketName</span><span class="hljs-params">(String bucketName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bucketName = bucketName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.aliyun.oss;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阿里云 OSS 工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br><span class="hljs-comment">/*    @Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span><br><span class="hljs-comment">    private String endpoint;</span><br><span class="hljs-comment">    @Value(&quot;$&#123;aliyun.oss.accessKeyId&#125;&quot;)</span><br><span class="hljs-comment">    private String accessKeyId;</span><br><span class="hljs-comment">    @Value(&quot;$&#123;aliyun.oss.accessKeySecret&#125;&quot;)</span><br><span class="hljs-comment">    private String accessKeySecret;</span><br><span class="hljs-comment">    @Value(&quot;$&#123;aliyun.oss.bucketName&#125;&quot;)</span><br><span class="hljs-comment">    private String bucketName;*/</span><br><br><br>    <span class="hljs-keyword">private</span> AliOSSProperties aliOSSProperties;<br><br>    <span class="hljs-keyword">public</span> AliOSSProperties <span class="hljs-title function_">getAliOSSProperties</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> aliOSSProperties;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAliOSSProperties</span><span class="hljs-params">(AliOSSProperties aliOSSProperties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.aliOSSProperties = aliOSSProperties;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取阿里云OSS参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> aliOSSProperties.getEndpoint();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> aliOSSProperties.getAccessKeyId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> aliOSSProperties.getAccessKeySecret();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> aliOSSProperties.getBucketName();<br><br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>        ossClient.putObject(bucketName, fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + bucketName + <span class="hljs-string">&quot;.&quot;</span> + endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.aliyun.oss;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(AliOSSProperties.class)</span><span class="hljs-comment">//底层是@Import注解，只能用于@Bean方法或@Configuration类上</span><br><span class="hljs-comment">//通过该注解将AliOSSProperties类导入IOC容器中，成为IOC容器的Bean对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSAutoConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AliOSSUtils <span class="hljs-title function_">aliOSSUtils</span><span class="hljs-params">(AliOSSProperties aliOSSProperties)</span> &#123;<br>        <span class="hljs-type">AliOSSUtils</span> <span class="hljs-variable">aliOSSUtils</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AliOSSUtils</span>();<br>        aliOSSUtils.setAliOSSProperties(aliOSSProperties);<br>        <span class="hljs-keyword">return</span> aliOSSUtils;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs imports">com.aliyun.oss.AliOSSAutoConfiguration<br></code></pre></td></tr></table></figure><p>在测试项目<code>springboot-web-test</code>的<code>pom.xml</code>文件中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--自定义阿里云上传文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<span class="hljs-comment">//测试阿里云上传文件</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSUtils aliOSSUtils;<br><br>    <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile image)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//上传文件到阿里云OSS</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> aliOSSUtils.upload(image);<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试链接：使用<code>Postman</code>进行测试，接口（<code>POST</code>）：<code>http://localhost:8080/upload</code>。</p><h4 id="Web后端开发总结"><a href="#Web后端开发总结" class="headerlink" title="Web后端开发总结"></a>Web后端开发总结</h4><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/Web%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%881%EF%BC%89.png"></p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/Web%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%882%EF%BC%89.png"></p><p><img src="/2024/10/29/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%E5%8E%9F%E7%90%86%E7%AF%87/Web%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%883%EF%BC%89.png"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb后端开发：SpringBoot案例</title>
    <link href="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot案例"><a href="#SpringBoot案例" class="headerlink" title="SpringBoot案例"></a>SpringBoot案例</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1.准备数据库表(<code>dept</code>、<code>emp</code>)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 部门管理<br>create table dept(<br>    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br><br>insert into dept (id, name, create_time, update_time) values(1,&#x27;学工部&#x27;,now(),now()),(2,&#x27;教研部&#x27;,now(),now()),(3,&#x27;咨询部&#x27;,now(),now()), (4,&#x27;就业部&#x27;,now(),now()),(5,&#x27;人事部&#x27;,now(),now());<br><br><br><br>-- 员工管理(带约束)<br>create table emp (<br>  id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>  username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>  password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>  name varchar(10) not null comment &#x27;姓名&#x27;,<br>  gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>  image varchar(300) comment &#x27;图像&#x27;,<br>  job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>  entrydate date comment &#x27;入职时间&#x27;,<br>  dept_id int unsigned comment &#x27;部门ID&#x27;,<br>  create_time datetime not null comment &#x27;创建时间&#x27;,<br>  update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br><br>INSERT INTO emp<br>(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES<br>(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),<br>(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),<br>(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),<br>(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),<br>(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),<br>(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),<br>(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),<br>(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),<br>(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),<br>(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),<br>(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),<br>(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),<br>(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());<br></code></pre></td></tr></table></figure><p>2.创建<code>springboot</code>工程，引入对应的起步依赖（<code>web</code>、<code>mybatis</code>、<code>mysql</code>驱动、<code>lombok</code>）。</p><p>3.配置文件<code>application.properties</code>中引入<code>mybatis</code>的配置信息，准备对应的实体类。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment"># 配置数据库的连接信息 - 四要素</span><br><span class="hljs-comment"># 驱动类名称</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"># 数据库连接的url（mybatis是数据库的名称）</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br><span class="hljs-comment"># 连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"># 连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 注意：我的root用户密码为空，所有不用填写password，如果密码不为空需要在=号后面填写密码</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启驼峰命名自动映射，即从数据库字段名 a_column 映射到Java属性名 aColumn。</span><br><span class="hljs-comment">#开启mybatis的驼峰命名自动映射开关 a_column ------&gt; aCloumn</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><span class="hljs-comment">//部门实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//ID</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//部门名称</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime; <span class="hljs-comment">//修改时间</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><span class="hljs-comment">//员工实体类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//ID</span><br>    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> Short gender; <span class="hljs-comment">//性别 , 1 男, 2 女</span><br>    <span class="hljs-keyword">private</span> String image; <span class="hljs-comment">//图像url</span><br>    <span class="hljs-keyword">private</span> Short job; <span class="hljs-comment">//职位 , 1 班主任 , 2 讲师 , 3 学工主管 , 4 教研主管 , 5 咨询师</span><br>    <span class="hljs-keyword">private</span> LocalDate entrydate; <span class="hljs-comment">//入职日期</span><br>    <span class="hljs-keyword">private</span> Integer deptId; <span class="hljs-comment">//部门ID</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime; <span class="hljs-comment">//修改时间</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>4.准备对应的<code>Mapper</code>、<code>Service</code>(接口、实现类)、<code>Controller</code>基础结构。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%A1%88%E4%BE%8B%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84.png"></p><h4 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h4><h5 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h5><p>传统风格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/user/getById?<span class="hljs-built_in">id</span>=1     GET：查询<span class="hljs-built_in">id</span>为1的用户<br>http://localhost:8080/user/saveUser         POST：新增用户<br>http://localhost:8080/user/updateUser       POST：修改用户<br>http://localhost:8080/user/deleteUser?<span class="hljs-built_in">id</span>=1  GET：删除<span class="hljs-built_in">id</span>为1的用户<br></code></pre></td></tr></table></figure><p><code>REST</code>（<code>REpresentational State Transfer</code>），表述性状态转换，它是一种软件架构风格。</p><p>REST风格：<code>URL</code>定位资源，<code>HTTP</code>动词描述操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/users/1  GET：查询<span class="hljs-built_in">id</span>为1的用户<br>http://localhost:8080/users    POST：新增用户<br>http://localhost:8080/users    PUT：修改用户<br>http://localhost:8080/users/1  DELETE：删除<span class="hljs-built_in">id</span>为1的用户<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>REST是风格，是约定方式，约定不是规定，可以打破。</li><li>描述模块的功能通常使用复数，也就是加<code>s</code>的格式来描述，表示此类资源，而非单个资源。如：<code>users</code>、<code>emps</code>、<code>book</code>。</li></ul><h5 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h5><p>前后端交互统一响应结果<code>Result</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//响应码，1 代表成功; 0 代表失败</span><br>    <span class="hljs-keyword">private</span> String msg;  <span class="hljs-comment">//响应信息 描述字符串</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">//返回的数据</span><br><br>    <span class="hljs-comment">//增删改 成功响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-comment">//查询 成功响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;success&quot;</span>,data);<br>    &#125;<br>    <span class="hljs-comment">//失败响应</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">0</span>,msg,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="部门管理"><a href="#部门管理" class="headerlink" title="部门管理"></a>部门管理</h4><h5 id="查询部门"><a href="#查询部门" class="headerlink" title="查询部门"></a>查询部门</h5><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：GET</p><p>接口描述：该接口用于部门列表数据查询</p><p>接口测试：<a href="http://localhost:8080/depts">http://localhost:8080/depts</a></p></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%9F%A5%E8%AF%A2%E9%83%A8%E9%97%A8.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptService deptService;<br><br>    <span class="hljs-comment">//private static Logger log = LoggerFactory.getLogger(DeptController.class);</span><br>    <span class="hljs-comment">//定义log变量，或者使用@Slf4j注解</span><br><br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/depts&quot;, method = RequestMethod.GET)//指定请求方式为GET</span><br>    <span class="hljs-meta">@GetMapping(&quot;/depts&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">depts</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;查询全部部门数据&quot;</span>);<br>        List&lt;Dept&gt; deptList = deptService.list();<br>        <span class="hljs-keyword">return</span> Result.success(deptList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-comment">//查询全部部门数据</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deptMapper.list();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptMapper</span> &#123;<br>    <span class="hljs-comment">//查询全部部门数据</span><br>    <span class="hljs-meta">@Select(&quot;select * from dept&quot;)</span><br>    List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h6><p>将前端工程文件夹中的压缩包，拷贝到一个没有中文不带空格的目录下，解压。启动nginx，访问测试：<a href="http://localhost:90/">http://localhost:90</a> 。</p><p>前端请求路径：<a href="http://localhost:90/api/depts%EF%BC%8C%60localhost:90/api/%60%E4%BB%A3%E8%A1%A8%E7%9A%84%E6%98%AF%E8%AF%B7%E6%B1%82%60nginx%60%E8%B7%AF%E5%BE%84%EF%BC%8C%60nginx%60%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%8A%8A%E8%AF%A5%E8%AF%B7%E6%B1%82%E8%BD%AC%E7%BB%99%E5%90%8E%E7%AB%AF%E7%9A%84%608080%60%E7%AB%AF%E5%8F%A3%60Tomcat%60%EF%BC%8C%E6%9C%80%E7%BB%88%E7%94%B1%60Tomcat%60%E5%A4%84%E7%90%86%E8%BF%99%E6%AC%A1%E8%AF%B7%E6%B1%82%E3%80%82">http://localhost:90/api/depts，`localhost:90/api/`代表的是请求`nginx`路径，`nginx`服务器接收到请求之后，把该请求转给后端的`8080`端口`Tomcat`，最终由`Tomcat`处理这次请求。</a></p><h5 id="删除部门"><a href="#删除部门" class="headerlink" title="删除部门"></a>删除部门</h5><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}</p><p>请求方式：DELETE</p><p>接口描述：该接口用于根据ID删除部门数据</p><p>接口测试：<a href="http://localhost:8080/depts/1">http://localhost:8080/depts/1</a></p></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%88%A0%E9%99%A4%E9%83%A8%E9%97%A8.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptController</span><br><span class="hljs-comment">//删除部门</span><br><span class="hljs-meta">@DeleteMapping(&quot;depts/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;根据id删除部门：&#123;&#125;&quot;</span>, id);<br>    deptService.delete(id);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptService</span><br><span class="hljs-comment">//删除部门</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptServiceImpl</span><br><span class="hljs-comment">//删除部门</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>    deptMapper.deleteById(id);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptMapper</span><br><span class="hljs-comment">//删除部门</span><br><span class="hljs-meta">@Delete(&quot;delete from dept where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><h5 id="新增部门"><a href="#新增部门" class="headerlink" title="新增部门"></a>新增部门</h5><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：POST</p><p>接口描述：该接口用于添加部门数据</p><p>接口测试：<a href="http://localhost:8080/depts">http://localhost:8080/depts</a></p><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;部&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%96%B0%E5%A2%9E%E9%83%A8%E9%97%A8.png"></p><p>注意：一个完整的请求路径，是类上的<code>@RequestMapping</code>的<code>value</code>属性 + 方法上的<code>@RequestMapping</code>的<code>value</code>属性。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%AE%8C%E6%95%B4%E7%9A%84%E8%B7%AF%E5%BE%84%E8%AF%B7%E6%B1%82.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptController</span><br><span class="hljs-comment">//新增部门</span><br><span class="hljs-meta">@PostMapping(&quot;depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;新增部门：&#123;&#125;&quot;</span>, dept);<br>    deptService.add(dept);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptService</span><br><span class="hljs-comment">//新增部门</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptServiceImpl</span><br><span class="hljs-comment">//新增部门</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Dept dept)</span> &#123;<br>    dept.setCreateTime(LocalDateTime.now());<br>    dept.setUpdateTime(LocalDateTime.now());<br>    deptMapper.insert(dept);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptMapper</span><br><span class="hljs-comment">//新增部门</span><br><span class="hljs-meta">@Insert(&quot;insert into dept(name, create_time, update_time) values (#&#123;name&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Dept dept)</span>;<br></code></pre></td></tr></table></figure><h5 id="根据ID查询"><a href="#根据ID查询" class="headerlink" title="根据ID查询"></a>根据ID查询</h5><blockquote><p>请求路径：&#x2F;depts&#x2F;{id}</p><p>请求方式：GET</p><p>接口描述：该接口用于根据ID查询部门数据</p><p>接口测试：<a href="http://localhost:8080/depts/1">http://localhost:8080/depts/1</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptController</span><br><span class="hljs-comment">//根据ID查询部门</span><br><span class="hljs-meta">@GetMapping(&quot;depts/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;根据ID查询：&#123;&#125;&quot;</span>, id);<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> deptService.get(id);<br>    <span class="hljs-keyword">return</span> Result.success(dept);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptService</span><br><span class="hljs-comment">//根据ID查询部门</span><br>Dept <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptServiceImpl</span><br><span class="hljs-comment">//根据ID查询部门</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> deptMapper.getById(id);<br>    <span class="hljs-keyword">return</span> dept;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptMapper</span><br><span class="hljs-comment">//根据ID查询部门</span><br><span class="hljs-meta">@Select(&quot;select * from dept where id = #&#123;id&#125;&quot;)</span><br>Dept <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><h5 id="修改部门"><a href="#修改部门" class="headerlink" title="修改部门"></a>修改部门</h5><blockquote><p>请求路径：&#x2F;depts</p><p>请求方式：PUT</p><p>接口描述：该接口用于修改部门数据</p><p>接口测试：<a href="http://localhost:8080/depts">http://localhost:8080/depts</a></p><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;其他部&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptController</span><br><span class="hljs-comment">//修改部门</span><br><span class="hljs-meta">@PutMapping(&quot;depts&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Dept dept)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;修改部门：&#123;&#125;&quot;</span>, dept);<br>    deptService.update(dept);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptService</span><br><span class="hljs-comment">//修改部门</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dept dept)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptServiceImpl</span><br><span class="hljs-comment">//修改部门</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dept dept)</span> &#123;<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">dept_new</span> <span class="hljs-operator">=</span> get(dept.getId());<br>    dept_new.setName(dept.getName());<br>    dept_new.setUpdateTime(LocalDateTime.now());<br>    deptMapper.update(dept_new);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptMapper</span><br><span class="hljs-comment">//修改部门</span><br><span class="hljs-meta">@Update(&quot;update dept set name = #&#123;name&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Dept dept1)</span>;<br></code></pre></td></tr></table></figure><h4 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h4><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>接口描述：该接口用于员工列表数据的（条件）分页查询</p><p>请求参数样例：（参数格式：queryString）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/emps?page=1&amp;pageSize=10<br></code></pre></td></tr></table></figure><p>【注意】使用<code>@RequestParam</code>给<code>page</code>和<code>pageSize</code>设置默认值后，请求参数可以不填写这两个值。</p></blockquote><p>请求参数：页码、每页展示记录数。</p><p>响应结果：总记录数、结果列表  (<code>PageBean</code>)。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%91%98%E5%B7%A5%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.png"></p><p>注意：<code>@RequestParam</code>的属性<code>defaultValue</code>可以来设置参数的默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-comment">//分页查询结果封装类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageBean</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> total;<span class="hljs-comment">//总记录数</span><br>    <span class="hljs-keyword">private</span> List rows;<span class="hljs-comment">//数据列表，这里的List不写泛型，因为开发中不一定传的是emp，还可以是其他类</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-comment">//分页查询</span><br>    <span class="hljs-meta">@GetMapping(&quot;emps&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                       <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;，&#123;&#125;&quot;</span>, page, pageSize);<br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize);<br>        <span class="hljs-keyword">return</span> Result.success(pageBean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">//分页查询</span><br>    PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span> &#123;<span class="hljs-comment">//分页查询</span><br>        <span class="hljs-comment">//1.获取总记录数</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> empMapper.count();<br><br>        <span class="hljs-comment">//2.根据分页查询结果列表</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (page - <span class="hljs-number">1</span>) * pageSize;<br>        List&lt;Emp&gt; empList = empMapper.page(start, pageSize);<br><br>        <span class="hljs-comment">//3.封装PageBean对象</span><br>        <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(count, empList);<br>        <span class="hljs-keyword">return</span> pageBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//查询总记录数</span><br>    <span class="hljs-meta">@Select(&quot;select count(*) from emp&quot;)</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//分页查询，获取列表数据</span><br>    <span class="hljs-meta">@Select(&quot;select * from emp limit #&#123;start&#125;, #&#123;pageSize&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(Integer start, Integer pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="分页插件PageHelper"><a href="#分页插件PageHelper" class="headerlink" title="分页插件PageHelper"></a>分页插件PageHelper</h6><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper.png"></p><p>在<code>pom.xml</code>文件中引入分页插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--PageHelper分页插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只需要修改<code>EmpServiceImpl.java</code>和<code>EmpMapper.java</code>两个文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//使用PageHelper实现员工信息查询</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize)</span> &#123;<br>    <span class="hljs-comment">//1.设置分页参数</span><br>    PageHelper.startPage(page, pageSize);<br><br>    <span class="hljs-comment">//2.执行查询</span><br>    List&lt;Emp&gt; empList = empMapper.list();<br>    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;<br><br>    <span class="hljs-comment">//3.封装PageBean对象</span><br>    <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(p.getTotal(), p.getResult());<br>    <span class="hljs-keyword">return</span> pageBean;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//员工信息查询</span><br><span class="hljs-meta">@Select(&quot;select * from emp&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>测试链接：<a href="http://localhost:8080/emps?page=2&pageSize=10">http://localhost:8080/emps?page=2&amp;pageSize=10</a></p><p>输出日志：虽然只调用了<code>list</code>方法的<code>select * from emp</code>语句，但是还是分别执行了<code>SELECT count(0) FROM emp</code>和<code>select * from emp LIMIT ?, ?</code>这两个操作。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs CMD">JDBC Connection [HikariProxyConnection@<span class="hljs-number">935528035</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">7</span>b18ae7] will <span class="hljs-keyword">not</span> be managed by Spring<br>==&gt;  Preparing: SELECT count(<span class="hljs-number">0</span>) FROM emp<br>==&gt; Parameters: <br>&lt;==    Columns: count(<span class="hljs-number">0</span>)<br>&lt;==        Row: <span class="hljs-number">17</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>==&gt;  Preparing: select * from emp LIMIT ?, ?<br>==&gt; Parameters: <span class="hljs-number">10</span>(Long), <span class="hljs-number">10</span>(Integer)<br>&lt;==    Columns: id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time<br>&lt;==        Row: <span class="hljs-number">11</span>, luzhangke, <span class="hljs-number">123456</span>, 鹿杖客, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>.jpg, <span class="hljs-number">5</span>, <span class="hljs-number">2007</span>-<span class="hljs-number">02</span>-<span class="hljs-number">01</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==        Row: <span class="hljs-number">12</span>, hebiweng, <span class="hljs-number">123456</span>, 鹤笔翁, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>.jpg, <span class="hljs-number">5</span>, <span class="hljs-number">2008</span>-<span class="hljs-number">08</span>-<span class="hljs-number">18</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==        Row: <span class="hljs-number">13</span>, fangdongbai, <span class="hljs-number">123456</span>, 方东白, <span class="hljs-number">1</span>, <span class="hljs-number">13</span>.jpg, <span class="hljs-number">5</span>, <span class="hljs-number">2012</span>-<span class="hljs-number">11</span>-<span class="hljs-number">01</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==        Row: <span class="hljs-number">14</span>, zhangsanfeng, <span class="hljs-number">123456</span>, 张三丰, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>.jpg, <span class="hljs-number">2</span>, <span class="hljs-number">2002</span>-<span class="hljs-number">08</span>-<span class="hljs-number">01</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==        Row: <span class="hljs-number">15</span>, yulianzhou, <span class="hljs-number">123456</span>, 俞莲舟, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>.jpg, <span class="hljs-number">2</span>, <span class="hljs-number">2011</span>-<span class="hljs-number">05</span>-<span class="hljs-number">01</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==        Row: <span class="hljs-number">16</span>, songyuanqiao, <span class="hljs-number">123456</span>, 宋远桥, <span class="hljs-number">1</span>, <span class="hljs-number">16</span>.jpg, <span class="hljs-number">2</span>, <span class="hljs-number">2007</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==        Row: <span class="hljs-number">17</span>, chenyouliang, <span class="hljs-number">123456</span>, 陈友谅, <span class="hljs-number">1</span>, <span class="hljs-number">17</span>.jpg, null, <span class="hljs-number">2015</span>-<span class="hljs-number">03</span>-<span class="hljs-number">21</span>, null, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">21</span>:<span class="hljs-number">55</span>:<span class="hljs-number">12</span><br>&lt;==      Total: <span class="hljs-number">7</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">32425622</span>]<br></code></pre></td></tr></table></figure><h5 id="条件分页查询"><a href="#条件分页查询" class="headerlink" title="条件分页查询"></a>条件分页查询</h5><blockquote><p>和分页查询一致。</p><p>请求路径：&#x2F;emps</p><p>请求方式：GET</p><p>接口描述：该接口用于员工列表数据的（条件）分页查询</p><p>请求参数样例：（参数格式：queryString）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/emps?name=张&amp;gender=1&amp;begin=2007-09-01&amp;end=2022-09-01&amp;page=1&amp;pageSize=10<br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%91%98%E5%B7%A5%E6%9D%A1%E4%BB%B6%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpController</span><br><span class="hljs-comment">//条件分页查询：在原来分页查询的基础上增加了查询条件参数</span><br><span class="hljs-meta">@GetMapping(&quot;emps&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span><br><span class="hljs-params">                   <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize,</span><br><span class="hljs-params">                   String name, Short gender,</span><br><span class="hljs-params">                   <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate begin,</span><br><span class="hljs-params">                   <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> LocalDate end)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;分页查询，参数：&#123;&#125;，&#123;&#125;，&#123;&#125;，：&#123;&#125;，&#123;&#125;，&#123;&#125;&quot;</span>, page, pageSize, name, gender, begin, end);<br>    <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> empService.page(page, pageSize, name, gender, begin, end);<br>    <span class="hljs-keyword">return</span> Result.success(pageBean);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpService</span><br><span class="hljs-comment">//条件分页查询：在原来分页查询的基础上增加了查询条件参数</span><br>PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//条件分页查询：在原来分页查询的基础上增加了查询条件参数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageBean <span class="hljs-title function_">page</span><span class="hljs-params">(Integer page, Integer pageSize, String name, Short gender, LocalDate begin, LocalDate end)</span> &#123;<br>    <span class="hljs-comment">//1.设置分页参数</span><br>    PageHelper.startPage(page, pageSize);<br><br>    <span class="hljs-comment">//2.执行查询</span><br>    List&lt;Emp&gt; empList = empMapper.list(name, gender, begin, end);<br>    Page&lt;Emp&gt; p = (Page&lt;Emp&gt;) empList;<br><br>    <span class="hljs-comment">//3.封装PageBean对象</span><br>    <span class="hljs-type">PageBean</span> <span class="hljs-variable">pageBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>(p.getTotal(), p.getResult());<br>    <span class="hljs-keyword">return</span> pageBean;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//条件分页查询：在原来分页查询的基础上增加了查询条件参数</span><br><span class="hljs-comment">//要使用if判断条件，所以使用动态SQL，用XML映射</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  条件查询员工  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27; &quot;</span>&gt;</span><br>                name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>                and gender = #&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>                and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by update_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="删除员工"><a href="#删除员工" class="headerlink" title="删除员工"></a>删除员工</h5><blockquote><p>请求路径：&#x2F;emps&#x2F;{ids}</p><p>请求方式：DELETE</p><p>接口描述：该接口用于批量删除员工的数据信息</p><p>请求参数样例：<a href="http://localhost:8080/emps/21,22">http://localhost:8080/emps/21,22</a></p></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%88%A0%E9%99%A4%E5%91%98%E5%B7%A5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpController</span><br><span class="hljs-comment">//批量删除员工，传入的多个id用逗号分隔，可以被识别为数组</span><br><span class="hljs-meta">@DeleteMapping(&quot;emps/&#123;ids&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable()</span> List&lt;Integer&gt; ids)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;批量删除操作，ids = &#123;&#125;&quot;</span>, ids);<br>    empService.delete(ids);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpService</span><br><span class="hljs-comment">//批量删除员工</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//批量删除员工</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span> &#123;<br>    empMapper.delete(ids);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//批量删除员工</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--  批量删除员工  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>    delete from emp<br>    where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h5><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：POST</p><p>接口描述：该接口用于添加员工的信息</p><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-03-07-37-38222.jpg&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linpingzhi&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;林平之&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-18&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%96%B0%E5%A2%9E%E5%91%98%E5%B7%A5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpController</span><br><span class="hljs-comment">//新增员工</span><br><span class="hljs-meta">@PostMapping(&quot;emps&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;新增员工，emp：&#123;&#125;&quot;</span>, emp);<br>    empService.save(emp);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpService</span><br><span class="hljs-comment">//新增员工</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//新增员工</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Emp emp)</span> &#123;<br>    emp.setCreateTime(LocalDateTime.now());<br>    emp.setUpdateTime(LocalDateTime.now());<br>    empMapper.insert(emp);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//新增员工</span><br><span class="hljs-meta">@Insert(&quot;insert into emp (username, name, gender, image, job, entrydate, dept_id, create_time, update_time) &quot; +</span><br><span class="hljs-meta">        &quot;values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><h5 id="根据ID查询员工（查询回显）"><a href="#根据ID查询员工（查询回显）" class="headerlink" title="根据ID查询员工（查询回显）"></a>根据ID查询员工（查询回显）</h5><blockquote><p>请求路径：&#x2F;emps&#x2F;{id}</p><p>请求方式：GET</p><p>接口描述：该接口用于根据主键ID查询员工的信息</p><p>请求参数样例：<a href="http://localhost:8080/emps/23">http://localhost:8080/emps/23</a></p></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%A0%B9%E6%8D%AEID%E6%9F%A5%E8%AF%A2%E5%91%98%E5%B7%A5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpController</span><br><span class="hljs-comment">//根据ID查询员工</span><br><span class="hljs-meta">@GetMapping(&quot;emps/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable()</span> Integer id)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;根据id查询员工信息，id：&#123;&#125;&quot;</span>, id);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empService.getById(id);<br>    <span class="hljs-keyword">return</span> Result.success(emp);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpService</span><br><span class="hljs-comment">//根据ID查询员工</span><br>Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//根据ID查询员工</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empMapper.getById(id);<br>    <span class="hljs-keyword">return</span> emp;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//根据ID查询员工</span><br><span class="hljs-meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span><br>Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><h5 id="修改员工"><a href="#修改员工" class="headerlink" title="修改员工"></a>修改员工</h5><blockquote><p>请求路径：&#x2F;emps</p><p>请求方式：PUT</p><p>接口描述：该接口用于修改员工的数据信息</p><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">888888</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://web-framework.oss-cn-hangzhou.aliyuncs.com/2022-09-03-07-37-38222.jpg&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;linpingzhi&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;林平之&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;job&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;entrydate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2022-09-18&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;deptId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E4%BF%AE%E6%94%B9%E5%91%98%E5%B7%A5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpController</span><br><span class="hljs-comment">//更新员工</span><br><span class="hljs-meta">@PutMapping(&quot;emps&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;更新员工信息：&#123;&#125;&quot;</span>, emp);<br>    empService.update(emp);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpService</span><br><span class="hljs-comment">//更新员工</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//更新员工</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span> &#123;<br>    emp.setUpdateTime(LocalDateTime.now());<br>    empMapper.update(emp);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//更新员工</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--  更新员工  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>    update emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null and username != &#x27;&#x27; &quot;</span>&gt;</span><br>            username = #&#123;username&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null and password != &#x27;&#x27; &quot;</span>&gt;</span><br>            password = #&#123;password&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27; &quot;</span>&gt;</span><br>            name = #&#123;name&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>            gender = #&#123;gender&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null and image != &#x27;&#x27; &quot;</span>&gt;</span><br>            image = #&#123;image&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null&quot;</span>&gt;</span><br>            job = #&#123;job&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;entrydate != null&quot;</span>&gt;</span><br>            entrydate = #&#123;entrydate&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptId != null&quot;</span>&gt;</span><br>            dept_id = #&#123;deptId&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>            update_time = #&#123;updateTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>文件上传：将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。</p><p><strong>前端页面三要素</strong>：<code>method=&quot;post&quot;</code>、<code>enctype=&quot;multipart/form-data&quot;</code>、<code>type=&quot;file&quot;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    头像: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>enctype</code>的默认值是<code>application/ x-www-form-urlencoded</code>，若使用该方式上传文件，则最后上传的请求为：<code>username=&amp;age=&amp;image=%E4%B8%AD%E5%9B%BD%E6%A2%A6.txt</code>。即：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国梦.txt&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>指定<code>enctype</code>的值为<code>multipart/form-data</code>，使用该方式上传文件，在<strong>火狐浏览器</strong>（其他浏览器已经封装好文件，无法查看文件具体内容）中打开可以看到上传的是整个文件。其中<code>boundary</code>是<strong>分割符</strong>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.png"></p><p>将前端页面<code>upload.html</code>放在<code>src/main/resources/static</code>文件夹下，在<code>src/main/java/com/itheima/controller</code>下编写<code>UploadController.java</code>文件，用来设置上传文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span> <span class="hljs-comment">//和前端的action字段一致</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(String username, Integer age, MultipartFile image)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;文件上次：&#123;&#125;，&#123;&#125;，&#123;&#125;&quot;</span>, username, age, image);<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【注意】</p><p>1.服务端使用<code>MultipartFile</code>来接收文件。</p><p>2.在<code>log.info</code>处设置断点，浏览器使用<code>http://localhost:8080/upload.html</code>访问前端页面并提交文件，在<code>IDEA</code>中可以收到<code>MultipartFile</code>的文件信息。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/MultipartFile%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF.png"></p><p>其中，上述<code>C:\Users\srr18\AppData\Local\Temp\tomcat.8080.10055437552755735705\work\Tomcat\localhost\ROOT</code>存储的就是上传的临时文件，<code>0.tmp</code>是<code>username</code>的值<code>surourou</code>，<code>1.tmp</code>是<code>age</code>的值<code>18</code>，<code>2.tmp</code>是上传的文件。</p><p>当该函数运行结束，则该临时文件就会自动删除。</p><h5 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h5><p>在服务端，接收到上传上来的文件之后，将文件存储在本地服务器磁盘中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span> <span class="hljs-comment">//和前端的action字段一致</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(String username, Integer age, MultipartFile image)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;文件上次：&#123;&#125;，&#123;&#125;，&#123;&#125;&quot;</span>, username, age, image);<br><br>        <span class="hljs-comment">//获取原始文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> image.getOriginalFilename();<br><br>        <span class="hljs-comment">//构造唯一的文件名（不能重复）--uuid（通用唯一识别码）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">extname</span> <span class="hljs-operator">=</span> originalFilename.substring(index);<span class="hljs-comment">//获取文件后缀</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">newFileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + extname;<br>        log.info(<span class="hljs-string">&quot;新的文件名：&#123;&#125;&quot;</span>, newFileName);<br><br>        <span class="hljs-comment">//将文件存储在服务器的磁盘目录中：我存在了resources的static目录下的images文件夹中</span><br>        image.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/2_学习/JavaWeb/code/itheima_web_project/springboot-web-tlias/src/main/resources/static/images/&quot;</span>+ newFileName));<br><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>SpringBoot</code>中，文件上传默认单个文件允许最大大小为<code>1M</code>。如果上传的文件大于<code>1M</code>，则会报错：</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E6%8A%A5%E9%94%99.png"></p><p>使用<code>Postman</code>上传大于<code>1M</code>的文件，会报<code>413 Request Entity Too Large Request is too large for the server to process.</code>，显示无法上传文件。</p><p>如果需要上传大文件，可以进行如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment">#配置单个文件最大上传大小</span><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-comment">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">100MB</span><br></code></pre></td></tr></table></figure><p><code>MultipartFile</code>类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">String <span class="hljs-title function_">getOriginalFilename</span><span class="hljs-params">()</span>; <span class="hljs-comment">//获取原始文件名</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">transferTo</span><span class="hljs-params">(File dest)</span>; <span class="hljs-comment">//将接收的文件转存到磁盘文件中</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>; <span class="hljs-comment">//获取文件的大小，单位：字节</span><br><span class="hljs-type">byte</span>[] getBytes(); <span class="hljs-comment">//获取文件内容的字节数组</span><br>InputStream <span class="hljs-title function_">getInputStream</span><span class="hljs-params">()</span>; <span class="hljs-comment">//获取接收到的文件内容的输入流</span><br></code></pre></td></tr></table></figure><h5 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h5><p>阿里云对象存储<code>OSS</code>（<code>Object Storage Service</code>），是一款海量、安全、低成本、高可靠的云存储服务。使用<code>OSS</code>通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件。</p><h6 id="阿里云使用步骤"><a href="#阿里云使用步骤" class="headerlink" title="阿里云使用步骤"></a>阿里云使用步骤</h6><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4.png"></p><p><code>Bucket</code>：存储空间是用户用于存储对象（<code>Object</code>，就是文件）的容器，所有的对象都必须隶属于某个存储空间。</p><p><code>SDK</code>：<code>Software Development Kit</code>的缩写，软件开发工具包，包括辅助软件开发的依赖（<code>jar</code>包）、代码示例等，都可以叫做<code>SDK</code>。</p><p>1.手机注册登录阿里云账号。</p><p>2.在右上角点击<code>控制台</code>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B0.png"></p><p>3.进入<code>控制台</code>页面，点击左上角阿里云logo，搜索<code>oss</code>，点击<code>对象存储</code>服务。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%9C%E7%B4%A2oss.png"></p><p>4.第一次进入可能显示需要充值，可以认证之后点击<code>免费试用</code>，申请免费试用可以试用三个月。</p><p>5.创建<code>Bucket</code>列表。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E5%88%9B%E5%BB%BABucket.png"></p><p>6.创建<code>Bucket</code>成功后在<code>概览</code>可以查看<code>Endpoint</code>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91Bucket.png"></p><p>7.在<code>文件列表</code>可以查看上传的文件。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91Bucket%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8.png"></p><p>8.在个人账户头像处选择<code>AccessKey管理</code>，选择创建<code>AccessKey</code>，并获取保存<code>AccessKey ID</code>和<code>AccessKey Secret</code>（只能查看一次，需要保存下来）。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E5%88%9B%E5%BB%BAAccessKey.png"></p><p>9.列表左下角找到<code>SDK</code>，点击<code>Java文档</code>可以查看帮助文档，<code>文档中心打开</code>查看。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91SDK%E6%96%87%E6%A1%A3.png" alt="image-20241023102108191"></p><p>10.<code>SDK参考</code>-&gt;<code>Java</code>-&gt;<code>安装</code>下找到<code>安装SDK</code>，在<code>pom.xml</code>文件中引入如下依赖。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BE%9D%E8%B5%96.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--阿里云OSS依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- no more than 2.3.3--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>11.<code>SDK参考</code>-&gt;<code>Java</code>-&gt;<code>对象/文件</code>-&gt;<code>上传文件</code>-&gt;<code>简单上传</code>，找到<code>上传文件流</code>，复制这段代码到<code>test</code>下进行测试（这段代码导入还需要导入一些包，按照<code>IDEA</code>提示导入即可），即<code>springboot-web-tlias/src/test/java/com/itheima</code>目录下的<code>Demo.java</code>文件，然后根据自己的信息修改即可。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91SDK%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-keyword">import</span> com.aliyun.oss.*;<br><span class="hljs-keyword">import</span> com.aliyun.oss.common.auth.*;<br><span class="hljs-keyword">import</span> com.aliyun.oss.common.comm.SignVersion;<br><span class="hljs-keyword">import</span> com.aliyun.oss.model.PutObjectRequest;<br><span class="hljs-keyword">import</span> com.aliyun.oss.model.PutObjectResult;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;<br>        <span class="hljs-comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。</span><br>        <span class="hljs-type">EnvironmentVariableCredentialsProvider</span> <span class="hljs-variable">credentialsProvider</span> <span class="hljs-operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();<br>        <span class="hljs-comment">// 填写Bucket名称，例如examplebucket。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;srr-web-tlias&quot;</span>;<br>        <span class="hljs-comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.jpg&quot;</span>;<br>        <span class="hljs-comment">// 填写本地文件的完整路径，例如D:\\localpath\\examplefile.txt。</span><br>        <span class="hljs-comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件流。</span><br>        String filePath= <span class="hljs-string">&quot;E:/2_学习/JavaWeb/code/itheima_web_project/springboot-web-tlias/src/main/resources/static/images/Space02-Default.jpg&quot;</span>;<br>        <span class="hljs-comment">// 填写Bucket所在地域。以华东1（杭州）为例，Region填写为cn-hangzhou。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">region</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cn-hangzhou&quot;</span>;<br><br>        <span class="hljs-comment">// 创建OSSClient实例。</span><br>        <span class="hljs-type">ClientBuilderConfiguration</span> <span class="hljs-variable">clientBuilderConfiguration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientBuilderConfiguration</span>();<br>        clientBuilderConfiguration.setSignatureVersion(SignVersion.V4);<br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> OSSClientBuilder.create()<br>                .endpoint(endpoint)<br>                .credentialsProvider(credentialsProvider)<br>                .clientConfiguration(clientBuilderConfiguration)<br>                .region(region)<br>                .build();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">// 创建PutObjectRequest对象。</span><br>            <span class="hljs-type">PutObjectRequest</span> <span class="hljs-variable">putObjectRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PutObjectRequest</span>(bucketName, objectName, inputStream);<br>            <span class="hljs-comment">// 创建PutObject请求。</span><br>            <span class="hljs-type">PutObjectResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ossClient.putObject(putObjectRequest);<br>        &#125; <span class="hljs-keyword">catch</span> (OSSException oe) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span><br>                    + <span class="hljs-string">&quot;but was rejected with an error response for some reason.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());<br>            System.out.println(<span class="hljs-string">&quot;Error Code:&quot;</span> + oe.getErrorCode());<br>            System.out.println(<span class="hljs-string">&quot;Request ID:&quot;</span> + oe.getRequestId());<br>            System.out.println(<span class="hljs-string">&quot;Host ID:&quot;</span> + oe.getHostId());<br>        &#125; <span class="hljs-keyword">catch</span> (ClientException ce) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught an ClientException, which means the client encountered &quot;</span><br>                    + <span class="hljs-string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span><br>                    + <span class="hljs-string">&quot;such as not being able to access the network.&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Error Message:&quot;</span> + ce.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ossClient != <span class="hljs-literal">null</span>) &#123;<br>                ossClient.shutdown();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>测试运行该段程序，即可将本地图片<code>E:/2_学习/JavaWeb/code/itheima_web_project/springboot-web-tlias/src/main/resources/static/images/Space02-Default.jpg</code>上传到阿里云的<code>Bucket</code>中，在<code>文件列表</code>就可以查看上传的文件。</p><p><span style="color:red"><strong>【注意】</strong></span>上述代码需要在电脑本地配置环境变量，设置<code>AccessKey ID</code>和<code>AccessKey Secret</code>的值。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="image-20241023104712784"></p><p>【补充】<code>Windows</code>使用<code>CMD</code>命令行设置环境变量</p><p>参考链接：<a href="https://blog.csdn.net/jsy6666/article/details/130867850">Windows使用CMD命令行设置环境变量_windows cmd设置环境变量-CSDN博客</a></p><p>1.<code>set</code>设置<strong>临时环境变量</strong>。它的作用范围<strong>只限于当前窗口</strong>，在关闭该命令窗口后，所有通过<code>set</code>命令设置的变量都会丢失。</p><p>设置临时环境变量：<code>set name=value</code></p><p>查看当前系统全部环境变量：<code>set</code></p><p>2.<code>setx</code>设置<strong>永久性环境变量</strong>。这些变量不仅在当前命令行窗口中有效，而且在其他所有命令行窗口和应用程序中也都有效。</p><p>设置永久环境变量：<code>setx name value</code>或<code>setx /M name value</code></p><p>【报错】<code>Exception in thread &quot;main&quot; com.aliyun.oss.common.auth.InvalidCredentialsException: Access key id should not be null or empty.</code></p><p>参考链接：<a href="https://blog.csdn.net/qq_59621600/article/details/134859770">03_阿里云_配置OSS环境变量_access key id should not be null or empty.-CSDN博客</a></p><p>1.执行以下命令配置RAM用户的访问密钥。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-built_in">set</span> OSS_ACCESS_KEY_ID=AccessKey ID<br><span class="hljs-built_in">set</span> OSS_ACCESS_KEY_SECRET=AccessKey Secret<br></code></pre></td></tr></table></figure><p>2.执行以下命令以使更改生效。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD">setx OSS_ACCESS_KEY_ID &quot;<span class="hljs-variable">%OSS_ACCESS_KEY_ID%</span>&quot;<br>setx OSS_ACCESS_KEY_SECRET &quot;<span class="hljs-variable">%OSS_ACCESS_KEY_SECRET%</span>&quot;<br></code></pre></td></tr></table></figure><p>3.执行以下命令验证环境变量配置。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-built_in">echo</span> <span class="hljs-variable">%OSS_ACCESS_KEY_ID%</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">%OSS_ACCESS_KEY_SECRET%</span><br></code></pre></td></tr></table></figure><p>配置环境变量后需要<strong>重启</strong><code>IDEA</code>，这样<code>IDEA</code>就可以读取环境变量里的<code>OSS_ACCESS_KEY_ID</code>和<code>OSS_ACCESS_KEY_SECRET</code>了。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-function">C:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>&gt;<span class="hljs-title">set</span> <span class="hljs-title">OSS_ACCESS_KEY_ID</span>=<span class="hljs-title">LTAI5tK5ZM5yGVVFWvKxeNqJ</span></span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>&gt;<span class="hljs-title">set</span> <span class="hljs-title">OSS_ACCESS_KEY_SECRET</span>=</span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>&gt;<span class="hljs-title">setx</span> <span class="hljs-title">OSS_ACCESS_KEY_ID</span> &quot;%<span class="hljs-title">OSS_ACCESS_KEY_ID</span>%&quot;</span><br><span class="hljs-function"></span><br><span class="hljs-function">成功: 指定的值已得到保存。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>&gt;<span class="hljs-title">setx</span> <span class="hljs-title">OSS_ACCESS_KEY_SECRET</span> &quot;%<span class="hljs-title">OSS_ACCESS_KEY_SECRET</span>%&quot;</span><br><span class="hljs-function"></span><br><span class="hljs-function">成功: 指定的值已得到保存。</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>&gt;<span class="hljs-title">echo</span> %<span class="hljs-title">OSS_ACCESS_KEY_ID</span>%</span><br><span class="hljs-function"><span class="hljs-title">LTAI5tK5ZM5yGVVFWvKxeNqJ</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">C</span>:\<span class="hljs-title">Windows</span>\<span class="hljs-title">System32</span>&gt;<span class="hljs-title">echo</span> %<span class="hljs-title">OSS_ACCESS_KEY_SECRET</span>%</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h6 id="阿里云集成"><a href="#阿里云集成" class="headerlink" title="阿里云集成"></a>阿里云集成</h6><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E9%9B%86%E6%88%90.png"></p><p>1.引入阿里云OSS上传文件工具类<code> AliOSSUtils</code>（由官方的示例代码改造而来），放在<code>com.itheima.utils</code>包下。</p><p>【注意】需要修改<code>endpoint</code>，<code>accessKeyId</code>，<code>accessKeySecret</code>，<code>bucketName</code>四个变量的值为自己<code>bucket</code>对应的值。其他的不用修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.utils;<br><br><span class="hljs-keyword">import</span> com.aliyun.oss.OSS;<br><span class="hljs-keyword">import</span> com.aliyun.oss.OSSClientBuilder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阿里云 OSS 工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://oss-cn-hangzhou.aliyuncs.com&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;LTAI5tK5ZM5yGVVFWvKxeNqJ&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;srr-web-tlias&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>        ossClient.putObject(bucketName, fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + bucketName + <span class="hljs-string">&quot;.&quot;</span> + endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.上传图片接口开发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSUtils aliOSSUtils;<br><br>    <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile image)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        log.info(<span class="hljs-string">&quot;文件上传，文件名：&#123;&#125;&quot;</span>, image.getOriginalFilename());<br>        <span class="hljs-comment">//调用阿里云OSS工具类进行文件上传</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> aliOSSUtils.upload(image);<br>        log.info(<span class="hljs-string">&quot;文件上传完成，文件访问的url:&#123;&#125;&quot;</span>, url);<br>        <span class="hljs-keyword">return</span> Result.success(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.接口测试：在<code>Postman</code>中使用<code>http://localhost:8080/upload</code>接口，<code>POST</code>方法上传文件。</p><blockquote><p>请求路径：&#x2F;upload</p><p>请求方式：POST</p><p>接口描述：上传图片接口</p></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95.png"></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="参数配置化"><a href="#参数配置化" class="headerlink" title="参数配置化"></a>参数配置化</h5><p><code>@Value</code>注解通常用于<strong>外部配置的属性注入</strong>，具体用法为：<code>@Value(&quot;$&#123;配置文件中的key&#125;&quot;)</code></p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E5%8C%96.png"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment">#阿里云OSS配置</span><br><span class="hljs-attr">aliyun.oss.endpoint</span>=<span class="hljs-string">https://oss-cn-hangzhou.aliyuncs.com</span><br><span class="hljs-attr">aliyun.oss.accessKeyId</span>=<span class="hljs-string">LTAI5tK5ZM5yGVVFWvKxeNqJ</span><br><span class="hljs-attr">aliyun.oss.accessKeySecret</span>=<span class="hljs-string"></span><br><span class="hljs-attr">aliyun.oss.bucketName</span>=<span class="hljs-string">srr-web-tlias</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.accessKeyId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.accessKeySecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.bucketName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h5><h6 id="配置格式"><a href="#配置格式" class="headerlink" title="配置格式"></a>配置格式</h6><p><code>SpringBoot</code>提供了多种属性配置方式。</p><p><code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-attr">server.address</span>=<span class="hljs-string">127.0.0.1</span><br></code></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>   <span class="hljs-attr">port:</span>  <span class="hljs-number">8080</span><br>   <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>   <span class="hljs-attr">port:</span>  <span class="hljs-number">8080</span><br>   <span class="hljs-attr">address:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94.png"></p><h6 id="yml基本语法"><a href="#yml基本语法" class="headerlink" title="yml基本语法"></a>yml基本语法</h6><ol><li>大小写敏感。</li><li>数值前边必须有空格，作为分隔符。</li><li>使用<strong>缩进表示层级关系</strong>，缩进时，不允许使用<code>Tab</code>键，只能用空格（<code>IDEA</code>中会自动将<code>Tab</code>转换为空格）。</li><li>缩进的空格数目不重要，只要<strong>相同层级的元素左侧对齐</strong>即可。</li><li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略。</li></ol><h6 id="yml数据格式"><a href="#yml数据格式" class="headerlink" title="yml数据格式"></a>yml数据格式</h6><p>对象&#x2F;<code>Map</code>集合：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">user:</span><br>   <span class="hljs-attr">name:</span> <span class="hljs-string">zhangsan</span><br>   <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>   <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>数组&#x2F;<code>List</code>&#x2F;<code>Set</code>集合：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">hobby:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">java</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">game</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">sport</span><br></code></pre></td></tr></table></figure><h6 id="修改application-properties文件"><a href="#修改application-properties文件" class="headerlink" title="修改application.properties文件"></a>修改<code>application.properties</code>文件</h6><p>在<code>application.yml</code>中的配置案例相关的配置项：（将<code>application.properties</code>修改为<code>application.yml</code>）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> <span class="hljs-comment">#内嵌Tomcat的端口号</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springboot-web-tlias</span><br>  <span class="hljs-comment">#数据库连接信息</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span><br><br>  <span class="hljs-comment">#文件上传的配置</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">100MB</span><br><br><span class="hljs-comment">#MyBatis配置</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment">#阿里云OSS</span><br><span class="hljs-attr">aliyun:</span><br>  <span class="hljs-attr">oss:</span><br>    <span class="hljs-attr">endpoint:</span> <span class="hljs-string">https://oss-cn-hangzhou.aliyuncs.com</span><br>    <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI5tK5ZM5yGVVFWvKxeNqJ</span><br>    <span class="hljs-attr">accessKeySecret:</span> <br>    <span class="hljs-attr">bucketName:</span> <span class="hljs-string">srr-web-tlias</span><br></code></pre></td></tr></table></figure><h5 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a><code>@ConfigurationProperties</code></h5><p><code>@ConfigurationProperties</code>与<code>@Value</code>都是用来注入外部配置的属性的。</p><p>不同：</p><p><code>@Value</code>注解只能一个一个的进行外部属性的注入。</p><p><code>@ConfigurationProperties</code>可以批量的将外部的属性配置注入到<code>bean</code>对象的属性中。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E4%BD%BF%E7%94%A8@ConfigurationProperties%E9%85%8D%E7%BD%AE%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.utils;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-keyword">private</span> String accessKeyId;<br>    <span class="hljs-keyword">private</span> String accessKeySecret;<br>    <span class="hljs-keyword">private</span> String bucketName;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阿里云 OSS 工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliOSSUtils</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AliOSSProperties aliOSSProperties;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现上传图片到OSS</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//获取阿里云OSS参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> aliOSSProperties.getEndpoint();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> aliOSSProperties.getAccessKeyId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> aliOSSProperties.getAccessKeySecret();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> aliOSSProperties.getBucketName();<br><br>        <span class="hljs-comment">// 获取上传的文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br><br>        <span class="hljs-comment">// 避免文件覆盖</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>        <span class="hljs-comment">//上传文件到 OSS</span><br>        <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>        ossClient.putObject(bucketName, fileName, inputStream);<br><br>        <span class="hljs-comment">//文件访问路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;//&quot;</span> + bucketName + <span class="hljs-string">&quot;.&quot;</span> + endpoint.split(<span class="hljs-string">&quot;//&quot;</span>)[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;/&quot;</span> + fileName;<br>        <span class="hljs-comment">// 关闭ossClient</span><br>        ossClient.shutdown();<br>        <span class="hljs-keyword">return</span> url;<span class="hljs-comment">// 把上传到oss的路径返回</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>pom.xml</code>文件引入依赖（可选，引入该依赖，在配置<code>yml</code>时会有提示）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96@ConfigurationProperties.png"></p><h4 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h4><h5 id="员工登录"><a href="#员工登录" class="headerlink" title="员工登录"></a>员工登录</h5><blockquote><p>请求路径：&#x2F;login</p><p>请求方式：POST</p><p>接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 </p><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinyong&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%91%98%E5%B7%A5%E7%99%BB%E5%BD%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;员工登录：&#123;&#125;&quot;</span>, emp);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> empService.login(emp);<br>        <span class="hljs-keyword">return</span> e != <span class="hljs-literal">null</span> ? Result.success() : Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpService</span><br><span class="hljs-comment">//员工登录</span><br>Emp <span class="hljs-title function_">login</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpServiceImpl</span><br><span class="hljs-comment">//员工登录</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">login</span><span class="hljs-params">(Emp emp)</span> &#123;<br>    <span class="hljs-keyword">return</span> empMapper.getByUsernameAndPassword(emp);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据用户名和密码查询员工</span><br><span class="hljs-meta">@Select(&quot;select * from emp where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span><br>Emp <span class="hljs-title function_">getByUsernameAndPassword</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><h4 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h4><h5 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h5><p>会话：用户打开浏览器，访问<code>web</code>服务器的资源，会话建立，直到有一方断开连接，会话结束。在<strong>一次会话中可以包含多次请求和响应</strong>。</p><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p><p>会话跟踪方案：</p><ul><li>客户端会话跟踪技术：<code>Cookie</code></li><li>服务端会话跟踪技术：<code>Session</code></li><li>令牌技术</li></ul><h6 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h6><p>优点：<code>HTTP</code>协议中支持的技术。</p><p>缺点：移动端<code>APP</code>无法使用<code>Cookie</code>，不安全，用户可以自己禁用<code>Cookie</code>，<code>Cookie</code>不能跨域。（跨域区分三个维度：协议、IP&#x2F;域名、端口，任何一个不同则是跨域。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpSession;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HttpSession演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> &#123;<br>    <span class="hljs-comment">//设置Cookie</span><br>    <span class="hljs-meta">@GetMapping(&quot;/c1&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cookie1</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>        response.addCookie(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;login_username&quot;</span>,<span class="hljs-string">&quot;itheima&quot;</span>)); <span class="hljs-comment">//设置Cookie/响应Cookie</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-comment">//获取Cookie</span><br>    <span class="hljs-meta">@GetMapping(&quot;/c2&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">cookie2</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        Cookie[] cookies = request.getCookies();<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;login_username&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;login_username: &quot;</span>+cookie.getValue()); <span class="hljs-comment">//输出name为login_username的cookie</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【报错】</p><p>参考链接：<a href="https://blog.csdn.net/weixin_45979122/article/details/131189113">请求500失败-No primary or single unique constructor found-记录SpringBoot3.0 做导出功能HttpServletResponse的导包问题_no primary or single unique constructor found for -CSDN博客</a></p><p>在<code>pom.xml</code>文件下导入会话技术依赖（错误，不需要引入）。但是使用<code>javax.servlet-api</code>会报错<code>java.lang.IllegalStateException: No primary or single unique constructor found for interface javax.servlet.http.HttpServletResponse</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--会话技术--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决：这是因为<code>springboot3.0</code>的导出的依赖要从<code>import javax.servlet.http.HttpServletResponse; </code>变为<code>import jakarta.servlet.http.HttpServletResponse;</code>。</p><p>原来使用会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br></code></pre></td></tr></table></figure><p>修改为即可正常运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> jakarta.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpSession;<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:8080/c1</code>，服务端会设置<code>Cookie</code>，在响应标头会显示<code>set-cookie</code>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AE%BE%E7%BD%AECookie.png"></p><p>浏览器识别到<code>set-cookie</code>会将<code>Cookie</code>的值存储到浏览器本地。在<code>Application应用程序</code>中的<code>Cookie</code>下可以查看<code>Cookie</code>的值。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/Cookie%E5%80%BC%E5%AD%98%E5%82%A8%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0.png"></p><p>以后的每次请求浏览器都会将<code>Cookie</code>携带到服务端，访问<code>http://localhost:8080/c2</code>，浏览器将在请求标头的<code>Cookie</code>字段中将<code>Cookie</code>的值携带到服务端。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%BA%E5%B8%A6Cookie%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF.png"></p><h6 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h6><p>优点：存储在服务端，安全。</p><p>缺点：服务器集群环境下无法直接使用<code>Session</code>，<code>Cookie</code>的缺点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HttpSession演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/s1&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">session1</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;HttpSession-s1: &#123;&#125;&quot;</span>, session.hashCode());<br><br>        session.setAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>); <span class="hljs-comment">//往session中存储数据</span><br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/s2&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">session2</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        log.info(<span class="hljs-string">&quot;HttpSession-s2: &#123;&#125;&quot;</span>, session.hashCode());<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">loginUser</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>); <span class="hljs-comment">//从session中获取数据</span><br>        log.info(<span class="hljs-string">&quot;loginUser: &#123;&#125;&quot;</span>, loginUser);<br>        <span class="hljs-keyword">return</span> Result.success(loginUser);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:8080/s1</code>，在响应标头<code>set-cookie</code>下的<code>JSESSIONID</code>代表服务器端<code>session</code>会话对象的<code>ID</code>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AE%BE%E7%BD%AEsession%E7%9A%84ID.png"></p><p>浏览器会将<code>Cookie</code>的值存储到浏览器本地。在<code>Application应用程序</code>中的<code>Cookie</code>下可以查看<code>JSESSIONID</code>的值。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/session%E7%9A%84id%E5%80%BC%E5%AD%98%E5%82%A8%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0.png"></p><p>访问<code>http://localhost:8080/s2</code>，浏览器将在请求标头的<code>Cookie</code>字段中将<code>Cookie</code>的值，上述设置的<code>login_username</code>和<code>JSESSIONID</code>这两个<code>Cookie</code>都携带到服务端。服务器端会根据<code>JSESSIONID</code>找到对应的会话对象。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%90%BA%E5%B8%A6session%E7%9A%84id%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF.png"></p><h6 id="令牌技术"><a href="#令牌技术" class="headerlink" title="令牌技术"></a>令牌技术</h6><p>优点：支持PC端、移动端，解决集群环境下的认证问题，减轻服务器端存储压力。</p><p>缺点：需要自己实现。</p><p>【补充：<code>cookie</code>、<code>session</code>、<code>JWT</code>的区别】</p><p>参考链接：</p><p><a href="https://developer.aliyun.com/article/1358589#comment">还分不清 Cookie、Session、Token、JWT？看这一篇就够了-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/631349844">一文彻底搞清session、cookie、token的区别 - 知乎 (zhihu.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1683290">面试必问:session，cookie和token的区别-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>跨域：<a href="https://blog.csdn.net/TTianYe/article/details/115713163">从头到尾讲讲 cookie？同源策略？跨越？解决跨域问题？_同源策略cookie-CSDN博客</a></p><h5 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h5><h6 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h6><p><code>JWT</code>全称：<code>JSON  Web  Token</code>（ <a href="https://jwt.io/">https://jwt.io/</a> ）。定义了一种简洁的、自包含的格式，用于在通信双方以<code>json</code>数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><p>组成：</p><ol><li>第一部分：<code>Header</code>(头）， 记录令牌类型、签名算法等。 例如：<code>&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;type&quot;:&quot;JWT&quot;&#125;</code>。</li><li>第二部分：<code>Payload</code>(有效载荷），携带一些自定义信息、默认信息等。 例如：<code>&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;Tom&quot;&#125;</code>。</li><li>第三部分：<code>Signature</code>(签名），防止<code>Token</code>被篡改、确保安全性。将<code>header</code>、<code>payload</code>，并加入指定秘钥，通过指定签名算法计算而来。</li></ol><p>第一部分和第二部分使用<code>Base64</code>编码，可以通过<code>Base64</code>解码得到。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/JWT%E4%BB%A4%E7%89%8C%E7%BB%84%E6%88%90.png"></p><p>场景：登录认证</p><ul><li>登录成功后，生成令牌。</li><li>后续每个请求，都要携带<code>JWT</code>令牌，系统在每次请求处理之前，先校验令牌，通过后，再处理。</li></ul><h6 id="JWT生成和解析"><a href="#JWT生成和解析" class="headerlink" title="JWT生成和解析"></a>JWT生成和解析</h6><p>1.引入依赖。老师用的是<code>0.9.1</code>版本的，我用的是最新版本的<code>0.12.3</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.生成<code>JWT</code>和解析<code>JWT</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-comment">//@SpringBootTest</span><br><span class="hljs-comment">//因为没使用到SpringBoot的功能，可以注释掉@SpringBootTest，加快测试的速度，否则需要加载整个SpringBoot工程会很慢</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebTliasApplicationTests</span> &#123;<span class="hljs-comment">//在测试主方法下进行测试</span><br><span class="hljs-comment">//生成JWT</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGenJwt</span><span class="hljs-params">()</span>&#123;<br>Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>claims.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">1</span>);<br>claims.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;surourou&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>.signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>) <span class="hljs-comment">//签名算法：0.12.3版本要求签名算法必须大于或等于256bit，0.9.1版本没有要求</span><br>.setClaims(claims) <span class="hljs-comment">//自定义内容（载荷）</span><br>.setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>)) <span class="hljs-comment">//设置有效期为1h</span><br>.compact(); <span class="hljs-comment">//将结果包装为字符串</span><br>System.out.println(jwt);<br>&#125;<br><br><span class="hljs-comment">//解析JWT</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParseJwt</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>.setSigningKey(<span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>) <span class="hljs-comment">//指定签名密钥</span><br>.build() <span class="hljs-comment">//0.12.3版本需要使用build()方法，0.9.1版本可以省略这一个方法</span><br>.parseClaimsJws(<span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoic3Vyb3Vyb3UiLCJpZCI6MSwiZXhwIjoxNzI5NzM2Njc0fQ.kOLJv1uPsmn-bEUagHO53L1esUl3c7f_4JlbMUHKso0&quot;</span>) <span class="hljs-comment">//解析令牌</span><br>.getBody();<br>System.out.println(claims);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li><code>JWT</code>校验时使用的签名秘钥，必须和生成<code>JWT</code>令牌时使用的秘钥是配套的。</li><li>如果<code>JWT</code>令牌解析校验时报错，则说明<code>JWT</code>令牌被篡改或失效了，令牌非法。</li></ol><p>报错：</p><ol><li><code>io</code>：签名秘钥需要大于或等于<code>256bit</code>。</li><li><code>io.jsonwebtoken.MalformedJwtException: Malformed protected header JSON: Unable to deserialize: Illegal character ((CTRL-CHAR, code 19)): only regular white space (\r, \n, \t) is allowed between tokens at [Source: REDACTED (</code>StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION<code> disabled); line: 1, column: 2]</code>：<code>Jwt</code>令牌错误。</li><li><code>io.jsonwebtoken.ExpiredJwtException: JWT expired 23961 milliseconds ago at 2024-10-24T01:32:32.000Z. Current time: 2024-10-24T01:32:55.961Z. Allowed clock skew: 0 milliseconds.</code>：<code>Jwt</code>令牌过期异常。</li></ol><h6 id="登录生成令牌"><a href="#登录生成令牌" class="headerlink" title="登录生成令牌"></a>登录生成令牌</h6><p>1.引入<code>JWT</code>令牌操作工具类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">signKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itheimaitheimaitheimaitheimaitheimaitheimaitheimaitheima&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">43200000L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> claims JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateJwt</span><span class="hljs-params">(Map&lt;String, Object&gt; claims)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> Jwts.builder()<br>                .addClaims(claims)<br>                .signWith(SignatureAlgorithm.HS256, signKey)<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expire))<br>                .compact();<br>        <span class="hljs-keyword">return</span> jwt;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwt JWT令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JWT第二部分负载 payload 中存储的内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">parseJWT</span><span class="hljs-params">(String jwt)</span>&#123;<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.parser()<br>                .setSigningKey(signKey)<br>                .build()<br>                .parseClaimsJws(jwt)<br>                .getBody();<br>        <span class="hljs-keyword">return</span> claims;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.登录完成后，调用工具类生成<code>JWT</code>令牌，并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;login&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Emp emp)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;员工登录：&#123;&#125;&quot;</span>, emp);<br>        <span class="hljs-type">Emp</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> empService.login(emp);<br>        <span class="hljs-comment">//登录成功，生成令牌，下发令牌</span><br>        <span class="hljs-keyword">if</span>(e != <span class="hljs-literal">null</span>) &#123;<br>            Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            claims.put(<span class="hljs-string">&quot;id&quot;</span>, e.getId());<br>            claims.put(<span class="hljs-string">&quot;name&quot;</span>, e.getName());<br>            claims.put(<span class="hljs-string">&quot;username&quot;</span>, e.getUsername());<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JwtUtils.generateJwt(claims);<br>            <span class="hljs-keyword">return</span> Result.success(jwt);<br>        &#125;<br><br>        <span class="hljs-comment">//登录失败，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入登录页面，输入账号名和密码点击登录后，控制台<code>Network网络</code>会返回响应数据，响应数据包含生成的<code>JWT令牌</code>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E7%99%BB%E5%BD%95%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE.png"></p><p>前端会将<code>JWT</code>令牌存储在本地，即存储在<code>Application应用程序</code>下的<code>Local Storage本地存储</code>中。本地存储在移动端也支持，而<code>Cookie</code>只支持浏览器，在移动端不支持。（这是通过前端来存储的）</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/JWT%E4%BB%A4%E7%89%8C%E5%AD%98%E5%82%A8%E5%9C%A8%E6%9C%AC%E5%9C%B0.png"></p><p>前端将该<code>JWT</code>令牌的值存储起来，在后续的每一次请求当中都会将<code>JWT</code>令牌获取出来，然后携带到服务端。如：请求<code>dept</code>查询部门数据，前端在请求头<code>token</code>中携带了<code>JWT</code>令牌的值。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%89%8D%E7%AB%AF%E6%90%BA%E5%B8%A6JWT%E4%BB%A4%E7%89%8C.png"></p><p>使用<code>Postman</code>测试：</p><blockquote><p>请求路径：&#x2F;login</p><p>请求方式：POST</p><p>接口描述：该接口用于员工登录Tlias智能学习辅助系统，登录完毕后，系统下发JWT令牌。 </p><p>请求参数样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jinyong&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h5><p>概念：<code>Filter</code>过滤器，是<code>JavaWeb</code>三大组件（<code>Servlet</code>、<code>Filter</code>、<code>Listener</code>）之一。</p><p>过滤器可以<strong>把对资源的请求拦截下来</strong>，从而实现一些特殊的功能。</p><p>过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等。</p><h6 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h6><p>1.定义<code>Filter</code>：定义一个类，实现<code>Filter</code>接口，并重写其所有方法。</p><p>注意：必须使用<code>jakarta</code>下的包，不能使用<code>javax</code>，<code>javax</code>包虽然不报错，但是无法实现过滤功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.filter;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.annotation.WebFilter;<br><span class="hljs-comment">//import javax.servlet.*;</span><br><span class="hljs-comment">//import javax.servlet.annotation.WebFilter;</span><br><span class="hljs-comment">//注意：必须使用jakarta下的包，不能使用javax，javax包虽然不报错，但是无法实现过滤功能。</span><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//初始化方法，只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init 初始化方法执行了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//拦截到请求之后调用，调用多次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;拦截到了请求&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//销毁方法，只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy 销毁方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.配置<code>Filter</code>：<code>Filter</code>类上加<code>@WebFilter</code>注解，配置拦截资源的路径。引导类上加<code>@ServletComponentScan</code>开启<code>Servlet</code>组件支持。</p><p><code>Filter</code>是<code>JavaWeb</code>三大组件之一，并不是<code>SpringBoot</code>当中提供的功能，在<code>SpringBoot</code>要想使用<code>JavaWeb</code>三大组件，必须要使用<code>@ServletComponentScan</code>组件，表示开启了对<code>servlet</code>组件的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@ServletComponentScan</span> <span class="hljs-comment">//开启对servlet组件的支持</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootWebTliasApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(SpringbootWebTliasApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="详解（执行流程、拦截路径、过滤器链）"><a href="#详解（执行流程、拦截路径、过滤器链）" class="headerlink" title="详解（执行流程、拦截路径、过滤器链）"></a>详解（执行流程、拦截路径、过滤器链）</h6><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/Filter%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p>1.执行流程：请求 –&gt; 放行前逻辑 –&gt; 放行 –&gt; 资源 –&gt; 放行后逻辑。</p><p>放行后访问对应资源，资源访问完成后，还会回到<code>Filter</code>中。回到<code>Filter</code>中是执行放行后的逻辑。</p><p>2.拦截路径</p><p><code>Filter</code>可以根据需求，配置不同的拦截资源路径：<code>Filter</code>类上加<code>@WebFilter</code>注解，配置拦截资源的路径。</p><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问 &#x2F;login 路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><p>3.过滤器链：一个<code>web</code>应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链。</p><p>顺序：注解配置的<code>Filter</code>，<strong>优先级是按照过滤器类名（字符串）的自然排序</strong>。</p><p><code>doFilter</code>中的参数<code>FilterChain filterChain</code>就是一个过滤器链，执行<code>filterChain.doFilter</code>就是放行到下一个过滤器，如果当前是最后一个过滤器，就会放行到<code>Web</code>资源当中来访问<code>Web</code>资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.filter;<br><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbcFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//初始化方法，只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Abc init 初始化方法执行了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//拦截到请求之后调用，调用多次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Abc 拦截到了请求，放行前逻辑&quot;</span>);<br>        <span class="hljs-comment">//放行</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>        System.out.println(<span class="hljs-string">&quot;Abc 拦截到了请求，放行后逻辑&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//销毁方法，只调用一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Abc destroy 销毁方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行顺序：（注意：初始化和销毁的顺序不确定）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Abc</span> 拦截到了请求，放行前逻辑<br>Demo 拦截到了请求，放行前逻辑<br>Demo 拦截到了请求，放行后逻辑<br>Abc 拦截到了请求，放行后逻辑<br></code></pre></td></tr></table></figure><p>如果类名修改为<code>AbcFilter</code>，则执行顺序为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Demo</span> 拦截到了请求，放行前逻辑<br>Xbc 拦截到了请求，放行前逻辑<br>Xbc 拦截到了请求，放行后逻辑<br>Demo 拦截到了请求，放行后逻辑<br></code></pre></td></tr></table></figure><h6 id="登录校验Filter"><a href="#登录校验Filter" class="headerlink" title="登录校验Filter"></a>登录校验Filter</h6><p>流程：</p><ol><li>获取请求<code>url</code>。</li><li>判断请求<code>url</code>中是否包含<code>login</code>，如果包含，说明是登录操作，放行。</li><li>获取请求头中的令牌（<code>token</code>）。</li><li>判断令牌是否存在，如果不存在，返回错误结果（未登录）。</li><li>解析<code>token</code>，如果解析失败，返回错误结果（未登录）。</li><li>放行。</li></ol><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E7%99%BB%E5%BD%95%E6%A0%A1%E9%AA%8CFilter%E6%B5%81%E7%A8%8B.png"></p><p>在<code>pom.xml</code>文件中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--阿里巴巴fastJSON--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.52<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.filter;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> com.itheima.utils.JwtUtils;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.*;<br><span class="hljs-keyword">import</span> jakarta.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-comment">//必须使用jakarta下的包，使用javax会报错</span><br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-comment">//强转</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">resp</span> <span class="hljs-operator">=</span> (HttpServletResponse) servletResponse;<br><br>        <span class="hljs-comment">//1.获取请求url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        log.info(<span class="hljs-string">&quot;请求的url：&#123;&#125;&quot;</span>, url);<br><br>        <span class="hljs-comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span><br>        <span class="hljs-keyword">if</span>(url.contains(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            log.info(<span class="hljs-string">&quot;登陆操作，放行&quot;</span>);<br>            filterChain.doFilter(servletRequest, servletResponse);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//3.获取请求头中的令牌（token）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> req.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(jwt))&#123;<span class="hljs-comment">//判断jwt令牌是否为null或者空串</span><br>            log.info(<span class="hljs-string">&quot;请求头token为空，返回未登录的信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换，将对象转换为json数据响应 ---&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin); <span class="hljs-comment">//输出流写入，响应给浏览器</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            JwtUtils.parseJWT(jwt);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            log.info(<span class="hljs-string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换，将对象转换为json数据响应 ---&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin); <span class="hljs-comment">//输出流写入，响应给浏览器</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//6.放行</span><br>        log.info(<span class="hljs-string">&quot;令牌合法，放行&quot;</span>);<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用前端页面测试时，需要在<code>localStorage本地存储</code>删除<code>token</code>值，然后随便点击一个页面，因为没有识别到<code>token</code>令牌，前端页面会跳转到登陆页面。登录成功后则会执行放行操作。</p><p>使用<code>Postman</code>测试时，随便一个申请（如：<a href="http://localhost:8080/depts%EF%BC%89%E9%83%BD%E4%BC%9A%E8%BF%94%E5%9B%9E%EF%BC%9A%60%7B%22code%22:0,%22msg%22:%22NOT_LOGIN%22%7D%60%E3%80%82%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%EF%BC%88http://localhost:8080/login%EF%BC%89%E8%8E%B7%E5%8F%96%E5%88%B0token%E5%80%BC%EF%BC%9A">http://localhost:8080/depts）都会返回：`{&quot;code&quot;:0,&quot;msg&quot;:&quot;NOT_LOGIN&quot;}`。使用接口（http://localhost:8080/login）获取到token值：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;success&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi6YeR5bq4IiwiaWQiOjEsInVzZXJuYW1lIjoiamlueW9uZyIsImV4cCI6MTcyOTgwMzMwNH0.ePvji_UHQY8Yl88hoDntPt2FNZZ7Oc0duJzFpSNYAw0&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在访问其他接口时，在<code>Headers</code>处填写<code>token</code>值即可获取到访问信息。如果<code>token</code>值为空或者报错，都会返回<code>&#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;NOT_LOGIN&quot;&#125;</code>。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3%E6%90%BA%E5%B8%A6token%E5%80%BC.png"></p><h5 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h5><p>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring&#96;框架中提供的，用来<strong>动态拦截控制器方法的执行</strong>。</p><p>作用：拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。</p><h6 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h6><p>1.定义拦截器，实现HandlerInterceptor接口，并重写其所有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.interceptor;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行前运行，返回true：放行，返回false不放行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;preHandle&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//视图渲染完毕后运行，最后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.注册拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.config;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//注册拦截器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>        <span class="hljs-comment">//addPathPatterns：需要拦截哪些资源，excludePathPatterns：不需要拦截哪些资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="详解（拦截路径、执行流程）"><a href="#详解（拦截路径、执行流程）" class="headerlink" title="详解（拦截路径、执行流程）"></a>详解（拦截路径、执行流程）</h6><p>1.拦截路径：拦截器可以根据需求，配置不同的拦截路径：</p><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr><tr><td>&#x2F;depts&#x2F;**</td><td>&#x2F;depts下的任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td></tr></tbody></table><p>2.拦截器执行流程：</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p><code>Filter</code>与<code>Interceptor</code>的区别：</p><p><strong>接口规范不同</strong>：过滤器需要实现<code>Filter</code>接口，而拦截器需要实现<code>HandlerInterceptor</code>接口。</p><p><strong>拦截范围不同</strong>：过滤器<code>Filter</code>会拦截所有的资源，而<code>Interceptor</code>只会拦截<code>Spring</code>环境中的资源。</p><h6 id="登录校验Interceptor"><a href="#登录校验Interceptor" class="headerlink" title="登录校验Interceptor"></a>登录校验Interceptor</h6><p>和登录校验<code>Filter</code>的流程、代码一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.interceptor;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.itheima.pojo.Result;<br><span class="hljs-keyword">import</span> com.itheima.utils.JwtUtils;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-comment">////必须使用jakarta下的包，使用javax会报错</span><br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginCheckInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行前运行，返回true：放行，返回false不放行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取请求url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        log.info(<span class="hljs-string">&quot;请求的url：&#123;&#125;&quot;</span>, url);<br><br>        <span class="hljs-comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span><br>        <span class="hljs-keyword">if</span>(url.contains(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            log.info(<span class="hljs-string">&quot;登陆操作，放行&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//放行</span><br>        &#125;<br><br>        <span class="hljs-comment">//3.获取请求头中的令牌（token）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> req.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(jwt))&#123;<span class="hljs-comment">//判断jwt令牌是否为null或者空串</span><br>            log.info(<span class="hljs-string">&quot;请求头token为空，返回未登录的信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换，将对象转换为json数据响应 ---&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin); <span class="hljs-comment">//输出流写入，响应给浏览器</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//不放行</span><br>        &#125;<br><br>        <span class="hljs-comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            JwtUtils.parseJWT(jwt);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            log.info(<span class="hljs-string">&quot;解析令牌失败，返回未登录错误信息&quot;</span>);<br>            <span class="hljs-type">Result</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> Result.error(<span class="hljs-string">&quot;NOT_LOGIN&quot;</span>);<br>            <span class="hljs-comment">//手动转换，将对象转换为json数据响应 ---&gt; 阿里巴巴fastJSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">notLogin</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(error);<br>            resp.getWriter().write(notLogin); <span class="hljs-comment">//输出流写入，响应给浏览器</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//不放行</span><br>        &#125;<br><br>        <span class="hljs-comment">//6.放行</span><br>        log.info(<span class="hljs-string">&quot;令牌合法，放行&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//目标资源方法运行后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;postHandle&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">//视图渲染完毕后运行，最后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterCompletion&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>出现异常时（比如：添加存在的部门时，会报错：<code>java.sql.SQLIntegrityConstraintViolationException: Duplicate entry &#39;就业部&#39; for key &#39;dept.name&#39;</code>），默认返回的结果不符合规范：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-10-24T09:20:35.147+00:00&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Internal Server Error&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/depts&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>出现异常时，异常一层一层往上抛，最后抛给框架，框架返回上述<code>JSON</code>格式数据，里面装着错误信息。但是该错误信息不符合开发规范，需要返回<code>Result</code>格式的<code>JSON</code>数据。</p><p>出现异常时处理方法：</p><p>方案一：在<code>Controller</code>的方法中进行<code>try…catch</code>处理。（代码臃肿，不推荐）</p><p>方案二：全局异常处理器。（简单、优雅，推荐）</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.exception;<br><br><span class="hljs-comment">//全局异常处理器</span><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><span class="hljs-comment">//捕获所有异常</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">exception</span><span class="hljs-params">(Exception e)</span>&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> Result.error(<span class="hljs-string">&quot;对不起，操作失败，请联系管理员&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><p>事务是一组操作的集合，它是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败。</p><ol><li>开启事务（一组操作开始前，开启事务）：<code>start transaction / begin ;</code></li><li>提交事务（这组操作全部成功后，提交事务）：<code>commit ;</code></li><li>回滚事务（中间任何一个操作出现异常，回滚事务）：<code>rollback ;</code></li></ol><h5 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h5><p>案例：解散部门：删除部门，同时删除该部门下的员工。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E5%AE%8C%E5%96%84%E5%88%A0%E9%99%A4%E9%83%A8%E9%97%A8%E5%8A%9F%E8%83%BD%EF%BC%88%E4%BA%8B%E5%8A%A1%EF%BC%89.png"></p><p>注解：<code>@Transactional</code></p><p>位置：业务（<code>service</code>）层的方法上、类上、接口上。</p><p>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常，回滚事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//EmpMapper</span><br><span class="hljs-comment">//根据部门ID删除该部门下的员工数据</span><br><span class="hljs-meta">@Delete(&quot;delete from emp where dept_id = #&#123;deptId&#125;&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByDeptId</span><span class="hljs-params">(Integer deptId)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        deptMapper.deleteById(id);<span class="hljs-comment">//根据ID删除部门数据</span><br>        <span class="hljs-comment">//int i = 1/0;</span><br>        empMapper.deleteByDeptId(id);<span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>开启事务管理日志（可以显示事务开启、提交、回滚等信息）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#开启事务管理日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CMD">#事务管理日志<br><br>#创建日志<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">22</span>:<span class="hljs-number">20</span>.<span class="hljs-number">343</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">11996</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>] o.s.jdbc.support.JdbcTransactionManager  : Creating new transaction with name [com.itheima.service.impl.DeptServiceImpl.delete]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">22</span>:<span class="hljs-number">20</span>.<span class="hljs-number">346</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">11996</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>] o.s.jdbc.support.JdbcTransactionManager  : Acquired Connection [HikariProxyConnection@<span class="hljs-number">1443413090</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">6</span>b466344] <span class="hljs-keyword">for</span> JDBC transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">22</span>:<span class="hljs-number">20</span>.<span class="hljs-number">351</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">11996</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>] o.s.jdbc.support.JdbcTransactionManager  : Switching JDBC Connection [HikariProxyConnection@<span class="hljs-number">1443413090</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">6</span>b466344] to manual commit<br><br>#日志回滚<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">22</span>:<span class="hljs-number">20</span>.<span class="hljs-number">368</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">11996</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>] o.s.jdbc.support.JdbcTransactionManager  : Initiating transaction rollback<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">22</span>:<span class="hljs-number">20</span>.<span class="hljs-number">369</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">11996</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>] o.s.jdbc.support.JdbcTransactionManager  : Rolling back JDBC transaction on Connection [HikariProxyConnection@<span class="hljs-number">1443413090</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">6</span>b466344]<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">22</span>:<span class="hljs-number">20</span>.<span class="hljs-number">392</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">11996</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">3</span>] o.s.jdbc.support.JdbcTransactionManager  : Releasing JDBC Connection [HikariProxyConnection@<span class="hljs-number">1443413090</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">6</span>b466344] after transaction<br><br>#日志提交<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">26</span>:<span class="hljs-number">06</span>.<span class="hljs-number">811</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">39052</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Initiating transaction commit<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">26</span>:<span class="hljs-number">06</span>.<span class="hljs-number">812</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">39052</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Committing JDBC transaction on Connection [HikariProxyConnection@<span class="hljs-number">2140932661</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">3</span>cd75022]<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">25</span>T14:<span class="hljs-number">26</span>:<span class="hljs-number">06</span>.<span class="hljs-number">826</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">39052</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Releasing JDBC Connection [HikariProxyConnection@<span class="hljs-number">2140932661</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">3</span>cd75022] after transaction<br></code></pre></td></tr></table></figure><h5 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h5><h6 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h6><p>默认情况下，只有出现<code>RuntimeException</code>才回滚异常。<code>rollbackFor</code>属性用于控制出现何种异常类型，回滚事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span> <span class="hljs-comment">//出现所有的异常事务都会回滚</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<span class="hljs-comment">//在DeptService和DeptController的delete方法都要throws Exception</span><br>    deptMapper.deleteById(id);<span class="hljs-comment">//根据ID删除部门数据</span><br>    <span class="hljs-comment">//int i = 1/0; //运行时异常：ArithmeticException extends RuntimeException</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;出错啦&quot;</span>);<span class="hljs-comment">//不是运行时异常，不会进行rollback回滚操作</span><br>    &#125;<br>    empMapper.deleteByDeptId(id);<span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h6><p>事务传播行为：指的就是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png"></p><table><thead><tr><th><strong>属性值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>REQUIRED</td><td>【默认值】需要事务，有则加入，无则创建新事务</td></tr><tr><td>REQUIRES_NEW</td><td>需要新事务，无论有无，总是创建新事务</td></tr><tr><td>SUPPORTS</td><td>支持事务，有则加入，无则在无事务状态中运行</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前事务</td></tr><tr><td>MANDATORY</td><td>必须有事务，否则抛异常</td></tr><tr><td>NEVER</td><td>必须没事务，否则抛异常</td></tr></tbody></table><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><p>需求：解散部门时，无论是成功还是失败，都要记录操作日志。</p><p>步骤：</p><ol><li>解散部门：删除部门、删除部门下的员工。</li><li>记录日志到数据库表中。</li></ol><p><code>REQUIRED</code>：大部分情况下都是用该传播行为即可。</p><p><code>REQUIRES_NEW</code>：不希望事务之间相互影响时，可以使用该传播行为。比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功。</p><p>1.新建部门操作日志表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">create table dept_log(<br>                         id int auto_increment comment &#x27;主键ID&#x27; primary key,<br>                         create_time datetime null comment &#x27;操作时间&#x27;,<br>                         description varchar(300) null comment &#x27;操作描述&#x27;<br>)comment &#x27;部门操作日志表&#x27;;<br></code></pre></td></tr></table></figure><p>2.记录日志到数据库表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLog</span> &#123;<span class="hljs-comment">//日志类</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br>    <span class="hljs-keyword">private</span> String description;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptLogServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptLogService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogMapper deptLogMapper;<br><br>    <span class="hljs-meta">@Transactional</span><span class="hljs-comment">//(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span> &#123;<br>        deptLogMapper.insert(deptLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DeptLogMapper</span> &#123;<br>    <span class="hljs-meta">@Insert(&quot;insert into dept_log(create_time,description) values(#&#123;createTime&#125;,#&#123;description&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog log)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptMapper deptMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EmpMapper empMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DeptLogService deptLogService;<br><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span> <span class="hljs-comment">//出现所有的异常事务都会回滚</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            deptMapper.deleteById(id);<span class="hljs-comment">//根据ID删除部门数据</span><br>            <br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>; <span class="hljs-comment">//运行时异常：ArithmeticException extends RuntimeException</span><br>            <br>            empMapper.deleteByDeptId(id);<span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//无论是成功还是失败，都要记录操作日志，所以需要放到finally代码中</span><br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作，此次操作的是：&quot;</span> + id + <span class="hljs-string">&quot;号部门&quot;</span>);<br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当删除某一个部门时，运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMD"># 操作日志<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">305</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Creating new transaction with name [com.itheima.service.impl.DeptServiceImpl.delete]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-java.lang.Exception<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">567</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Acquired Connection [HikariProxyConnection@<span class="hljs-number">504771362</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">7</span>d17447b] <span class="hljs-keyword">for</span> JDBC transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">569</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Switching JDBC Connection [HikariProxyConnection@<span class="hljs-number">504771362</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">7</span>d17447b] to manual commit<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">618</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Participating <span class="hljs-keyword">in</span> existing transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">627</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Initiating transaction rollback<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">627</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Rolling back JDBC transaction on Connection [HikariProxyConnection@<span class="hljs-number">504771362</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">7</span>d17447b]<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">51</span>:<span class="hljs-number">48</span>.<span class="hljs-number">629</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">28976</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Releasing JDBC Connection [HikariProxyConnection@<span class="hljs-number">504771362</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">7</span>d17447b] after transaction<br><span class="hljs-function">java.lang.ArithmeticException: / <span class="hljs-title">by</span> <span class="hljs-title">zero</span></span><br></code></pre></td></tr></table></figure><p>执行过程：默认的事务传播行为是<code>REQUIRED</code>，如果<code>public void insert(DeptLog deptLog)</code>方法使用默认的传播行为，调用<code>deptLogService.insert(deptLog)</code>方法时，调用已存在的事务<code>empMapper.deleteByDeptId(id)</code>，即：执行<code>empMapper.deleteByDeptId(id)</code>和<code>deptLogService.insert(deptLog)</code>两个方法共用一个事务。执行<code>deptLogService.insert(deptLog)</code>成功插入一条语句后，由于在该方法执行过程中抛出了<code>java.lang.ArithmeticException: / by zero</code>的算术运算异常，所以整个事务都需要回滚<code>Initiating transaction rollback</code>，由于两个方法共用一个事务，所以两个方法都会回滚，所以无法插入操作日志。</p><p>解决方法：设置<code>public void insert(DeptLog deptLog)</code>的传播行为为<code>REQUIRES_NEW</code>。无论当前运行方法中是否有事务，在调用<code>public void insert(DeptLog deptLog)</code>方法时，都会开启一个新的事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DeptLogServiceImpl类</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><span class="hljs-comment">//修改事务传播行为为REQUIRES_NEW即可</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(DeptLog deptLog)</span> &#123;<br>    deptLogMapper.insert(deptLog);<br>&#125;<br></code></pre></td></tr></table></figure><p>当删除某一个部门时，运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs CMD">#操作日志<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">505</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Creating new transaction with name [com.itheima.service.impl.DeptServiceImpl.delete]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT,-java.lang.Exception<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">755</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Acquired Connection [HikariProxyConnection@<span class="hljs-number">1598400954</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">73</span>cb1ed4] <span class="hljs-keyword">for</span> JDBC transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">757</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Switching JDBC Connection [HikariProxyConnection@<span class="hljs-number">1598400954</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">73</span>cb1ed4] to manual commit<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">813</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Suspending current transaction, creating new transaction with name [com.itheima.service.impl.DeptLogServiceImpl.insert]<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">833</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Acquired Connection [HikariProxyConnection@<span class="hljs-number">1499621420</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">79341019</span>] <span class="hljs-keyword">for</span> JDBC transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">833</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Switching JDBC Connection [HikariProxyConnection@<span class="hljs-number">1499621420</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">79341019</span>] to manual commit<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">844</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Initiating transaction commit<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">844</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Committing JDBC transaction on Connection [HikariProxyConnection@<span class="hljs-number">1499621420</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">79341019</span>]<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">847</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Releasing JDBC Connection [HikariProxyConnection@<span class="hljs-number">1499621420</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">79341019</span>] after transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">849</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Resuming suspended transaction after completion of inner transaction<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">849</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Initiating transaction rollback<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">850</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Rolling back JDBC transaction on Connection [HikariProxyConnection@<span class="hljs-number">1598400954</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">73</span>cb1ed4]<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T10:<span class="hljs-number">59</span>:<span class="hljs-number">46</span>.<span class="hljs-number">853</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span> DEBUG <span class="hljs-number">13824</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] o.s.jdbc.support.JdbcTransactionManager  : Releasing JDBC Connection [HikariProxyConnection@<span class="hljs-number">1598400954</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@<span class="hljs-number">73</span>cb1ed4] after transaction<br><span class="hljs-function">java.lang.ArithmeticException: / <span class="hljs-title">by</span> <span class="hljs-title">zero</span></span><br></code></pre></td></tr></table></figure><p>执行过程：运行<code>empMapper.deleteByDeptId(id)</code>方法时会创建新事务，调用<code>deptLogService.insert(deptLog)</code>方法时，挂起当前事务，然后又创建一个新事务。当<code>deptLogService.insert(deptLog)</code>方法运行完毕后，提交该事务。当内部的事务运行结束之后，继续完成刚才挂起的事务，即<code>empMapper.deleteByDeptId(id)</code>方法所开启的事务。由于该事务运行过程中报错了，所以外部事务会进行正常的回滚操作。</p><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><h5 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h5><p><code>AOP</code>：<code>Aspect Oriented Programming</code>（<strong>面向切面编程</strong>、面向方面编程），其实就是面向特定方法编程。</p><p>场景：案例部分功能运行较慢，定位执行耗时较长的业务方法，此时需要统计每一个业务方法的执行耗时。</p><p>实现：<strong>动态代理</strong>是面向切面编程最主流的实现。而<code>SpringAOP</code>是<code>Spring</code>框架的高级技术，旨在管理<code>bean</code>对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程。</p><h5 id="AOP快速入门"><a href="#AOP快速入门" class="headerlink" title="AOP快速入门"></a>AOP快速入门</h5><p>【<code>SpringAOP</code>快速入门：统计各个业务层方法执行耗时】</p><p>1.导入依赖：在<code>pom.xml</code>中导入<code>AOP</code>的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--AOP--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.编写<code>AOP</code>程序：针对于特定方法根据业务需要进行编程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//AOP类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeAspect</span> &#123;<br>    <span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span><span class="hljs-comment">//运行com.itheima.service包下所有的类或接口中的所有方法都会运行如下程序</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordTime</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//1.记录方法开始时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//2.调用原始方法运行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br><br>        <span class="hljs-comment">//3.记录结束时间，计算方法执行耗时</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        log.info(joinPoint.getSignature() + <span class="hljs-string">&quot;方法执行耗时：&#123;&#125;ms&quot;</span>, end - begin);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>AOP</code>场景：记录操作日志、权限控制、事务管理。</p><p>优势：代码无侵入、减少重复代码、提高开发效率、维护方便。</p><h5 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h5><p><strong>连接点</strong>：<code>JoinPoint</code>，可以被<code>AOP</code>控制的方法（暗含方法执行时的相关信息）。</p><p><strong>通知</strong>：<code>Advice</code>，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）。</p><p><strong>切入点</strong>：<code>PointCut</code>，匹配连接点的条件，通知仅会在切入点方法执行时被应用。</p><p><strong>切面</strong>：<code>Aspect</code>，描述通知与切入点的对应关系（通知+切入点）。</p><p><strong>目标对象</strong>：<code>Target</code>，通知所应用的对象。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/AOP%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.png"></p><p><strong>AOP执行流程</strong>（以下图为例）：<code>SpringAOP</code>底层是基于动态代理技术实现的。在程序运行的时候，会基于动态代理技术为目标对象<code>DeptServiceImpl</code>生成一个代理对象<code>DeptServiceProxy</code>。在代理对象中会对目标对象的原始方法进行功能增强，增强的逻辑就是<code>AOP</code>里面定义的<strong>通知</strong>（<code>Advice</code>）：在方法运行开始之前先记录方法运行的开始时间，接下来调用原始的方法（<code>list</code>方法）执行，之后记录方法运行的结束时间，最后统计方法执行的耗时。最终在<code>DeptController</code>程序运行时，注入的的<code>DeptService</code>不再是目标对象<code>DeptServiceImpl</code>，而是注入代理对象<code>DeptServiceProxy</code>。最终调用<code>list</code>方法时，调用的是代理对象<code>DeptServiceProxy</code>中的<code>list</code>方法，这个<code>list</code>方法已经进行了功能的增强。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/AOP%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p>运行中断点显示：使用了<code>Spring</code>底层动态代理技术：<code>CG</code>类网动态代理。</p><p><img src="/2024/10/27/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9ASpringBoot%E6%A1%88%E4%BE%8B/Spring%E5%BA%95%E5%B1%82%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF%EF%BC%9ACG%E7%B1%BB%E7%BD%91%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.png"></p><h5 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h5><ul><li><code>@Around</code>：环绕通知，此注解标注的通知方法在目标方法前、后都被执行。</li><li><code>@Before</code>：前置通知，此注解标注的通知方法在目标方法前被执行。</li><li><code>@After</code> ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行。</li><li><code>@AfterReturning</code> ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行。</li><li><code>@AfterThrowing </code>： 异常后通知，此注解标注的通知方法发生异常后执行。</li></ul><p>注意：</p><ol><li><code>@Around</code>环绕通知需要自己调用<code>ProceedingJoinPoint.proceed()</code>来让原始方法执行，其他通知不需要考虑目标方法执行。</li><li><code>@Around</code>环绕通知方法的返回值，必须指定为<code>Object</code>，来接收原始方法的返回值。</li><li><code>@AfterReturning</code>和<code>@AfterThrowing </code>是互斥的，只有一个会发生。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br><br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-comment">//@Around(&quot;com.itheima.aop.MyAspect1.pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CMD">#没有异常时的输出日志：没有afterThrowing<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">45</span>:<span class="hljs-number">38</span>.<span class="hljs-number">714</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">14000</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : around before ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">45</span>:<span class="hljs-number">38</span>.<span class="hljs-number">715</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">14000</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : before ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">45</span>:<span class="hljs-number">39</span>.<span class="hljs-number">174</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">14000</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : afterReturning ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">45</span>:<span class="hljs-number">39</span>.<span class="hljs-number">174</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">14000</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : after ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">45</span>:<span class="hljs-number">39</span>.<span class="hljs-number">174</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">14000</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : around after ...<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CMD">#在DeptServiceImpl类下的list方法加入int i = <span class="hljs-number">1</span>/<span class="hljs-number">0</span>; 页面访问部门管理时会出现异常<br>#异常时的输出日志：没有afterReturning和around after<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">53</span>:<span class="hljs-number">17</span>.<span class="hljs-number">835</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">2472</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : around before ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">53</span>:<span class="hljs-number">17</span>.<span class="hljs-number">836</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">2472</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : before ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">53</span>:<span class="hljs-number">17</span>.<span class="hljs-number">836</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">2472</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : afterThrowing ...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">27</span>T15:<span class="hljs-number">53</span>:<span class="hljs-number">17</span>.<span class="hljs-number">836</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">2472</span> --- [springboot-web-tlias] [nio-<span class="hljs-number">8080</span>-exec-<span class="hljs-number">1</span>] com.itheima.aop.MyAspect                 : after ...<br></code></pre></td></tr></table></figure><h5 id="PointCut"><a href="#PointCut" class="headerlink" title="@PointCut"></a><code>@PointCut</code></h5><p><code>@PointCut</code>：将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。</p><p><code>private</code>：仅能在当前切面类中引用该表达式。</p><p><code>public</code>：在其他外部的切面类中也可以引用该表达式。在当前切面类使用公共的切点表达式：<code>@Around(&quot;pt()&quot;)</code>，在其他外部切面类使用公共的切点表达式：<code>@Around(&quot;com.itheima.aop.MyAspect1.pt()&quot;)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect1</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//调用目标对象的原始方法执行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br><br>        log.info(<span class="hljs-string">&quot;around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterReturning ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterThrowing(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;afterThrowing ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h5><p>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行。</p><p>1.不同切面类中，<strong>默认按照切面类的类名字母排序</strong>：</p><ul><li>目标方法前的通知方法：字母排名靠前的先执行。</li><li>目标方法后的通知方法：字母排名靠前的后执行。</li></ul><p>2.用<code>@Order(数字)</code>加在<strong>切面类上来控制顺序</strong>。</p><ul><li>目标方法前的通知方法：数字小的先执行。</li><li>目标方法后的通知方法：数字小的后执行。</li></ul><h5 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h5><p>切入点表达式：描述切入点方法的一种表达式。</p><p>作用：主要用来<strong>决定项目中的哪些方法需要加入通知</strong>。</p><p>常见形式：</p><ul><li><code>execution(……)</code>：根据方法的签名来匹配。</li><li><code>@annotation(……)</code>：根据注解匹配。</li></ul><h6 id="execution"><a href="#execution" class="headerlink" title="execution"></a><code>execution</code></h6><p><code>execution</code>主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) <span class="hljs-keyword">throws</span> 异常?)<br></code></pre></td></tr></table></figure><p>其中带<code>?</code>的表示可以省略的部分。</p><ol><li>访问修饰符：可省略（比如: <code>public</code>、<code>protected</code>）</li><li>包名.类名： 可省略</li><li><code>throws</code>异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</li></ol><p>可以使用通配符描述切入点。</p><ul><li><p><code>*</code>：<strong>单个独立的任意符号</strong>，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">execution(* com.*.service.*.update*(*))<br></code></pre></td></tr></table></figure></li><li><p><code>..</code>：<strong>多个连续的任意符号</strong>，可以通配任意层级的包，或任意类型、任意个数的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">execution(* com.itheima..DeptService.*(..))<br></code></pre></td></tr></table></figure></li></ul><p>注意：根据业务需要，可以使用 且（<code>&amp;&amp;</code>）、或（<code>||</code>）、非（<code>!</code>） 来组合比较复杂的切入点表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || &quot; +</span><br><span class="hljs-meta">          &quot;execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>书写建议：</p><ol><li>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是<code>find</code>开头，更新类方法都是<code>update</code>开头。</li><li>描述切入点方法通常<strong>基于接口描述</strong>，而不是直接描述实现类，增强拓展性。</li><li>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用<code>..</code>，使用<code>*</code>匹配单个包。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-comment">//切面类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect6</span> &#123;<br>    <span class="hljs-comment">//@Pointcut(&quot;execution(public void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))&quot;)</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(void com.itheima.service.impl.DeptServiceImpl.delete(java.lang.Integer))&quot;)//省略访问权限修饰符</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(void delete(java.lang.Integer))&quot;) //包名.类名不建议省略</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(void com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)//基于接口</span><br><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(void com.itheima.service.DeptService.*(java.lang.Integer))&quot;)//DeptService下所有的方法，方法参数为Integer</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com.*.service.DeptService.*(*))&quot;)//第二级包是任意的，DeptService下所有的方法，方法中必须有一个任意类型的参数</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com.itheima.service.*Service.delete*(*))&quot;)//以Service结尾的类/接口下以delete开头的方法，方法中必须有一个参数</span><br><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)//DeptService下所有的方法，任意个任意类型的形参（没有也行）</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com..DeptService.*(..))&quot;)//任意层级的包，DeptService下所有的方法，任意个任意类型的形参（没有也行）</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com..*.*(..))&quot;)//第一级包是com，后面多少个层级无所谓，所有类中所有的方法</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* *(..))&quot;) //慎用，匹配当前环境中所有的方法</span><br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || &quot; +</span><br><span class="hljs-meta">            &quot;execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect6 ... before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//在测试类进行测试</span><br><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootAopQuickstart1ApplicationTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DeptService deptService;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAopDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>deptService.delete(<span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAopList</span><span class="hljs-params">()</span>&#123;<br>List&lt;Dept&gt; list = deptService.list();<br>System.out.println(list);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAopGetById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Dept</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> deptService.get(<span class="hljs-number">1</span>);<br>System.out.println(dept);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a><code>@annotation</code></h6><p><code>@annotation</code>切入点表达式，用于匹配标识有特定注解的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//运行时有效</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><span class="hljs-comment">//该注解可以作用在方法上</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyLog &#123;<span class="hljs-comment">//自定义注解标识方法</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-comment">//切面类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect7</span> &#123;<br>    <span class="hljs-comment">//匹配DeptServiceImpl中的 list() 和 delete(Integer id)方法</span><br>    <span class="hljs-comment">//@Pointcut(&quot;execution(* com.itheima.service.DeptService.list()) || execution(* com.itheima.service.DeptService.delete(java.lang.Integer))&quot;)</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        要作用在com.itheima.service.DeptService.list()和com.itheima.service.DeptService.list()这两个方法上，</span><br><span class="hljs-comment">        需要在这两个方法上加上@MyLog</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.itheima.aop.MyLog)&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect7 ... before ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeptService</span> &#123;<br>    <span class="hljs-meta">@MyLog</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Dept&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//int i = 1/0;</span><br>        <span class="hljs-keyword">return</span> deptMapper.list();<br>    &#125;<br>    <br>    <span class="hljs-meta">@MyLog</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span> <span class="hljs-comment">//出现所有的异常事务都会回滚</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            deptMapper.deleteById(id);<span class="hljs-comment">//根据ID删除部门数据</span><br>            <span class="hljs-comment">//int i = 1/0; //运行时异常：ArithmeticException extends RuntimeException</span><br>            <span class="hljs-comment">//if(true)&#123;throw new Exception(&quot;出错啦&quot;);&#125;//不是运行时异常，不会进行rollback回滚操作</span><br>            empMapper.deleteByDeptId(id);<span class="hljs-comment">//根据部门ID删除该部门下的员工</span><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-type">DeptLog</span> <span class="hljs-variable">deptLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeptLog</span>();<br>            deptLog.setCreateTime(LocalDateTime.now());<br>            deptLog.setDescription(<span class="hljs-string">&quot;执行了解散部门的操作，此次操作的是：&quot;</span> + id + <span class="hljs-string">&quot;号部门&quot;</span>);<br>            deptLogService.insert(deptLog);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h5><p>在<code>Spring</code>中用<code>JoinPoint</code>抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p><ol><li>对于<code>@Around</code>通知，获取连接点信息只能使用<code>ProceedingJoinPoint</code>。</li><li>对于其他四种通知，获取连接点信息只能使用<code>JoinPoint</code>，它是<code>ProceedingJoinPoint</code>的父类型。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-comment">//切面类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect8</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.service.DeptService.*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect8 ... before ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log.info(<span class="hljs-string">&quot;MyAspect8 around before ...&quot;</span>);<br><br>        <span class="hljs-comment">//1. 获取目标对象的类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        log.info(<span class="hljs-string">&quot;目标对象的类名:&#123;&#125;&quot;</span>, className);<br><br>        <span class="hljs-comment">//2. 获取目标方法的方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        log.info(<span class="hljs-string">&quot;目标方法的方法名: &#123;&#125;&quot;</span>,methodName);<br><br>        <span class="hljs-comment">//3. 获取目标方法运行时传入的参数</span><br>        Object[] args = joinPoint.getArgs();<br>        log.info(<span class="hljs-string">&quot;目标方法运行时传入的参数: &#123;&#125;&quot;</span>, Arrays.toString(args));<br><br>        <span class="hljs-comment">//4. 放行目标方法执行</span><br>        <span class="hljs-comment">//proceed有两个重载方法：有参（需要将上述获取到的参数args传入）和无参（调用无参就可以了）</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br><br>        <span class="hljs-comment">//5. 获取目标方法运行的返回值</span><br>        log.info(<span class="hljs-string">&quot;目标方法运行的返回值: &#123;&#125;&quot;</span>,result);<br><br>        log.info(<span class="hljs-string">&quot;MyAspect8 around after ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="AOP案例"><a href="#AOP案例" class="headerlink" title="AOP案例"></a>AOP案例</h5><p>【案例】将增、删、改相关接口的操作日志记录到数据库表中。日志信息包含：操作人、操作时间、执行方法的全类名、执行方法名、方法运行时参数、返回值、方法执行时长。</p><p>1.导入资料中准备好的数据库表结构，并引入对应的实体类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 操作日志表<br>create table operate_log(<br>                            id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>                            operate_user int unsigned comment &#x27;操作人ID&#x27;,<br>                            operate_time datetime comment &#x27;操作时间&#x27;,<br>                            class_name varchar(100) comment &#x27;操作的类名&#x27;,<br>                            method_name varchar(100) comment &#x27;操作的方法名&#x27;,<br>                            method_params varchar(1000) comment &#x27;方法参数&#x27;,<br>                            return_value varchar(2000) comment &#x27;返回值&#x27;,<br>                            cost_time bigint comment &#x27;方法执行耗时, 单位:ms&#x27;<br>) comment &#x27;操作日志表&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperateLog</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//ID</span><br>    <span class="hljs-keyword">private</span> Integer operateUser; <span class="hljs-comment">//操作人ID</span><br>    <span class="hljs-keyword">private</span> LocalDateTime operateTime; <span class="hljs-comment">//操作时间</span><br>    <span class="hljs-keyword">private</span> String className; <span class="hljs-comment">//操作类名</span><br>    <span class="hljs-keyword">private</span> String methodName; <span class="hljs-comment">//操作方法名</span><br>    <span class="hljs-keyword">private</span> String methodParams; <span class="hljs-comment">//操作方法参数</span><br>    <span class="hljs-keyword">private</span> String returnValue; <span class="hljs-comment">//操作方法返回值</span><br>    <span class="hljs-keyword">private</span> Long costTime; <span class="hljs-comment">//操作耗时</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OperateLogMapper</span> &#123;<br>    <span class="hljs-comment">//插入日志数据</span><br>    <span class="hljs-meta">@Insert(&quot;insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span><br><span class="hljs-meta">            &quot;values (#&#123;operateUser&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(OperateLog log)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.自定义注解<code>@Log</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.anno;<br><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//运行时有效</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><span class="hljs-comment">//该注解可以作用在方法上</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<span class="hljs-comment">//自定义注解标识方法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3.定义切面类，完成记录操作日志的逻辑。</p><p>获取当前登录用户：获取<code>request</code>对象，从请求头中获取到<code>jwt</code>令牌，解析令牌获取出当前用户的<code>id</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<span class="hljs-comment">//注意是jakarta（JDK17及以上），不是javax</span><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><span class="hljs-comment">//切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br>    <span class="hljs-comment">//因为请求对象已经被spring自动存在了ioc容器中,所以这里可以直接使用@Autowired注入当前这次请求的请求对象</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OperateLogMapper operateLogMapper;<br><br>    <span class="hljs-meta">@Around(&quot;@annotation(com.itheima.anno.Log)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">recordLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//操作人ID:当前登录员工ID(从jwt令牌中获取)</span><br>        <span class="hljs-comment">//获取请求头中的jwt令牌,解析令牌</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> JwtUtils.parseJWT(jwt);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">operateUser</span> <span class="hljs-operator">=</span> (Integer) claims.get(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        <span class="hljs-comment">//当前操作时间</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">operateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><br>        <span class="hljs-comment">//操作类名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br><br>        <span class="hljs-comment">//操作方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br><br>        <span class="hljs-comment">//操作方法参数</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodParams</span> <span class="hljs-operator">=</span> Arrays.toString(args);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//调用原始目标方法运行</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> joinPoint.proceed();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-comment">//方法返回值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> JSONObject.toJSONString(result);<br><br>        <span class="hljs-comment">//操作耗时</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">costTime</span> <span class="hljs-operator">=</span> end - begin;<br><br>        <span class="hljs-comment">//记录操作日志</span><br>        <span class="hljs-type">OperateLog</span> <span class="hljs-variable">operateLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OperateLog</span>(<span class="hljs-literal">null</span>, operateUser, operateTime, className, methodName, methodParams, returnValue, costTime);<br>        operateLogMapper.insert(operateLog);<br><br>        log.info(<span class="hljs-string">&quot;AOP记录操作日志:&#123;&#125;&quot;</span>, operateLog);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.在<code>DeptController</code>和<code>EmpController</code>的增、删、改方法中加入<code>@Log</code>注解。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb后端开发：MySQL和MyBatis</title>
    <link href="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/"/>
    <url>/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h4 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h4><h5 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h5><p>官网下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>1.下载<code>mysql-9.0.1-winx64.msi</code>或<code>mysql-9.0.1-winx64.zip</code>两个安装包，下载两者中的任何一个都可以，将<code>zip</code>解压后可以得到<code>MySQL</code>的软件本体了（就是一个文件夹），把它放在安装的位置 。</p><p>2.配置环境变量</p><p>新建系统变量：<code>MYSQL_HOME</code>，值为安装目录。</p><p>系统变量的<code>Path</code>中新建：<code>%MYSQL_HOME%\bin</code>。</p><p>3.验证是否安装成功：命令行输入<code>mysql</code>，出现以下结果则表明安装成功。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\<span class="hljs-title">srr18</span>&gt;<span class="hljs-title">mysql</span></span><br><span class="hljs-function"><span class="hljs-title">ERROR</span> 1045 (28000): <span class="hljs-title">Access</span> <span class="hljs-title">denied</span> <span class="hljs-title">for</span> <span class="hljs-title">user</span> &#x27;<span class="hljs-title">ODBC</span>&#x27;@&#x27;<span class="hljs-title">localhost</span>&#x27; (<span class="hljs-title">using</span> <span class="hljs-title">password</span>: <span class="hljs-title">NO</span>)</span><br></code></pre></td></tr></table></figure><p>如果提示<code>mysql不是内部或外部命令，也不是可运行的程序或批处理文件</code>则表示添加添加失败，请重新检查步骤并重试。</p><h6 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h6><p><strong>管理员身份</strong>打开命令行窗口：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">mysqld --initialize-insecure<br></code></pre></td></tr></table></figure><p>稍微等待一会，如果出现没有出现报错信息，则证明<code>data</code>目录初始化成功，查看<code>MySQL</code>目录下已经有<code>data</code>目录生成。</p><p>注意：若出现<code> Errcode：13 -Permission denied</code>错误，则是由于<strong>权限不足</strong>导致的，以管理员方式运行<code>cmd</code>即可。</p><h6 id="注册MySQL服务"><a href="#注册MySQL服务" class="headerlink" title="注册MySQL服务"></a>注册MySQL服务</h6><p>命令行（必须以<strong>管理员身</strong>份启动）中：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">mysqld -install<br></code></pre></td></tr></table></figure><p>显示<code>Service successfully installed.</code>则表示安装好<code>MySQL</code>服务。</p><h6 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h6><p>命令行输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql  // 启动mysql服务<br><span class="hljs-built_in">net</span> stop mysql  // 停止mysql服务<br></code></pre></td></tr></table></figure><h6 id="修改默认账户密码"><a href="#修改默认账户密码" class="headerlink" title="修改默认账户密码"></a>修改默认账户密码</h6><p>在命令行里输入<code>mysql admin -u root password 1234</code>，这里的<code>1234</code>就是指修改后的默认管理员（即<code>root</code>账户）的密码。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">mysql admin -u root password <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><h6 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">mysql -uroot -p1234<br></code></pre></td></tr></table></figure><p>上述<code>-p</code>后面是密码，默认的<code>root</code>账号没有密码，可以使用<code>mysql -uroot</code>登录，命令行要求输入密码，直接回车即可。</p><p>登录参数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认<span class="hljs-number">127.0.0.1</span>) -P端口号(默认<span class="hljs-number">3306</span>)<br></code></pre></td></tr></table></figure><h6 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-keyword">exit</span><br>quit<br></code></pre></td></tr></table></figure><h6 id="MySQL图形化工具DataGrip（IDEA内置有DataGrip）"><a href="#MySQL图形化工具DataGrip（IDEA内置有DataGrip）" class="headerlink" title="MySQL图形化工具DataGrip（IDEA内置有DataGrip）"></a>MySQL图形化工具DataGrip（IDEA内置有DataGrip）</h6><p>介绍：<code>DataGrip</code>是<code>JetBrains</code>旗下的一款数据库管理工具，是管理和开发<code>MySQL</code>、<code>Oracle</code>、<code>PostgreSQL</code>的理想解决方案。</p><p>官网： <a href="https://www.jetbrains.com/zh-cn/datagrip/">https://www.jetbrains.com/zh-cn/datagrip/</a></p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/IDEA%E6%96%B0%E5%BB%BAMySQL.png"></p><p>注意：<code>IDEA</code>会提示要下载插件，点击下载插件即可。</p><p>点击<code>Test Connection</code>，显示如下则表示连接数据库成功。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-function">DBMS: <span class="hljs-title">MySQL</span> (<span class="hljs-title">ver</span>. 9.0.1)</span><br><span class="hljs-function"><span class="hljs-title">Case</span> <span class="hljs-title">sensitivity</span>: <span class="hljs-title">plain</span>=<span class="hljs-title">lower</span>, <span class="hljs-title">delimited</span>=<span class="hljs-title">lower</span></span><br><span class="hljs-function"><span class="hljs-title">Driver</span>: <span class="hljs-title">MySQL</span> <span class="hljs-title">Connector</span>/<span class="hljs-title">J</span> (<span class="hljs-title">ver</span>. <span class="hljs-title">mysql</span>-<span class="hljs-title">connector</span>-<span class="hljs-title">j</span>-8.2.0 (<span class="hljs-title">Revision</span>: 06<span class="hljs-title">a1f724497fd81c6a659131fda822c9e5085b6c</span>), <span class="hljs-title">JDBC4</span>.2)</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Ping</span>: 42 <span class="hljs-title">ms</span></span><br><span class="hljs-function"><span class="hljs-title">SSL</span>: <span class="hljs-title">yes</span></span><br></code></pre></td></tr></table></figure><h5 id="MySQL数据模型"><a href="#MySQL数据模型" class="headerlink" title="MySQL数据模型"></a>MySQL数据模型</h5><p>关系型数据库（<code>RDBMS</code>）: 建立在关系模型基础上，由多张相互连接的二维表组成的数据库。</p><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><p><code>SQL</code>：一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p><p><code>SQL</code>语句可以<strong>单行或多行</strong>书写，以<strong>分号结尾</strong>。</p><p><code>SQL</code>语句可以使用空格&#x2F;缩进来增强语句的可读性。</p><p><code>MySQL</code>数据库的<code>SQL</code>语句<strong>不区分大小写</strong>。</p><p>注释：</p><p>单行注释：<code>-- 注释内容</code>或<code># 注释内容</code>（<code>MySQL</code>特有）</p><p>多行注释： <code>/* 注释内容 */</code></p><p>SQL语句通常被分为四大类：</p><table><thead><tr><th><strong>分类</strong></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h4 id="数据库设计DDL"><a href="#数据库设计DDL" class="headerlink" title="数据库设计DDL"></a>数据库设计DDL</h4><p><code>DDL</code>英文全称是<code>Data Definition Language</code>，数据定义语言，用来定义数据库对象（数据库、表）。</p><h5 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h5><h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><ul><li>查询所有数据库：<code>show databases;</code></li><li>查询当前数据库：<code>select database();</code></li></ul><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><ul><li>使用数据库：<code>use  数据库名 ;</code></li></ul><h6 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h6><ul><li>创建数据库：<code>create  database [ if  not  exists ]   数据库名 ;</code></li></ul><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><ul><li>删除数据库：<code>drop  database [ if exists ]   数据库名 ;</code></li></ul><p>注意：上述语法中的<code>database</code>，也可以替换成<code>schema</code>。如：<code>create schema  db01;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 查询所有数据库<br>show databases ;<br>create database if not exists db01;<br><br>use db01;<br>select database();<br><br>drop database if exists db01;<br></code></pre></td></tr></table></figure><h5 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h5><h6 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">create table  表名(<br>字段1  字段类型  [ 约束 ]  [ comment  字段1注释 ] ,<br>......<br>字段n  字段类型  [ 约束 ]  [ comment  字段n注释 ] <br>) [ comment  表注释 ] ;<br></code></pre></td></tr></table></figure><p>约束：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><p>数据类型：MySQL中的数据类型有很多，主要分为三类：<strong>数值</strong>类型、<strong>字符串</strong>类型、<strong>日期时间</strong>类型。</p><p>1.<strong>数值类型</strong></p><table><thead><tr><th>类型</th><th>大小(byte)</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><font color="red">tinyint</font></td><td>1</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td><td></td></tr><tr><td>smallint</td><td>2</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td><td></td></tr><tr><td>mediumint</td><td>3</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td><td></td></tr><tr><td><font color="red">int</font></td><td>4</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td><td></td></tr><tr><td><font color="red">bigint</font></td><td>8</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td><td></td></tr><tr><td>float</td><td>4</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351 E-38，3.402823466 E+38)</td><td>单精度浮点数值</td><td>float(5,2)：5表示整个数字长度，2 表示小数位个数</td></tr><tr><td><font color="red">double</font></td><td>8</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td><td>double(5,2)：5表示整个数字长度，2 表示小数位个数</td></tr><tr><td>decimal</td><td></td><td></td><td></td><td>小数值(精度更高)</td><td>decimal(5,2)：5表示整个数字长度，2 表示小数位个数</td></tr></tbody></table><p>2.<strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td><font color="red">char</font></td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td><font color="red">varchar</font></td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>tinytext</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumtext</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>注意：<code>char</code>和<code>varchar</code>的区别：</p><p><code>char(10)</code>：最多只能存10个字符，不足10个字符，占用10个字符空间。性能高，浪费空间。</p><p><code>varchar(10)</code>:：最多只能存10个字符，不足10个字符，按照实际长度存储。性能低，节省空间。</p><p>3.<strong>日期时间类型</strong></p><table><thead><tr><th>类型</th><th>大小(byte)</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td><font color="red">date</font></td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>time</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>year</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td><font color="red">datetime</font></td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 创建表<br>create table tb_user(<br>    id int primary key comment &#x27;ID，唯一标识&#x27;,<br>    username varchar(20) unique not null comment &#x27;用户名&#x27;,<br>    name varchar(10) not null comment &#x27;姓名&#x27;,<br>    age int comment &quot;年龄&quot;,<br>    gender char(1) comment &#x27;性别&#x27;<br>)   comment &#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><h6 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h6><ul><li>查询当前数据库所有表：<code>show tables;</code></li><li>查询表结构：<code>desc  表名;</code></li><li>查询建表语句：<code>show create table 表名;</code></li></ul><p>【注意】使用<code>IDEA</code>图形化界面建表，右键表-&gt;<code>Navigation</code>-&gt;<code>Go to DDL</code>可以查看建表语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- DDL: 查看表结构<br>-- 查看: 当前数据库下的表<br>show tables;<br><br>-- 查看: 查看指定表结构<br>desc tb_emp;<br><br>-- 查看: 数据库的建表语句<br>show create table tb_emp;<br></code></pre></td></tr></table></figure><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><ul><li>添加字段：<code>alter table 表名  add  字段名  类型(长度)  [comment  注释]  [约束];</code></li><li>修改字段类型：<code>alter table 表名 modify  字段名  新数据类型(长度);</code></li><li>修改字段名和字段类型：<code>alter table 表名 change  旧字段名  新字段名  类型 (长度)  [comment 注释]  [约束];</code></li><li>删除字段：<code>alter table 表名 drop  column 字段名;</code></li><li>修改表名：<code>rename table 表名 to  新表名;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- DDL: 修改表结构<br>-- 修改: 为表 tb_emp 添加字段 qq varchar(11)<br>alter table tb_emp add qq varchar(11) comment &#x27;QQ&#x27;;<br><br>-- 修改: 修改 tb_emp 字段类型 qq varchar(13)<br>alter table tb_emp modify qq varchar(13) comment &#x27;QQ&#x27;;<br><br>-- 修改: 修改 tb_emp 字段名 qq 为 qq_num varchar(13)<br>alter table tb_emp change qq qq_num varchar(13) comment &#x27;QQ&#x27;;<br><br>-- 修改: 删除 tb_emp 的 qq_num 字段<br>alter table tb_emp drop column  qq_num;<br><br>-- 修改: 将tb_emp 表名修改为 emp<br>rename table tb_emp to emp;<br></code></pre></td></tr></table></figure><h6 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h6><ul><li>删除表：<code>drop table [ if exists ] 表名;</code></li></ul><p>注意：在删除表时，表中的全部数据也会被删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">drop table if exists tb_emp;<br></code></pre></td></tr></table></figure><h4 id="数据库操作DML"><a href="#数据库操作DML" class="headerlink" title="数据库操作DML"></a>数据库操作DML</h4><p><code>DML</code>英文全称是<code>Data Manipulation Language</code>（数据操作语言），用来对数据库中表的数据记录进行增、删、改操作。</p><h5 id="添加数据INSERT"><a href="#添加数据INSERT" class="headerlink" title="添加数据INSERT"></a>添加数据INSERT</h5><ul><li>指定字段添加数据：<code>insert into 表名 (字段名1, 字段名2)  values (值1, 值2);</code></li><li>全部字段添加数据：<code>insert into 表名 values (值1, 值2, ...);</code></li><li>批量添加数据（指定字段）：<code>insert into 表名 (字段名1, 字段名2)  values (值1, 值2), (值1, 值2);</code></li><li>批量添加数据（全部字段）：<code>insert into 表名 values (值1, 值2, ...), (值1, 值2, ...);</code></li></ul><p>注意：</p><ol><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li><strong>字符串</strong>和<strong>日期</strong>型数据应该包含在<strong>引号</strong>中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- DML : 数据操作语言<br>-- DML : 插入数据 - insert<br>-- 1. 为 tb_emp 表的 username, name, gender 字段插入值<br>insert into tb_emp (username, name, gender, create_time, update_time) values (&#x27;srr&#x27;, &#x27;surourou&#x27;, 2, now(), now());<br><br>-- 2. 为 tb_emp 表的 所有字段插入值<br>insert into tb_emp (id, username, password, name, gender, image, job, entrydate, create_time, update_time)<br>            values (null, &#x27;srr3&#x27;,&#x27;888&#x27;,&#x27;surourou&#x27;, 2, &#x27;1.jpg&#x27;, 2, &#x27;2024-10-15&#x27;, now(), now());<br>insert into tb_emp values (null,&#x27;srr2&#x27;, &#x27;888&#x27;,&#x27;surourou&#x27;, 2, &#x27;1.jpg&#x27;, 2, &#x27;2024-10-15&#x27;, now(), now());<br><br>-- 3. 批量为 为 tb_emp 表的 username , name , gender 字段插入数据<br>insert into tb_emp (username, name, gender, create_time, update_time) values<br>                    (&#x27;srr4&#x27;, &#x27;surourou&#x27;, 2, &#x27;2024-10-14&#x27;, now()),<br>                    (&#x27;srr5&#x27;, &#x27;surourou&#x27;, 2, &#x27;2024-10-13&#x27;, now());<br></code></pre></td></tr></table></figure><h5 id="修改数据UPDATE"><a href="#修改数据UPDATE" class="headerlink" title="修改数据UPDATE"></a>修改数据UPDATE</h5><ul><li>修改数据：<code>update  表名  set  字段名1 = 值1 , 字段名2 = 值2 , .... [ where  条件 ] ;</code></li></ul><p>注意：修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- DML : 更新数据 - update<br>-- 1. 将 tb_emp 表的ID为1员工 姓名name字段更新为 &#x27;张三&#x27;<br>update tb_emp  set name = &#x27;张三&#x27; where id = 1;<br><br>-- 2. 将 tb_emp 表的所有员工的入职日期更新为 &#x27;2010-01-01&#x27;<br>update tb_emp set entrydate = &#x27;2010-01-01&#x27;;<br></code></pre></td></tr></table></figure><h5 id="删除DELETE"><a href="#删除DELETE" class="headerlink" title="删除DELETE"></a>删除DELETE</h5><ul><li>删除数据：<code>delete  from  表名  [ where  条件 ];</code></li></ul><p>注意：</p><ol><li><code>DELETE</code>语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</li><li><code>DELETE</code>语句不能删除某一个字段的值（如果要操作，可以使用<code>UPDATE</code>，将该字段的值置为<code>NULL</code>）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- DML : 删除数据 - delete<br>-- 1. 删除 tb_emp 表中 ID为1的员工<br>delete from tb_emp where id = 1;<br><br>-- 2. 删除 tb_emp 表中的所有员工<br>delete from tb_emp;<br></code></pre></td></tr></table></figure><h4 id="数据库查询DQL"><a href="#数据库查询DQL" class="headerlink" title="数据库查询DQL"></a>数据库查询DQL</h4><p><code>DQL</code>英文全称是<code>Data Query Language</code>（数据查询语言），用来查询数据库表中的记录。</p><p>关键字：<code>SELECT</code></p><h5 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h5><ul><li>查询多个字段：<code>select  字段1, 字段2, 字段3  from   表名;</code></li><li>查询所有字段（通配符）：<code>select  *  from   表名;</code></li><li>设置别名：<code>select  字段1  [ as  别名1 ] , 字段2  [ as  别名2 ]   from   表名;</code></li><li>去除重复记录：<code>select  distinct  字段列表  from   表名;</code></li></ul><p>注意：<code>*</code>号代表<strong>查询所有字段</strong>，在实际开发中尽量少用（不直观、影响效率）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 先创建表<br>-- 员工管理<br>create table emp<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,<br>    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name        varchar(10)      not null comment &#x27;姓名&#x27;,<br>    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image       varchar(300) comment &#x27;图像&#x27;,<br>    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,<br>    entrydate   date comment &#x27;入职时间&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br><br>INSERT INTO emp<br>(id, username, password, name, gender, image, job, entrydate, create_time, update_time)<br>VALUES (1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, now(), now()),<br>       (2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, now(), now()),<br>       (3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, now(), now()),<br>       (4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, now(), now()),<br>       (5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, now(), now()),<br>       (6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, now(), now()),<br>       (7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, now(), now()),<br>       (8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, now(), now()),<br>       (9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, now(), now()),<br>       (10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, now(), now()),<br>       (11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 2, &#x27;2007-02-01&#x27;, now(), now()),<br>       (12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 2, &#x27;2008-08-18&#x27;, now(), now()),<br>       (13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 1, &#x27;2012-11-01&#x27;, now(), now()),<br>       (14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, now(), now()),<br>       (15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, now(), now()),<br>       (16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, now(), now()),<br>       (17, &#x27;chenyouliang&#x27;, &#x27;12345678&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, NULL, &#x27;2015-03-21&#x27;, now(), now()),<br>       (18, &#x27;zhang1&#x27;, &#x27;123456&#x27;, &#x27;张一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, now(), now()),<br>       (19, &#x27;zhang2&#x27;, &#x27;123456&#x27;, &#x27;张二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, now(), now()),<br>       (20, &#x27;zhang3&#x27;, &#x27;123456&#x27;, &#x27;张三&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2018-01-01&#x27;, now(), now()),<br>       (21, &#x27;zhang4&#x27;, &#x27;123456&#x27;, &#x27;张四&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, now(), now()),<br>       (22, &#x27;zhang5&#x27;, &#x27;123456&#x27;, &#x27;张五&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2016-01-01&#x27;, now(), now()),<br>       (23, &#x27;zhang6&#x27;, &#x27;123456&#x27;, &#x27;张六&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, now(), now()),<br>       (24, &#x27;zhang7&#x27;, &#x27;123456&#x27;, &#x27;张七&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2006-01-01&#x27;, now(), now()),<br>       (25, &#x27;zhang8&#x27;, &#x27;123456&#x27;, &#x27;张八&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2002-01-01&#x27;, now(), now()),<br>       (26, &#x27;zhang9&#x27;, &#x27;123456&#x27;, &#x27;张九&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2011-01-01&#x27;, now(), now()),<br>       (27, &#x27;zhang10&#x27;, &#x27;123456&#x27;, &#x27;张十&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2004-01-01&#x27;, now(), now()),<br>       (28, &#x27;zhang11&#x27;, &#x27;123456&#x27;, &#x27;张十一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, now(), now()),<br>       (29, &#x27;zhang12&#x27;, &#x27;123456&#x27;, &#x27;张十二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2020-01-01&#x27;, now(), now());<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- ====================================&gt; DQL &lt;=======================================<br>--  =================== 基本查询 ======================<br>-- 1. 查询指定字段 name,entrydate 并返回<br>select name, entrydate from emp;<br><br>-- 2. 查询返回所有字段<br>-- 方式一:  推荐 , 效率高 . 更直观<br>select id, username, password, name, gender, image, job, entrydate, create_time, update_time from emp;<br><br>-- 方式二:<br>select * from emp;<br><br>-- 3. 查询所有员工的 name,entrydate, 并起别名(姓名、入职日期)  --- as 关键字可以省略<br>select name as 姓名, entrydate as 入职日期 from emp;<br>select name &#x27;姓名&#x27;, entrydate &#x27;入职日期&#x27; from emp;<br>select name `姓名`, entrydate `入职日期` from emp;<br>select name &quot;姓名&quot;, entrydate &quot;入职日期&quot; from emp;<br>-- 使用单引号&#x27;&#x27;，双引号&quot;&quot;，反单引号``都可以。如果没有空格，可以不使用符合。<br><br>-- 4. 查询员工有哪几种职位(不要重复) -- distinct<br>select distinct job from emp;<br></code></pre></td></tr></table></figure><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><ul><li>条件查询：<code>select  字段列表  from   表名   where   条件列表 ;</code></li></ul><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between … and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">--  =================== 条件查询 ======================<br>-- 1. 查询 姓名 为 杨逍 的员工<br>select * from emp where name = &quot;杨逍&quot;;<br><br>-- 2. 查询在 id小于等于5 的员工信息<br>select * from emp where id &lt;= 5;<br><br>-- 3. 查询 没有分配职位 的员工信息  -- 判断 null , 用 is null<br>select * from emp where job is null;<br><br>-- 4. 查询 有职位 的员工信息  -- 判断 不是null , 用 is not null<br>select * from emp where job is not null;<br><br>-- 5. 查询 密码不等于 &#x27;123456&#x27; 的员工信息<br>select * from emp where password != &#x27;123456&#x27;;<br>select * from emp where password &lt;&gt; &#x27;123456&#x27;;<br><br>-- 6. 查询入职日期 在 &#x27;2000-01-01&#x27; (包含) 到 &#x27;2010-01-01&#x27;(包含) 之间的员工信息<br>select * from emp where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;;<br>select * from emp where entrydate &gt;= &#x27;2000-01-01&#x27; and entrydate &lt;= &#x27;2010-01-01&#x27;;<br><br>-- 7. 查询 入职时间 在 &#x27;2000-01-01&#x27; (包含) 到 &#x27;2010-01-01&#x27;(包含) 之间 且 性别为女 的员工信息<br>select * from emp where entrydate between &#x27;2001-01-01&#x27; and &#x27;2010-01-01&#x27; and gender  = 2;<br><br>-- 8. 查询 职位是 2 (讲师), 3 (学工主管), 4 (教研主管) 的员工信息<br>select * from emp where job = 2 or job = 3 or job = 4;<br>select * from emp where job in (2,3,4);<br><br>-- 9. 查询姓名为两个字的员工信息<br>select * from emp where name like &#x27;__&#x27;;<br><br>-- 10. 查询姓 &#x27;张&#x27; 的员工信息  ---------&gt; 张%<br>select * from emp where name like &#x27;张%&#x27;;<br><br>-- 11. 查询姓名中包含 &#x27;三&#x27; 的员工信息<br>select * from emp where name like &#x27;%三%&#x27;;<br></code></pre></td></tr></table></figure><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><p>介绍：将一列数据作为一个整体，进行纵向计算。</p><p>1.<code>select  聚合函数(字段列表)  from   表名 ;</code></p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>注意：</p><ol><li><code>null</code>值不参与所有聚合函数运算。</li><li>统计数量可以使用：<code>count()</code>、<code>count(字段)</code>、<code>count(常量)</code>，推荐使用<code>count()</code>。</li></ol><p>2.<code>select  字段列表  from   表名  [ where   条件 ]  group   by  分组字段名  [ having  分组后过滤条件 ];</code></p><p><code>where</code>与<code>having</code>区别：</p><p>执行时机不同：<code>where</code>是分组之前进行过滤，不满足<code>where</code>条件，不参与分组；而<code>having</code>是分组之后对结果进行过滤。</p><p>判断条件不同：<code>where</code>不能对聚合函数进行判断，而<code>having</code>可以。</p><p>注意：</p><ol><li>分组之后，查询的字段一般为<strong>聚合函数</strong>和<strong>分组字段</strong>，查询其他字段无任何意义。</li><li>执行顺序：<code>where</code>  &gt;  聚合函数 &gt; <code>having</code> 。<code>where</code>在分组之前执行，<code>having</code>在分组之后执行。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">--  =================== 分组查询 ======================<br>-- 聚合函数<br>-- 1. 统计该企业员工数量 -- count<br>-- A. count(字段)<br>select count(id) from emp;<br>select count(job) from emp; -- null值不参与聚合函数运算，job中的null值不参与计算<br><br>-- B. count(*)<br>select count(*) from emp;<br><br>-- C. count(值)<br>select count(1) from emp;<br><br>-- 2. 统计该企业员工 ID 的平均值<br>select avg(id) from emp;<br><br>-- 3. 统计该企业最早入职的员工的入职日期<br>select min(entrydate) from emp;<br><br>-- 4. 统计该企业最近入职的员工的入职日期<br>select max(entrydate) from emp;<br><br>-- 5. 统计该企业员工的 ID 之和<br>select sum(id) from emp;<br><br>-- 分组<br>-- 1. 根据性别分组 , 统计男性和女性员工的数量  -- count<br>select gender, count(*) from emp group by gender;<br><br>-- 2. 先查询入职时间在 &#x27;2015-01-01&#x27; (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位 -- count<br>select job, count(*) from emp where entrydate &lt;= &#x27;2015-01-01&#x27; group by job having count(*) &gt;= 2;<br></code></pre></td></tr></table></figure><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><ul><li><code>select  字段列表  from   表名   [ where   条件列表 ] [ group by  分组字段 ] order  by  字段1  排序方式1 , 字段2  排序方式2 … ;</code></li></ul><p>排序方式：<code>ASC</code>升序（默认值），<code>DESC</code>：降序。</p><p>注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">--  =================== 排序查询 ======================<br>-- 1. 根据入职时间, 对员工进行升序排序  -- 排序条件<br>-- 默认升序, asc可以省略的<br>select * from emp order by entrydate asc ; -- 默认升序, asc可以省略的<br>select * from emp order by entrydate ;<br><br>-- 2. 根据入职时间, 对员工进行降序排序<br>select * from emp order by entrydate desc ;<br><br>-- 3. 根据 入职时间 对公司的员工进行 升序排序 ， 入职时间相同 , 再按照 ID 进行降序排序<br>select * from emp order by entrydate asc, id desc ;<br><br>-- 练习 : 员工管理列表查询 , 根据最后操作时间, 进行倒序排序<br>-- 条件 : name , gender , entrydate<br>select * from emp where name like &#x27;%张%&#x27; and gender = 1 and entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27; order by update_time desc;<br></code></pre></td></tr></table></figure><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><ul><li><code>select  字段列表  from   表名  limit  起始索引, 查询记录数 ;</code></li></ul><p>注意：</p><ul><li>起始索引从0开始，<code>起始索引 = （查询页码 - 1）* 每页显示记录数</code>。</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，<code>MySQL</code>中是<code>LIMIT</code>。</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为<code>limit 10</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">--  =================== 分页查询 ======================<br>-- 1. 查询第1页员工数据, 每页展示10条记录<br>select * from emp limit 0,10;<br>select * from emp limit 10;<br><br>-- 2. 查询第2页员工数据, 每页展示10条记录<br>select * from emp limit 10,10;<br><br>-- 公式 : 页码 ---&gt; 起始索引  -------&gt;  起始索引 = (页码 - 1) * 每页记录数<br><br>-- 练习 : 员工管理列表查询 , 根据最后操作时间, 进行倒序排序，显示第1页，每页展示10条记录<br>-- 条件 : name , gender , entrydate<br>select * from emp where name like &#x27;%张%&#x27; and gender = 1 and entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27; order by update_time desc limit 0,10 ;<br></code></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><ul><li><code>if(表达式, tvalue, fvalue)</code>：当表达式为<code>true</code>时，取值<code>tvalue</code>；当表达式为<code>false</code>时，取值<code>fvalue</code>。</li><li><code>case  expr  when  value1  then  result1 [when  value2  then  value2 ...] [else  result]  end</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 男性与女性员工的人数统计 (1 : 男性员工 , 2 : 女性员工)<br>-- 函数: if(条件表达式 , t , f)<br>select<br>    if(gender = 1, &#x27;男性员工&#x27; , &#x27;女性员工&#x27;) &#x27;性别&#x27;,<br>    count(*) &#x27;人数&#x27;<br>from emp group by gender;<br><br>-- 员工职位信息 -- count<br>-- 函数: case when ... then ... when ... then ... else ... end<br>-- 函数: case ... when ... then ... when ... then ... else ... end<br>select<br>    (case when job = 1 then &#x27;班主任&#x27; when job = 2 then &#x27;讲师&#x27; when job = 3 then &#x27;教研主管&#x27; when job = 4 then &#x27;学工主管&#x27; else &#x27;无职位&#x27; end ) &#x27;职位&#x27;,<br>    count(*)<br>from emp group by job;<br><br>select<br>    (case job when 1 then &#x27;班主任&#x27; when 2 then &#x27;讲师&#x27; when 3 then &#x27;教研主管&#x27; when 4 then &#x27;学工主管&#x27; else &#x27;无职位&#x27; end ) &#x27;职位&#x27;,<br>    count(*)<br>from emp group by job;<br></code></pre></td></tr></table></figure><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><h5 id="一对多（多对一）"><a href="#一对多（多对一）" class="headerlink" title="一对多（多对一）"></a>一对多（多对一）</h5><p>案例：员工表和部门表的关系。</p><p><strong>实现：在数据库表中多的一方，添加字段，来关联一的一方的主键。</strong></p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%EF%BC%9A%E4%B8%80%E5%AF%B9%E5%A4%9A.png"></p><p><strong>外键</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 创建表时指定<br>create table 表名(<br>字段名    数据类型,<br>...<br>[constraint]   [外键名称]  foreign  key (外键字段名)   references   主表 (字段名)<br>);<br>-- 建完表后，添加外键<br>alter table  表名  add constraint  外键名称  foreign key (外键字段名) references  主表(字段名);<br></code></pre></td></tr></table></figure><ol><li><p><strong>物理外键</strong>：使用<code>foreign key</code>定义外键关联另外一张表。</p><p>缺点：影响增、删、改的效率（需要检查外键关系）。仅用于单节点数据库，不适用与分布式、集群场景。容易引发数据库的死锁问题，消耗性能。</p></li><li><p><strong>逻辑外键（推荐使用）</strong>：在业务层逻辑中，解决外键关联。通过逻辑外键，就可以很方便的解决上述问题。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 员工<br>create table tb_emp<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,<br>    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name        varchar(10)      not null comment &#x27;姓名&#x27;,<br>    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image       varchar(300) comment &#x27;图像&#x27;,<br>    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,<br>    entrydate   date comment &#x27;入职时间&#x27;,<br>    dept_id     int unsigned comment &#x27;归属的部门ID&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br><br><br>-- 部门<br>create table tb_dept<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime    not null comment &#x27;创建时间&#x27;,<br>    update_time datetime    not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br><br>-- 插入测试数据<br>insert into tb_dept (id, name, create_time, update_time)<br>values (1, &#x27;学工部&#x27;, now(), now()),<br>       (2, &#x27;教研部&#x27;, now(), now()),<br>       (3, &#x27;咨询部&#x27;, now(), now()),<br>       (4, &#x27;就业部&#x27;, now(), now()),<br>       (5, &#x27;人事部&#x27;, now(), now());<br><br>INSERT INTO tb_emp<br>(id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time)<br>VALUES (1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, 2, now(), now()),<br>       (2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, 2, now(), now()),<br>       (3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, 2, now(), now()),<br>       (4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, 2, now(), now()),<br>       (5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, 2, now(), now()),<br>       (6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, 1, now(), now()),<br>       (7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, 1, now(), now()),<br>       (8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, 1, now(), now()),<br>       (9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, 1, now(), now()),<br>       (10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, 1, now(), now()),<br>       (11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 1, &#x27;2007-02-01&#x27;, 1, now(), now()),<br>       (12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 1, &#x27;2008-08-18&#x27;, 1, now(), now()),<br>       (13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 2, &#x27;2012-11-01&#x27;, 2, now(), now()),<br>       (14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, 2, now(), now()),<br>       (15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, 2, now(), now()),<br>       (16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, 2, now(), now()),<br>       (17, &#x27;chenyouliang&#x27;, &#x27;123456&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, NULL, &#x27;2015-03-21&#x27;, NULL, now(), now());<br><br>-- 设置外键<br>alter table tb_emp add constraint tb_emp_fk_dept_id foreign key (dept_id) references  tb_dept(id);<br></code></pre></td></tr></table></figure><h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><p>案例：用户与身份证信息的关系。</p><p>关系：一对一关系，多用于<strong>单表拆分</strong>，将一张表的基础字段放在一张表中，其他字段放在另一张表中，以提升操作效率。</p><p><strong>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的UNIQUE。</strong></p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%EF%BC%9A%E4%B8%80%E5%AF%B9%E4%B8%80.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 一对一: 用户 与 身份证<br>create table tb_user(<br>                        id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,<br>                        name varchar(10) not null comment &#x27;姓名&#x27;,<br>                        gender tinyint unsigned not null comment &#x27;性别, 1 男  2 女&#x27;,<br>                        phone char(11) comment &#x27;手机号&#x27;,<br>                        degree varchar(10) comment &#x27;学历&#x27;<br>) comment &#x27;用户信息表&#x27;;<br>insert into tb_user values (1,&#x27;白眉鹰王&#x27;,1,&#x27;18812340001&#x27;,&#x27;初中&#x27;),(2,&#x27;青翼蝠王&#x27;,1,&#x27;18812340002&#x27;,&#x27;大专&#x27;),(3,&#x27;金毛狮王&#x27;,1,&#x27;18812340003&#x27;,&#x27;初中&#x27;),(4,&#x27;紫衫龙王&#x27;,2,&#x27;18812340004&#x27;,&#x27;硕士&#x27;);<br><br><br>create table tb_user_card(<br>                             id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,<br>                             nationality varchar(10) not null comment &#x27;民族&#x27;,<br>                             birthday date not null comment &#x27;生日&#x27;,<br>                             idcard char(18) not null comment &#x27;身份证号&#x27;,<br>                             issued varchar(20) not null comment &#x27;签发机关&#x27;,<br>                             expire_begin date not null comment &#x27;有效期限-开始&#x27;,<br>                             expire_end date comment &#x27;有效期限-结束&#x27;,<br>                             user_id int unsigned not null unique comment &#x27;用户ID&#x27;,<br>                             constraint fk_user_id foreign key (user_id) references tb_user(id)  -- 设置外键<br>) comment &#x27;用户信息表&#x27;;<br>insert into tb_user_card values (1,&#x27;汉&#x27;,&#x27;1960-11-06&#x27;,&#x27;100000100000100001&#x27;,&#x27;朝阳区公安局&#x27;,&#x27;2000-06-10&#x27;,null,1),<br>                                (2,&#x27;汉&#x27;,&#x27;1971-11-06&#x27;,&#x27;100000100000100002&#x27;,&#x27;静安区公安局&#x27;,&#x27;2005-06-10&#x27;,&#x27;2025-06-10&#x27;,2),<br>                                (3,&#x27;汉&#x27;,&#x27;1963-11-06&#x27;,&#x27;100000100000100003&#x27;,&#x27;昌平区公安局&#x27;,&#x27;2006-06-10&#x27;,null,3),<br>                                (4,&#x27;回&#x27;,&#x27;1980-11-06&#x27;,&#x27;100000100000100004&#x27;,&#x27;海淀区公安局&#x27;,&#x27;2008-06-10&#x27;,&#x27;2028-06-10&#x27;,4);<br><br></code></pre></td></tr></table></figure><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><p>案例：学生与课程的关系。</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择。</p><p><strong>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</strong></p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E5%A4%9A%E8%A1%A8%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%A4%9A%E5%AF%B9%E5%A4%9A.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">--  多对多: 学生 与 课程<br>create table tb_student(<br>                           id int auto_increment primary key comment &#x27;主键ID&#x27;,<br>                           name varchar(10) comment &#x27;姓名&#x27;,<br>                           no varchar(10) comment &#x27;学号&#x27;<br>) comment &#x27;学生表&#x27;;<br>insert into tb_student(name, no) values (&#x27;黛绮丝&#x27;, &#x27;2000100101&#x27;),(&#x27;谢逊&#x27;, &#x27;2000100102&#x27;),(&#x27;殷天正&#x27;, &#x27;2000100103&#x27;),(&#x27;韦一笑&#x27;, &#x27;2000100104&#x27;);<br><br><br>create table tb_course(<br>                          id int auto_increment primary key comment &#x27;主键ID&#x27;,<br>                          name varchar(10) comment &#x27;课程名称&#x27;<br>) comment &#x27;课程表&#x27;;<br>insert into tb_course (name) values (&#x27;Java&#x27;), (&#x27;PHP&#x27;), (&#x27;MySQL&#x27;) , (&#x27;Hadoop&#x27;);<br><br><br>create table tb_student_course(<br>                                  id int auto_increment comment &#x27;主键&#x27; primary key,<br>                                  student_id int not null comment &#x27;学生ID&#x27;,<br>                                  course_id  int not null comment &#x27;课程ID&#x27;,<br>                                  constraint fk_courseid foreign key (course_id) references tb_course (id),<br>                                  constraint fk_studentid foreign key (student_id) references tb_student (id)<br>)comment &#x27;学生课程中间表&#x27;;<br><br>insert into tb_student_course(student_id, course_id) values (1,1),(1,2),(1,3),(2,2),(2,3),(3,4);<br></code></pre></td></tr></table></figure><h5 id="多表查询定义"><a href="#多表查询定义" class="headerlink" title="多表查询定义"></a>多表查询定义</h5><p>多表查询：指从多张表中查询数据。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合（A集合和B集合）所有组合情况。（在多表查询时，需要消除无效的笛卡尔积。）</p><p>分类：</p><ul><li><p>连接查询</p><p>内连接：相当于查询A、B交集部分数据。</p><p>外连接：</p><p>​左外连接：查询左表所有数据（包括两张表交集部分数据）。</p><p>​右外连接：查询右表所有数据（包括两张表交集部分数据）。</p></li><li><p>子查询</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 多表查询: 数据准备<br>-- 部门管理<br>create table tb_dept<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime    not null comment &#x27;创建时间&#x27;,<br>    update_time datetime    not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br>insert into tb_dept (id, name, create_time, update_time)<br>values (1, &#x27;学工部&#x27;, now(), now()),<br>       (2, &#x27;教研部&#x27;, now(), now()),<br>       (3, &#x27;咨询部&#x27;, now(), now()),<br>       (4, &#x27;就业部&#x27;, now(), now()),<br>       (5, &#x27;人事部&#x27;, now(), now());<br><br>-- 员工管理<br>create table tb_emp<br>(<br>    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,<br>    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>    name        varchar(10)      not null comment &#x27;姓名&#x27;,<br>    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>    image       varchar(300) comment &#x27;图像&#x27;,<br>    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>    entrydate   date comment &#x27;入职时间&#x27;,<br>    dept_id     int unsigned comment &#x27;部门ID&#x27;,<br>    create_time datetime         not null comment &#x27;创建时间&#x27;,<br>    update_time datetime         not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br><br>INSERT INTO tb_emp(id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time)<br>VALUES (1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, 2, now(), now()),<br>       (2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, 2, now(), now()),<br>       (3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, 2, now(), now()),<br>       (4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, 2, now(), now()),<br>       (5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, 2, now(), now()),<br>       (6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, 1, now(), now()),<br>       (7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, 1, now(), now()),<br>       (8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, 1, now(), now()),<br>       (9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, 1, now(), now()),<br>       (10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, 1, now(), now()),<br>       (11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 5, &#x27;2007-02-01&#x27;, 3, now(), now()),<br>       (12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 5, &#x27;2008-08-18&#x27;, 3, now(), now()),<br>       (13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 5, &#x27;2012-11-01&#x27;, 3, now(), now()),<br>       (14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, 2, now(), now()),<br>       (15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, 2, now(), now()),<br>       (16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, 2, now(), now()),<br>       (17, &#x27;chenyouliang&#x27;, &#x27;123456&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, NULL, &#x27;2015-03-21&#x27;, NULL, now(), now());<br><br>-- 多表查询<br>select *<br>from tb_emp,<br>     tb_dept<br>where tb_emp.dept_id = tb_dept.id; -- 会有5*17条数据，是tb_emp集合和tb_dept集合的所有组合情况。<br></code></pre></td></tr></table></figure><h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><p>隐式内连接：<code>select  字段列表   from   表1 , 表2   where   条件 ... ;</code></p><p>显式内连接：<code>select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- ============================= 内连接 ==========================<br>-- A. 查询员工的姓名 , 及所属的部门名称 (隐式内连接实现)<br>select tb_emp.name, tb_dept.name from tb_emp, tb_dept where tb_emp.dept_id = tb_dept.id;<br><br>-- 起别名<br>select e.name, d.name from tb_emp e, tb_dept d where e.dept_id = d.id;<br>-- 注意：给table起别名之后就不能使用原来的table名<br><br>-- B. 查询员工的姓名 , 及所属的部门名称 (显式内连接实现)<br>select tb_emp.name, tb_dept.name from tb_emp join tb_dept on tb_emp.dept_id = tb_dept.id;<br></code></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p>左外连接：<code>select  字段列表   from   表1  left  [ outer ]  join 表2  on 连接条件 ... ;</code></p><p>右外连接：<code>select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- =============================== 外连接 ============================<br>-- A. 查询员工表 所有 员工的姓名, 和对应的部门名称 (左外连接)<br>select tb_emp.name, tb_dept.name from tb_emp left join tb_dept on tb_emp.dept_id = tb_dept.id;<br><br>-- B. 查询部门表 所有 部门的名称, 和对应的员工名称 (右外连接)<br>select e.name,d.name from tb_emp e right join tb_dept d on e.dept_id = d.id;<br>select e.name, d.name from tb_dept d left join tb_emp e on e.dept_id = d.id;<br></code></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>介绍：<code>SQL</code>语句中嵌套<code>select</code>语句，称为<strong>嵌套查询</strong>，又称<strong>子查询</strong>。</p><p>形式：<code>select  *  from   t1   where  column1 =  ( select  column1  from  t2  … );</code></p><p>子查询外部的语句可以是<code>insert/update/delete/select </code>的任何一个，最常见的是<code>select</code>。</p><p>分类：</p><ol><li>标量子查询：子查询返回的结果为<strong>单个值</strong>。</li><li>列子查询：子查询返回的结果为<strong>一列</strong>。</li><li>行子查询：子查询返回的结果为<strong>一行</strong>。</li><li>表子查询：子查询返回的结果为<strong>多行多列</strong>。</li></ol><h6 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h6><p>子查询返回的结果是<strong>单个值</strong>（数字、字符串、日期等），最简单的形式。</p><p>常用的操作符：<code>=  &lt;&gt;  &gt;  &gt;=  &lt;  &lt;=</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- ========================= 子查询 ================================<br>-- 标量子查询<br>-- A. 查询 &quot;教研部&quot; 的所有员工信息<br>-- a. 查询 教研部 的部门ID - tb_dept<br>select id from tb_dept where name = &#x27;教研部&#x27;;<br><br>-- b. 再查询该部门ID下的员工信息 - tb_emp<br>select * from tb_emp where dept_id = (select id from tb_dept where name = &#x27;教研部&#x27;);<br><br>select tb_emp.* from tb_emp, tb_dept where tb_emp.dept_id = tb_dept.id and tb_dept.name = &#x27;教研部&#x27;; -- 用内连接<br><br>-- B. 查询在 &quot;方东白&quot; 入职之后的员工信息<br>-- a. 查询 方东白 的入职时间<br>select entrydate from tb_emp where name = &#x27;方东白&#x27;;<br><br>-- b. 查询在 &quot;方东白&quot; 入职之后的员工信息<br>select * from tb_emp where entrydate &gt; (select entrydate from tb_emp where name = &#x27;方东白&#x27;);<br></code></pre></td></tr></table></figure><h6 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h6><p>子查询返回的结果是<strong>一列（可以是多行）</strong>。</p><p>常用的操作符：<code>in、not in</code>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 列子查询<br>-- A. 查询 &quot;教研部&quot; 和 &quot;咨询部&quot; 的所有员工信息<br>-- a. 查询 &quot;教研部&quot; 和 &quot;咨询部&quot; 的部门ID - tb_dept<br>select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;;<br><br>-- b. 根据部门ID, 查询该部门下的员工信息 - tb_emp<br>select * from tb_emp where dept_id in (select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;);<br></code></pre></td></tr></table></figure><h6 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h6><p>子查询返回的结果是<strong>一行（可以是多列）</strong>。</p><p>常用的操作符：<code>=  、&lt;&gt; 、in 、not  in</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 行子查询<br>-- A. 查询与 &quot;韦一笑&quot; 的入职日期 及 职位都相同的员工信息 ;<br>-- a. 查询 &quot;韦一笑&quot; 的入职日期 及 职位<br>select entrydate, job from tb_emp where name = &#x27;韦一笑&#x27;;<br><br>-- b. 查询与其入职日期 及 职位都相同的员工信息 ;<br>-- 方式一<br>select * from tb_emp where entrydate = (select entrydate from tb_emp where name = &#x27;韦一笑&#x27;) and job = (select job from tb_emp where name = &#x27;韦一笑&#x27;);<br><br>-- 方式二<br>select * from tb_emp where (entrydate, job) = (select entrydate, job from tb_emp where name = &#x27;韦一笑&#x27;);<br></code></pre></td></tr></table></figure><h6 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h6><p>子查询返回的结果是<strong>多行多列</strong>，常作为<strong>临时表</strong>。</p><p>常用的操作符：<code>in</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 表子查询<br>-- A. 查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息 , 及其部门名称<br>-- a. 查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息<br>select * from tb_emp where entrydate &gt; &#x27;2006-01-01&#x27;;<br><br>-- b. 查询这部分员工信息及其部门名称 - tb_dept<br>select e.*, d.name from (select * from tb_emp where entrydate &gt; &#x27;2006-01-01&#x27;) e, tb_dept d where e.dept_id = d.id;<br></code></pre></td></tr></table></figure><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2-%E6%A1%88%E4%BE%8B.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- ================================================== 多表查询案例 =============================================<br>-- 数据准备 :<br>-- 分类表<br>create table category(<br>     id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>     name varchar(20) not null unique comment &#x27;分类名称&#x27;,<br>     type tinyint unsigned not null comment &#x27;类型 1 菜品分类 2 套餐分类&#x27;,<br>     sort tinyint unsigned not null comment &#x27;顺序&#x27;,<br>     status tinyint unsigned not null default 0 comment &#x27;状态 0 禁用，1 启用&#x27;,<br>     create_time datetime not null comment &#x27;创建时间&#x27;,<br>     update_time datetime not null comment &#x27;更新时间&#x27;<br>) comment &#x27;分类&#x27; ;<br><br>-- 菜品表<br>create table dish(<br>     id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>     name varchar(20) not null unique comment &#x27;菜品名称&#x27;,<br>     category_id int unsigned not null comment &#x27;菜品分类ID&#x27;,<br>     price decimal(8, 2) not null comment &#x27;菜品价格&#x27;,<br>     image varchar(300) not null comment &#x27;菜品图片&#x27;,<br>     description varchar(200) comment &#x27;描述信息&#x27;,<br>     status tinyint unsigned not null default 0 comment &#x27;状态, 0 停售 1 起售&#x27;,<br>     create_time datetime not null comment &#x27;创建时间&#x27;,<br>     update_time datetime not null comment &#x27;更新时间&#x27;<br>) comment &#x27;菜品&#x27;;<br><br>-- 套餐表<br>create table setmeal(<br>    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name varchar(20) not null unique comment &#x27;套餐名称&#x27;,<br>    category_id int unsigned not null comment &#x27;分类id&#x27;,<br>    price decimal(8, 2) not null comment &#x27;套餐价格&#x27;,<br>    image varchar(300) not null comment &#x27;图片&#x27;,<br>    description varchar(200) comment &#x27;描述信息&#x27;,<br>    status tinyint unsigned not null default 0 comment &#x27;状态 0:停用 1:启用&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;更新时间&#x27;<br>)comment &#x27;套餐&#x27; ;<br><br>-- 套餐菜品关联表<br>create table setmeal_dish(<br>     id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>     setmeal_id int unsigned not null comment &#x27;套餐id &#x27;,<br>     dish_id int unsigned not null comment &#x27;菜品id&#x27;,<br>     copies tinyint unsigned not null comment &#x27;份数&#x27;<br>)comment &#x27;套餐菜品中间表&#x27;;<br><br>-- ================================== 导入测试数据 ====================================<br>-- category<br>insert into category (id, type, name, sort, status, create_time, update_time) values (1, 1, &#x27;酒水饮料&#x27;, 10, 1, &#x27;2022-08-09 22:09:18&#x27;, &#x27;2022-08-09 22:09:18&#x27;);<br>insert into category (id, type, name, sort, status, create_time, update_time) values (2, 1, &#x27;传统主食&#x27;, 9, 1, &#x27;2022-08-09 22:09:32&#x27;, &#x27;2022-08-09 22:18:53&#x27;);<br>insert into category (id, type, name, sort, status, create_time, update_time) values (3, 2, &#x27;人气套餐&#x27;, 12, 1, &#x27;2022-08-09 22:11:38&#x27;, &#x27;2022-08-10 11:04:40&#x27;);<br>insert into category (id, type, name, sort, status, create_time, update_time) values (4, 2, &#x27;商务套餐&#x27;, 13, 1, &#x27;2022-08-09 22:14:10&#x27;, &#x27;2022-08-10 11:04:48&#x27;);<br>insert into category (id, type, name, sort, status, create_time, update_time) values (5, 1, &#x27;经典川菜&#x27;, 6, 1, &#x27;2022-08-09 22:17:42&#x27;, &#x27;2022-08-09 22:17:42&#x27;);<br>insert into category (id, type, name, sort, status, create_time, update_time) values (6, 1, &#x27;新鲜时蔬&#x27;, 7, 1, &#x27;2022-08-09 22:18:12&#x27;, &#x27;2022-08-09 22:18:28&#x27;);<br>insert into category (id, type, name, sort, status, create_time, update_time) values (7, 1, &#x27;汤类&#x27;, 11, 1, &#x27;2022-08-10 10:51:47&#x27;, &#x27;2022-08-10 10:51:47&#x27;);<br><br>-- dish<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (1,&#x27;王老吉&#x27;, 1, 6.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/41bfcacf-7ad4-4927-8b26-df366553a94c.png&#x27;, &#x27;&#x27;, 1, &#x27;2022-06-09 22:40:47&#x27;, &#x27;2022-06-09 22:40:47&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (2,&#x27;北冰洋&#x27;, 1, 4.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/4451d4be-89a2-4939-9c69-3a87151cb979.png&#x27;, &#x27;还是小时候的味道&#x27;, 1, &#x27;2022-06-10 09:18:49&#x27;, &#x27;2022-06-10 09:18:49&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (3,&#x27;雪花啤酒&#x27;, 1, 4.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/bf8cbfc1-04d2-40e8-9826-061ee41ab87c.png&#x27;, &#x27;&#x27;, 1, &#x27;2022-06-10 09:22:54&#x27;, &#x27;2022-06-10 09:22:54&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (4,&#x27;米饭&#x27;, 2, 2.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/76752350-2121-44d2-b477-10791c23a8ec.png&#x27;, &#x27;精选五常大米&#x27;, 1, &#x27;2022-06-10 09:30:17&#x27;, &#x27;2022-06-10 09:30:17&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (5,&#x27;馒头&#x27;, 2, 1.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/475cc599-8661-4899-8f9e-121dd8ef7d02.png&#x27;, &#x27;优质面粉&#x27;, 1, &#x27;2022-06-10 09:34:28&#x27;, &#x27;2022-06-10 09:34:28&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (6,&#x27;老坛酸菜鱼&#x27;, 5, 56.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/4a9cefba-6a74-467e-9fde-6e687ea725d7.png&#x27;, &#x27;原料：汤，草鱼，酸菜&#x27;, 1, &#x27;2022-06-10 09:40:51&#x27;, &#x27;2022-06-10 09:40:51&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (7,&#x27;经典酸菜鮰鱼&#x27;, 5, 66.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/5260ff39-986c-4a97-8850-2ec8c7583efc.png&#x27;, &#x27;原料：酸菜，江团，鮰鱼&#x27;, 1, &#x27;2022-06-10 09:46:02&#x27;, &#x27;2022-06-10 09:46:02&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (8,&#x27;蜀味水煮草鱼&#x27;, 5, 38.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/a6953d5a-4c18-4b30-9319-4926ee77261f.png&#x27;, &#x27;原料：草鱼，汤&#x27;, 1, &#x27;2022-06-10 09:48:37&#x27;, &#x27;2022-06-10 09:48:37&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (9,&#x27;清炒小油菜&#x27;, 6, 18.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/3613d38e-5614-41c2-90ed-ff175bf50716.png&#x27;, &#x27;原料：小油菜&#x27;, 1, &#x27;2022-06-10 09:51:46&#x27;, &#x27;2022-06-10 09:51:46&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (10,&#x27;蒜蓉娃娃菜&#x27;, 6, 18.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/4879ed66-3860-4b28-ba14-306ac025fdec.png&#x27;, &#x27;原料：蒜，娃娃菜&#x27;, 1, &#x27;2022-06-10 09:53:37&#x27;, &#x27;2022-06-10 09:53:37&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (11,&#x27;清炒西兰花&#x27;, 6, 18.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/e9ec4ba4-4b22-4fc8-9be0-4946e6aeb937.png&#x27;, &#x27;原料：西兰花&#x27;, 1, &#x27;2022-06-10 09:55:44&#x27;, &#x27;2022-06-10 09:55:44&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (12,&#x27;炝炒圆白菜&#x27;, 6, 18.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/22f59feb-0d44-430e-a6cd-6a49f27453ca.png&#x27;, &#x27;原料：圆白菜&#x27;, 1, &#x27;2022-06-10 09:58:35&#x27;, &#x27;2022-06-10 09:58:35&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (13,&#x27;清蒸鲈鱼&#x27;, 5, 98.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/c18b5c67-3b71-466c-a75a-e63c6449f21c.png&#x27;, &#x27;原料：鲈鱼&#x27;, 1, &#x27;2022-06-10 10:12:28&#x27;, &#x27;2022-06-10 10:12:28&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (14,&#x27;东坡肘子&#x27;, 5, 138.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/a80a4b8c-c93e-4f43-ac8a-856b0d5cc451.png&#x27;, &#x27;原料：猪肘棒&#x27;, 1, &#x27;2022-06-10 10:24:03&#x27;, &#x27;2022-06-10 10:24:03&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (15,&#x27;梅菜扣肉&#x27;, 5, 58.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/6080b118-e30a-4577-aab4-45042e3f88be.png&#x27;, &#x27;原料：猪肉，梅菜&#x27;, 1, &#x27;2022-06-10 10:26:03&#x27;, &#x27;2022-06-10 10:26:03&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (16,&#x27;剁椒鱼头&#x27;, 5, 66.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/13da832f-ef2c-484d-8370-5934a1045a06.png&#x27;, &#x27;原料：鲢鱼，剁椒&#x27;, 1, &#x27;2022-06-10 10:28:54&#x27;, &#x27;2022-06-10 10:28:54&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (17,&#x27;馋嘴牛蛙&#x27;, 5, 98.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/7a55b845-1f2b-41fa-9486-76d187ee9ee1.png&#x27;, &#x27;配料：鲜活牛蛙，丝瓜，黄豆芽&#x27;, 1, &#x27;2022-06-10 10:37:52&#x27;, &#x27;2022-06-10 10:37:52&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (18,&#x27;鸡蛋汤&#x27;, 7, 4.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/c09a0ee8-9d19-428d-81b9-746221824113.png&#x27;, &#x27;配料：鸡蛋，紫菜&#x27;, 1, &#x27;2022-06-10 10:54:25&#x27;, &#x27;2022-06-10 10:54:25&#x27;);<br>insert into dish (id, name, category_id, price, image, description, status, create_time, update_time) values (19,&#x27;平菇豆腐汤&#x27;, 7, 6.00, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/16d0a3d6-2253-4cfc-9b49-bf7bd9eb2ad2.png&#x27;, &#x27;配料：豆腐，平菇&#x27;, 1, &#x27;2022-06-10 10:55:02&#x27;, &#x27;2022-06-10 10:55:02&#x27;);<br><br>-- setmeal<br>insert into setmeal (id, category_id, name, price, status, description, image, create_time, update_time) values (1, 4, &#x27;商务套餐A&#x27;, 20.00, 1, &#x27;&#x27;, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/21a5ed3a-97f6-447a-af9d-53deabfb5661.png&#x27;, &#x27;2022-06-10 10:58:09&#x27;, &#x27;2022-06-10 10:58:09&#x27;);<br>insert into setmeal (id, category_id, name, price, status, description, image, create_time, update_time) values (2, 4, &#x27;商务套餐B&#x27;, 22.00, 1, &#x27;&#x27;, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/8d0075f8-9008-4390-94ca-2ca631440304.png&#x27;, &#x27;2022-06-10 11:00:13&#x27;, &#x27;2022-06-10 11:11:37&#x27;);<br>insert into setmeal (id, category_id, name, price, status, description, image, create_time, update_time) values (3, 3, &#x27;人气套餐A&#x27;, 49.00, 1, &#x27;&#x27;, &#x27;https://reggie-itcast.oss-cn-beijing.aliyuncs.com/8979566b-0e17-462b-81d8-8dbace4138f4.png&#x27;, &#x27;2022-06-10 11:11:23&#x27;, &#x27;2022-06-10 11:11:23&#x27;);<br><br>-- setmeal_dish<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (1, 1, 1, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (2, 1, 4, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (3, 1, 11, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (4, 2, 2, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (5, 2, 4, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (6, 2, 9, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (7, 3, 2, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (8, 3, 6, 1);<br>insert into setmeal_dish (id, setmeal_id, dish_id, copies) values (9, 3, 5, 1);<br></code></pre></td></tr></table></figure><p>需求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 需求:<br>-- 1. 查询价格低于 10元 的菜品的名称 、价格 及其 菜品的分类名称 .<br>-- 表: dish , category<br>-- SQL:<br>select dish.name, dish.price, category.name<br>from dish,<br>     category<br>where dish.category_id = category.id<br>  and dish.price &lt; 10;<br><br><br><br>-- 2. 查询所有价格在 10元(含)到50元(含)之间 且 状态为&#x27;起售&#x27;的菜品, 展示出菜品的名称、价格 及其 菜品的分类名称 (即使菜品没有分类 , 也需要将菜品查询出来).<br>-- 表: dish , category<br>-- SQL:<br># select dish.name, dish.price, category.name<br># from dish<br>#          left join category<br>#               on dish.category_id = category.id and dish.price &gt;= 10 and dish.price &lt;= 50 and dish.status = 1;<br># 这样写是错的 判断条件要从and改成where<br><br>select dish.name, dish.price, category.name<br>from dish<br>         left join category<br>                   on dish.category_id = category.id<br>where dish.price between 10 and 50<br>  and dish.status = 1;<br><br><br>-- 3. 查询每个分类下最贵的菜品, 展示出分类的名称、最贵的菜品的价格 .<br>-- 表: dish , category<br>-- SQL:<br>select category.name, max(dish.price)<br>from dish,<br>     category<br>where dish.category_id = category.id<br>group by category.id;<br><br><br>-- 4. 查询各个分类下 菜品状态为 &#x27;起售&#x27; , 并且 该分类下菜品总数量大于等于3 的 分类名称 .<br>-- 表: dish , category<br>-- SQL:<br>select category.name, count(*)<br>from dish,<br>     category<br>where dish.category_id = category.id<br>  and dish.status = 1<br>group by category.id<br>having count(*) &gt;= 3;<br><br>-- 5. 查询出 &quot;商务套餐A&quot; 中包含了哪些菜品 （展示出套餐名称、价格, 包含的菜品名称、价格、份数）.<br>-- 表: setmeal , setmeal_dish , dish<br>-- SQL:<br>select setmeal.name, setmeal.price, dish.name, dish.price, setmeal_dish.copies<br>from setmeal,<br>     setmeal_dish,<br>     dish<br>where setmeal_dish.setmeal_id = setmeal.id<br>  and setmeal_dish.dish_id = dish.id<br>  and setmeal.name = &#x27;商务套餐A&#x27;;<br><br><br>-- 6. 查询出低于菜品平均价格的菜品信息 (展示出菜品名称、菜品价格).<br>-- 表: dish<br>-- SQL:<br>-- a. 计算 菜品平均价格<br>select avg(price) from dish;<br><br>-- b. 查询出低于菜品平均价格的菜品信息<br>select name, price from dish where price &lt; (select avg(price) from dish);<br>select * from dish where price &lt; (select avg(price) from dish);<br></code></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务是一组操作的集合，它是一个<strong>不可分割</strong>的工作单位。事务会把所有的操作作为一个整体一起向系统<strong>提交或撤销操作</strong>请求，即这些操作 要么<strong>同时成功</strong>，要么<strong>同时失败</strong>。</p><p>注意：默认<code>MySQL</code>的事务是自动提交的，也就是说，当执行一条<code>DML</code>语句，<code>MySQL</code>会立即<strong>隐式的提交事务</strong>。</p><h5 id="事务的控制"><a href="#事务的控制" class="headerlink" title="事务的控制"></a>事务的控制</h5><ul><li>开启事务：<code>start transaction;</code> 或<code>begin;</code></li><li>提交事务：<code>commit;</code></li><li>回滚事务：<code>rollback;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">start transaction ; -- 开启事务<br><br>delete from tb_dept where id = 1;<br>delete from tb_emp where dept_id = 1;<br><br>commit ; -- 成功则提交<br>rollback ; -- 失败则回滚<br></code></pre></td></tr></table></figure><h5 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h5><ol><li>原子性（Atomicity）：事务是<strong>不可分割</strong>的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的<strong>数据都保持一致</strong>状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在<strong>不受外部并发操作影响</strong>的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是<strong>永久</strong>的。</li></ol><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引（<code>index</code>）是帮助数据库高效获取数据的数据结构 。</p><p>优点：</p><ul><li>提高数据<strong>查询</strong>的效率，降低数据库的<code>IO</code>成本。</li><li>通过索引列对数据进行<strong>排序</strong>，降低数据排序的成本，降低<code>CPU</code>消耗。</li></ul><p>缺点：</p><ul><li>索引会<strong>占用存储</strong>空间。</li><li>索引大大提高了查询效率，同时却也降低了<code>insert</code>、<code>update</code>、<code>delete</code>的效率。</li></ul><h5 id="索引的结构"><a href="#索引的结构" class="headerlink" title="索引的结构"></a>索引的结构</h5><p><code>MySQL</code>数据库支持的索引结构有很多，如：<code>Hash</code>索引、<code>B+Tree</code>索引、<code>Full-Text</code>索引等。我们平常所说的索引，如果没有特别指明，都是指默认的<code>B+Tree</code>结构组织的索引。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BB%93%E6%9E%84.png"></p><h5 id="索引的语法"><a href="#索引的语法" class="headerlink" title="索引的语法"></a>索引的语法</h5><ul><li>创建索引：<code>create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;</code></li><li>查看索引：<code>show  index  from  表名;</code></li><li>删除索引：<code>drop  index  索引名  on  表名;</code></li></ul><p>注意：</p><ol><li>主键字段，在建表时，会<strong>自动创建主键索引</strong>。</li><li>添加<strong>唯一约束</strong><code>unique</code>时，数据库实际上会添加<strong>唯一索引</strong>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 索引<br>-- 创建 : 为tb_emp表的name字段建立一个索引 .<br>create index idx_emp_name on tb_emp(name);<br><br>-- 查询 : 查询 tb_emp 表的索引信息 .<br>show index from tb_emp;<br><br>-- 删除: 删除 tb_emp 表中name字段的索引 .<br>drop index idx_emp_name on tb_emp;<br></code></pre></td></tr></table></figure><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p><code>MyBatis</code>是一款优秀的持久层框架，用于简化<code>JDBC</code>的开发。</p><p><code>MyBatis</code>本是<code>Apache</code>的一个开源项目<code>iBatis</code>，2010年这个项目由<code>apache</code>迁移到了<code>google code</code>，并且改名为<code>MyBatis</code> 。2013年11月迁移到<code>Github</code>。</p><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html%EF%BC%88%E7%8E%B0%E5%9C%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%EF%BC%89">https://mybatis.org/mybatis-3/zh/index.html（现在无法访问）</a></p><p><a href="https://blog.mybatis.org/">The MyBatis Blog</a>（现在可以访问）</p><p><code>MyBatis</code>中文网：<a href="https://mybatis.net.cn/">MyBatis中文网</a></p><h4 id="Mybatis入门"><a href="#Mybatis入门" class="headerlink" title="Mybatis入门"></a>Mybatis入门</h4><h5 id="Mybatis快速入门程序"><a href="#Mybatis快速入门程序" class="headerlink" title="Mybatis快速入门程序"></a>Mybatis快速入门程序</h5><p>案例：使用<code>Mybatis</code>查询所有用户数据</p><p>1.创建<code>springboot</code>工程，引入<code>Mybatis</code>的相关依赖：<code>MyBatis Framework</code>和<code>MySQL Driver</code>。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E5%88%9B%E5%BB%BAMybatis%E5%B7%A5%E7%A8%8B.png"></p><p>2.创建数据库<code>mybatis</code>，创建数据库表<code>user</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 创建数据库mybatis，在该数据库下创建表user<br>create table user(<br>                     id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>                     name varchar(100) comment &#x27;姓名&#x27;,<br>                     age tinyint unsigned comment &#x27;年龄&#x27;,<br>                     gender tinyint unsigned comment &#x27;性别, 1:男, 2:女&#x27;,<br>                     phone varchar(11) comment &#x27;手机号&#x27;<br>) comment &#x27;用户表&#x27;;<br><br>insert into user(id, name, age, gender, phone) VALUES (null,&#x27;白眉鹰王&#x27;,55,&#x27;1&#x27;,&#x27;18800000000&#x27;);<br>insert into user(id, name, age, gender, phone) VALUES (null,&#x27;金毛狮王&#x27;,45,&#x27;1&#x27;,&#x27;18800000001&#x27;);<br>insert into user(id, name, age, gender, phone) VALUES (null,&#x27;青翼蝠王&#x27;,38,&#x27;1&#x27;,&#x27;18800000002&#x27;);<br>insert into user(id, name, age, gender, phone) VALUES (null,&#x27;紫衫龙王&#x27;,42,&#x27;2&#x27;,&#x27;18800000003&#x27;);<br>insert into user(id, name, age, gender, phone) VALUES (null,&#x27;光明左使&#x27;,37,&#x27;1&#x27;,&#x27;18800000004&#x27;);<br>insert into user(id, name, age, gender, phone) VALUES (null,&#x27;光明右使&#x27;,48,&#x27;1&#x27;,&#x27;18800000005&#x27;);<br></code></pre></td></tr></table></figure><p>3.在<code>com.itheima.pojo</code>包下创建实体类<code>User</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short age;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String name, Short age, Short gender, String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Short <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Short age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Short <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(Short gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&quot;</span> + gender +<br>                <span class="hljs-string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.配置<code>Mybatis</code>（数据库连接信息）</p><p>在<code>src</code>-&gt;<code>main</code>-&gt;<code>resources</code>-&gt;<code>application.properties</code>文件中，配置数据库连接信息。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment"># 配置数据库的连接信息 - 四要素</span><br><span class="hljs-comment"># 驱动类名称</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"># 数据库连接的url（mybatis是数据库的名称）</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-comment"># 连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"># 连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 注意：我的root用户密码为空，所有不用填写password，如果密码不为空需要在=号后面填写密码</span><br></code></pre></td></tr></table></figure><p>设置<code>Properties</code>文件编码：<a href="https://blog.csdn.net/HaHa_Sir/article/details/122851700">Idea 设置编码UTF-8 Idea中 .properties 配置文件中文乱码-CSDN博客</a></p><p>5.编写<code>SQL</code>语句（<strong>注解</strong>或<strong>XML</strong>）</p><p>在<code>com.itheima.mapper</code>包下创建<strong>接口</strong><code>UserMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><br><span class="hljs-meta">@Mapper</span> <span class="hljs-comment">//在运行时，会自动生成该接口的实现类对象（代理对象），并且将该对象交给IOC容器管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">//查询全部用户信息</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt;  <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.单元测试</p><p>在<code>src</code>-&gt;<code>test</code>-&gt;<code>java</code>-&gt;<code>com</code>-&gt;<code>itheima</code>-&gt;<code>SpringbootMybatisQuickstartApplicationTests.java</code>文件下，进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima;<br><br><span class="hljs-meta">@SpringBootTest</span> <span class="hljs-comment">//springboot整合单元测试的注解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisQuickstartApplicationTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testListUser</span><span class="hljs-params">()</span>&#123;<br>List&lt;User&gt; userList = userMapper.list();<br>userList.stream().forEach(user -&gt; &#123;<br>System.out.println(user);<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="配置SQL提示"><a href="#配置SQL提示" class="headerlink" title="配置SQL提示"></a>配置SQL提示</h5><p>默认在<code>Mybatis</code>中编写<code>SQL</code>语句是不识别的。可以做如下配置：</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/IDEA%E9%85%8D%E7%BD%AESQL%E6%8F%90%E7%A4%BA.png"></p><p>如果<code>IDEA</code>不提示表的信息， 是因为<code>IDEA</code>和数据库没有建立连接，不识别表信息。</p><p>解决方式：在<code>IDEA</code>中配置<code>MySQL</code>数据库连接。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/IDEA%E9%85%8D%E7%BD%AEMySQL%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5.png"></p><h5 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h5><p><code>JDBC</code>： ( Java DataBase Connectivity )，就是使用<code>Java</code>语言操作关系型数据库的一套<code>API</code>。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/JDBC.png"></p><ol><li><code>sun</code>公司官方定义的一套操作所有关系型数据库的规范，即接口。</li><li>各个数据库厂商去实现这套接口，提供数据库驱动<code>jar</code>包。</li><li>程序员使用这套接口（<code>JDBC</code>）编程，真正执行的代码是驱动<code>jar</code>包中的实现类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//原始JDBC程序</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1. 注册驱动</span><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>    <span class="hljs-comment">//2. 获取连接对象</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>    <span class="hljs-comment">//3. 获取执行SQL的对象Statement,执行SQL,返回结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br><br>    <span class="hljs-comment">//4. 封装结果数据</span><br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> resultSet.getShort(<span class="hljs-string">&quot;age&quot;</span>);<br>        <span class="hljs-type">short</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> resultSet.getShort(<span class="hljs-string">&quot;gender&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;phone&quot;</span>);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(id,name,age,gender,phone);<br>        userList.add(user);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-comment">//5. 释放资源</span><br>    statement.close();<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h5><ol><li>数据库连接池是个<strong>容器</strong>，负责分配、管理数据库连接(<code>Connection</code>)。</li><li>它允许应用程序<strong>重复使用一个现有的数据库连接</strong>，而不是再重新建立一个。</li><li><strong>释放空闲时间超过最大空闲时间的连接</strong>，来避免因为没有释放连接而引起的数据库连接遗漏。</li></ol><p>优势：资源重用，提升系统响应速度，避免数据库连接遗漏。</p><p>标准接口：<code>DataSource</code></p><ul><li><p>官方(<code>sun</code>)提供的数据库连接池接口，由第三方组织实现此接口。</p></li><li><p>功能：获取连接。<code>Connection getConnection() throws SQLException;</code></p></li><li><p>常见产品：<code>C3P0</code>，<code>DBCP</code>，<code>Druid</code>，<code>Hikari</code>（<code>SpringBoot</code>默认）。</p><p><code>Druid</code>（德鲁伊）连接池是阿里巴巴开源的数据库连接池项目。</p></li></ul><p><code>SpringBoot</code>默认使用<code>Hikari</code>：（测试控制台显示）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span>T10:<span class="hljs-number">29</span>:<span class="hljs-number">12</span>.<span class="hljs-number">382</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">30856</span> --- [springboot-mybatis-quickstart] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-<span class="hljs-number">1</span> - Shutdown initiated...<br><span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span>T10:<span class="hljs-number">29</span>:<span class="hljs-number">12</span>.<span class="hljs-number">386</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span>  INFO <span class="hljs-number">30856</span> --- [springboot-mybatis-quickstart] [ionShutdownHook] com.zaxxer.hikari.HikariDataSource <br></code></pre></td></tr></table></figure><p>切换<code>Druid</code>数据库连接池：</p><p>方法一：</p><p>在<code>pom.xml</code>文件中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- druid连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>src</code>-&gt;<code>main</code>-&gt;<code>resources</code>-&gt;<code>application.properties</code>文件中添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br></code></pre></td></tr></table></figure><p>方法二：（我的使用这个会报错，暂时还没解决）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment"># 驱动类名称</span><br><span class="hljs-attr">spring.datasource.druid.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"># 数据库连接的url</span><br><span class="hljs-attr">spring.datasource.druid.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-comment"># 连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.druid.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"># 连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.druid.password</span>=<span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h5 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h5><p><code>Lombok</code>是一个实用的<code>Java</code>类库，能通过注解的形式自动生成构造器、<code>getter/setter</code>、<code>equals</code>、<code>hashcode</code>、<code>toString</code>等方法，并可以自动化生成日志变量。</p><p>使用<code>Lombok</code>时，还需要安装一个<code>Lombok</code>的插件（<code>IDEA</code>自带）。在<code>pom.xml</code>文件添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的 toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和 hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Short age;<br>    <span class="hljs-keyword">private</span> Short gender;<br>    <span class="hljs-keyword">private</span> String phone;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Lombok</code>会在编译时，自动生成对应的<code>Java</code>代码。在<code>target</code>-&gt;<code>classes</code>-&gt;<code>com</code>-&gt;<code>itheima</code>-&gt;<code>pojo</code>-&gt;<code>User.class</code>文件夹下，可以查看编译后的文件，<code>Lombok</code>已经自动生成相应的方法。</p><h4 id="Mybatis基础操作"><a href="#Mybatis基础操作" class="headerlink" title="Mybatis基础操作"></a>Mybatis基础操作</h4><h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>1.准备数据库表<code>emp</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">-- 部门管理<br>create table dept(<br>    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,<br>    name varchar(10) not null unique comment &#x27;部门名称&#x27;,<br>    create_time datetime not null comment &#x27;创建时间&#x27;,<br>    update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;部门表&#x27;;<br><br>insert into dept (id, name, create_time, update_time) values(1,&#x27;学工部&#x27;,now(),now()),(2,&#x27;教研部&#x27;,now(),now()),(3,&#x27;咨询部&#x27;,now(),now()), (4,&#x27;就业部&#x27;,now(),now()),(5,&#x27;人事部&#x27;,now(),now());<br><br><br><br>-- 员工管理<br>create table emp (<br>  id int unsigned primary key auto_increment comment &#x27;ID&#x27;,<br>  username varchar(20) not null unique comment &#x27;用户名&#x27;,<br>  password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,<br>  name varchar(10) not null comment &#x27;姓名&#x27;,<br>  gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,<br>  image varchar(300) comment &#x27;图像&#x27;,<br>  job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,<br>  entrydate date comment &#x27;入职时间&#x27;,<br>  dept_id int unsigned comment &#x27;部门ID&#x27;,<br>  create_time datetime not null comment &#x27;创建时间&#x27;,<br>  update_time datetime not null comment &#x27;修改时间&#x27;<br>) comment &#x27;员工表&#x27;;<br><br>INSERT INTO emp<br>(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES<br>(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),<br>(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),<br>(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),<br>(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),<br>(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),<br>(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),<br>(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),<br>(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),<br>(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),<br>(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),<br>(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),<br>(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),<br>(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),<br>(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),<br>(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2010-01-01&#x27;,2,now(),now()),<br>(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());<br></code></pre></td></tr></table></figure><p>2.创建一个新的<code>springboot</code>工程，选择引入对应的起步依赖（<code>mybatis</code>、<code>mysql</code>驱动、<code>lombok</code>）。</p><p>3.<code>application.properties</code>中引入数据库连接信息。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment"># 驱动类名称</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"># 数据库连接的url</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-comment"># 连接数据库的用户名</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"># 连接数据库的密码</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>4.创建对应的实体类<code>Emp</code>（实体类属性采用驼峰命名）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//ID</span><br>    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> Short gender; <span class="hljs-comment">//性别, 1 男, 2 女</span><br>    <span class="hljs-keyword">private</span> String image; <span class="hljs-comment">//图像url</span><br>    <span class="hljs-keyword">private</span> Short job; <span class="hljs-comment">//职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;</span><br>    <span class="hljs-keyword">private</span> LocalDate entrydate; <span class="hljs-comment">//入职日期</span><br>    <span class="hljs-keyword">private</span> Integer deptId; <span class="hljs-comment">//部门ID</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime; <span class="hljs-comment">//修改时间</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.准备<code>Mapper</code>接口<code>EmpMapper</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h5><h6 id="根据主键删除"><a href="#根据主键删除" class="headerlink" title="根据主键删除"></a>根据主键删除</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpMapper</span> &#123;<br>    <span class="hljs-comment">//根据ID删除数据</span><br>    <span class="hljs-meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>; <span class="hljs-comment">//返回值可以设置为void或者int，int返回删除的记录数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果<code>mapper</code>接口方法形参只有一个普通类型的参数，<code>#&#123;…&#125;</code>里面的属性名可以随便写，如：<code>#&#123;id&#125;</code>、<code>#&#123;value&#125;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisTestApplicationTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> EmpMapper empMapper;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//测试</span><br><span class="hljs-type">int</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> empMapper.delete(<span class="hljs-number">18</span>);<br>System.out.println(delete);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: delete from emp where id = ?<br>==&gt; Parameters: <span class="hljs-number">18</span>(Integer)<br>&lt;==    Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h6><ul><li><code>#&#123;…&#125;</code>：执行<code>SQL</code>时，会将<code>#&#123;…&#125;</code>替换为<code>?</code> ，生成<strong>预编译SQL</strong>，会自动设置参数值。使用时机：参数传递，都使用<code>#&#123;…&#125;</code>。</li><li><code>$&#123;…&#125;</code>：<strong>拼接SQL</strong>。直接将参数拼接在<code>SQL</code>语句中，存在<code>SQL</code>注入问题。使用时机：对表名、列表进行动态设置时使用。</li></ul><h6 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h6><p>在<code>application.properties</code>中，打开<code>mybatis</code>的日志，并指定输出到控制台。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment">#指定mybatis输出日志的位置,输出控制台</span><br><span class="hljs-attr">mybatis.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h6 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h6><p><code>SQL</code>注入是通过操作输入的数据来修改事先定义好的<code>SQL</code>语句，以达到执行代码对服务器进行攻击的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">select count(*) from emp where username = &#x27;zhangwuji&#x27; and password = &#x27;111&#x27;;<br>-- 当用户输入正确的用户名zhangwuji和对应正确的密码111才能登录成功。<br><br>select count(*) from emp where username = &#x27;wuieuwiueiwuiew&#x27; and password = &#x27;&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;<br>-- 用户随意输入一个用户名，在密码中输入&#x27; or &#x27;1&#x27; = &#x27;1时，就会变成如上MySQL语句，也能执行成功，这就是SQL注入。能够SQL注入成功，是因为直接将参数直接拼接在SQL语句的方法。<br></code></pre></td></tr></table></figure><h6 id="预编译SQL"><a href="#预编译SQL" class="headerlink" title="预编译SQL"></a>预编译SQL</h6><p>预编译<code>SQL</code>性能更高，更安全（防止<code>SQL</code>注入）。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E9%A2%84%E7%BC%96%E8%AF%91SQL%E7%9A%84%E6%80%A7%E8%83%BD.png"></p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/%E9%A2%84%E7%BC%96%E8%AF%91SQL.png"></p><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//新增</span><br><span class="hljs-meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span><br><span class="hljs-meta">        &quot;values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;,#&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//构造员工对象</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>    emp.setUsername(<span class="hljs-string">&quot;srr&quot;</span>);<br>    emp.setName(<span class="hljs-string">&quot;rourou&quot;</span>);<br>    emp.setGender((<span class="hljs-type">short</span>) <span class="hljs-number">2</span>);<br>    emp.setImage(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br>    emp.setJob((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>    emp.setEntrydate(LocalDate.of(<span class="hljs-number">2023</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>));<br>    emp.setDeptId(<span class="hljs-number">1</span>);<br>    emp.setCreateTime(LocalDateTime.now());<br>    emp.setUpdateTime(LocalDateTime.now());<br><br>    <span class="hljs-comment">//执行新增员工操作</span><br>    empMapper.insert(emp);<br>    System.out.println(emp.getId());<span class="hljs-comment">//null 执行基础的插入操作不会返回主键值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)values (?, ?, ?,?, ?, ?, ?, ?, ?)<br>==&gt; Parameters: srr(String), rourou(String), <span class="hljs-number">2</span>(Short), <span class="hljs-number">1</span>.jpg(String), <span class="hljs-number">1</span>(Short), <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">01</span>(LocalDate), <span class="hljs-number">1</span>(Integer), <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">35</span>:<span class="hljs-number">03</span>.<span class="hljs-number">993125900</span>(LocalDateTime), <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">35</span>:<span class="hljs-number">03</span>.<span class="hljs-number">993125900</span>(LocalDateTime)<br>&lt;==    Updates: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">781</span>aff8b]<br>null<br></code></pre></td></tr></table></figure><h6 id="增加（主键返回）"><a href="#增加（主键返回）" class="headerlink" title="增加（主键返回）"></a>增加（主键返回）</h6><p>在数据添加成功后，需要<strong>获取插入数据库数据的主键</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//新增</span><br><span class="hljs-meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span> <span class="hljs-comment">//会自动将生成的主键值，赋值给emp对象的id属性</span><br><span class="hljs-comment">//useGeneratedKeys为true，获取返回的主键值，keyProperty指定返回的主键封装到的属性值</span><br><span class="hljs-meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span><br><span class="hljs-meta">        &quot;values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;,#&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//构造员工对象</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>    emp.setUsername(<span class="hljs-string">&quot;srr2&quot;</span>);<br>    emp.setName(<span class="hljs-string">&quot;rourou&quot;</span>);<br>    emp.setGender((<span class="hljs-type">short</span>) <span class="hljs-number">2</span>);<br>    emp.setImage(<span class="hljs-string">&quot;1.jpg&quot;</span>);<br>    emp.setJob((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>    emp.setEntrydate(LocalDate.of(<span class="hljs-number">2023</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>));<br>    emp.setDeptId(<span class="hljs-number">1</span>);<br>    emp.setCreateTime(LocalDateTime.now());<br>    emp.setUpdateTime(LocalDateTime.now());<br><br>    <span class="hljs-comment">//执行新增员工操作</span><br>    empMapper.insert(emp);<br>    System.out.println(emp.getId());<span class="hljs-comment">//返回主键值</span><br>&#125;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)values (?, ?, ?,?, ?, ?, ?, ?, ?)<br>==&gt; Parameters: srr2(String), rourou(String), <span class="hljs-number">2</span>(Short), <span class="hljs-number">1</span>.jpg(String), <span class="hljs-number">1</span>(Short), <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">01</span>(LocalDate), <span class="hljs-number">1</span>(Integer), <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">44</span>:<span class="hljs-number">35</span>.<span class="hljs-number">690441100</span>(LocalDateTime), <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">44</span>:<span class="hljs-number">35</span>.<span class="hljs-number">690441100</span>(LocalDateTime)<br>&lt;==    Updates: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">632</span>b305d]<br><span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//更新</span><br><span class="hljs-meta">@Update(&quot;update emp set username = #&#123;username&#125;, name = #&#123;name&#125;, gender = #&#123;gender&#125;, image = #&#123;image&#125;, &quot; +</span><br><span class="hljs-meta">        &quot;job = #&#123;job&#125;, entrydate = #&#123;entrydate&#125;, dept_id = #&#123;deptId&#125;, update_time = #&#123;updateTime&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//构造员工对象</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>    emp.setId(<span class="hljs-number">21</span>);<br>    emp.setUsername(<span class="hljs-string">&quot;srr8&quot;</span>);<br>    emp.setName(<span class="hljs-string">&quot;rourou8&quot;</span>);<br>    emp.setImage(<span class="hljs-string">&quot;1.png&quot;</span>);<br>    emp.setGender((<span class="hljs-type">short</span>) <span class="hljs-number">2</span>);<br>    emp.setJob((<span class="hljs-type">short</span>) <span class="hljs-number">1</span>);<br>    emp.setEntrydate(LocalDate.of(<span class="hljs-number">2023</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>));<br>    emp.setUpdateTime(LocalDateTime.now());<br>    emp.setDeptId(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">//执行更新员工操作</span><br>    empMapper.update(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: update emp <span class="hljs-built_in">set</span> username = ?, name = ?, gender = ?, image = ?, job = ?, entrydate = ?, dept_id = ?, update_time = ? where id = ?<br>==&gt; Parameters: srr8(String), rourou8(String), <span class="hljs-number">2</span>(Short), <span class="hljs-number">1</span>.png(String), <span class="hljs-number">1</span>(Short), <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">08</span>(LocalDate), <span class="hljs-number">2</span>(Integer), <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">56</span>:<span class="hljs-number">57</span>.<span class="hljs-number">003958300</span>(LocalDateTime), <span class="hljs-number">21</span>(Integer)<br>&lt;==    Updates: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据ID查询</span><br><span class="hljs-meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> empMapper.getById(<span class="hljs-number">21</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: select * from emp where id = ?<br>==&gt; Parameters: <span class="hljs-number">21</span>(Integer)<br>&lt;==    Columns: id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time<br>&lt;==        Row: <span class="hljs-number">21</span>, srr8, <span class="hljs-number">123456</span>, rourou8, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>.png, <span class="hljs-number">1</span>, <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">08</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">14</span>:<span class="hljs-number">35</span>:<span class="hljs-number">04</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">14</span>:<span class="hljs-number">56</span>:<span class="hljs-number">57</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">7</span>fe8c7db]<br>Emp(id=<span class="hljs-number">21</span>, username=srr8, password=<span class="hljs-number">123456</span>, name=rourou8, gender=<span class="hljs-number">2</span>, image=<span class="hljs-number">1</span>.png, job=<span class="hljs-number">1</span>, entrydate=<span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">08</span>, deptId=null, createTime=null, updateTime=null)<br></code></pre></td></tr></table></figure><p>注意：<code>deptId=null, createTime=null, updateTime=null</code>，这三个字段的值没有封装进<code>Emp</code>对象中。</p><h6 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h6><p>实体类属性名和数据库表查询返回的字段名一致，<code>Mybatis</code>会自动封装。</p><p>实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/Mybatis%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85.png"></p><p>解决方法：</p><p>1.<strong>起别名</strong>：在<code>SQL</code>语句中，对不一样的列名起别名，别名和实体类属性名一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//方案一: 给字段起别名, 让别名与实体类属性一致</span><br><span class="hljs-meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, &quot; +</span><br><span class="hljs-meta">        &quot;dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><p>2.<strong>手动结果映射</strong>：通过<code>@Results</code>及<code>@Result</code>进行手动结果映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//方案二: 通过@Results, @Result注解手动映射封装</span><br><span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">    @Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span><br><span class="hljs-meta">    @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Emp <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><p>3.<strong>开启驼峰命名</strong>：如果字段名与属性名符合驼峰命名规则，<code>Mybatis</code>会自动通过<strong>驼峰命名规则映射</strong>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-comment">#开启驼峰命名自动映射，即从数据库字段名 a_column 映射到Java属性名 aColumn。</span><br><span class="hljs-comment">#开启mybatis的驼峰命名自动映射开关 a_column ------&gt; aCloumn</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: select id, username, password, name, gender, image, job, entrydate, dept_id deptId, create_time createTime, update_time updateTime from emp where id = ?<br>==&gt; Parameters: <span class="hljs-number">21</span>(Integer)<br>&lt;==    Columns: id, username, password, name, gender, image, job, entrydate, deptId, createTime, updateTime<br>&lt;==        Row: <span class="hljs-number">21</span>, srr8, <span class="hljs-number">123456</span>, rourou8, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>.png, <span class="hljs-number">1</span>, <span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">08</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">14</span>:<span class="hljs-number">35</span>:<span class="hljs-number">04</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span> <span class="hljs-number">14</span>:<span class="hljs-number">56</span>:<span class="hljs-number">57</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">66</span>d25ba9]<br>Emp(id=<span class="hljs-number">21</span>, username=srr8, password=<span class="hljs-number">123456</span>, name=rourou8, gender=<span class="hljs-number">2</span>, image=<span class="hljs-number">1</span>.png, job=<span class="hljs-number">1</span>, entrydate=<span class="hljs-number">2023</span>-<span class="hljs-number">09</span>-<span class="hljs-number">08</span>, deptId=<span class="hljs-number">2</span>, createTime=<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">35</span>:<span class="hljs-number">04</span>, updateTime=<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">20</span>T14:<span class="hljs-number">56</span>:<span class="hljs-number">57</span>)<br></code></pre></td></tr></table></figure><h6 id="条件查询-1"><a href="#条件查询-1" class="headerlink" title="条件查询"></a>条件查询</h6><p><code>#&#123;…&#125;</code>无法出现在引号之内，因为<code>#&#123;…&#125;</code>要被<code>?</code>所替代，所以<code>&#39;%#&#123;name&#125;%&#39;</code>编译后会变成<code>&#39;%?%&#39;</code>。</p><p>解决方法：</p><p>1.将<code>&#39;%#&#123;name&#125;%&#39;</code>修改成<code>&#39;%$&#123;name&#125;%&#39;</code>。但是使用<code>$&#123;&#125;</code>存在性能低、不安全、<code>SQL</code>注入问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//方式一</span><br><span class="hljs-meta">@Select(&quot;select * from emp where name like &#x27;%$&#123;name&#125;%&#x27; and gender = #&#123;gender&#125; and &quot; +</span><br><span class="hljs-meta">&quot;entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc &quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin , LocalDate end)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Emp&gt; empList = empMapper.list(<span class="hljs-string">&quot;张&quot;</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">1</span>, LocalDate.of(<span class="hljs-number">2010</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    System.out.println(empList);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: select * from emp where name like &#x27;<span class="hljs-variable">%张%</span>&#x27; and gender = ? and entrydate between ? and ? order by update_time desc<br>==&gt; Parameters: <span class="hljs-number">1</span>(Short), <span class="hljs-number">2010</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>(LocalDate), <span class="hljs-number">2020</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>(LocalDate)<br>&lt;==    Columns: id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time<br>&lt;==        Row: <span class="hljs-number">2</span>, zhangwuji, <span class="hljs-number">123456</span>, 张无忌, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>.jpg, <span class="hljs-number">2</span>, <span class="hljs-number">2015</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span> <span class="hljs-number">13</span>:<span class="hljs-number">40</span>:<span class="hljs-number">58</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span> <span class="hljs-number">13</span>:<span class="hljs-number">40</span>:<span class="hljs-number">58</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">34</span>c53688]<br>[Emp(id=<span class="hljs-number">2</span>, username=zhangwuji, password=<span class="hljs-number">123456</span>, name=张无忌, gender=<span class="hljs-number">1</span>, image=<span class="hljs-number">2</span>.jpg, job=<span class="hljs-number">2</span>, entrydate=<span class="hljs-number">2015</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>, deptId=<span class="hljs-number">2</span>, createTime=<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span>T13:<span class="hljs-number">40</span>:<span class="hljs-number">58</span>, updateTime=<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span>T13:<span class="hljs-number">40</span>:<span class="hljs-number">58</span>)]<br></code></pre></td></tr></table></figure><p>2.使用<code>concat</code>字符串拼接函数<code>concat</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//方式二</span><br><span class="hljs-meta">@Select(&quot;select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125; and &quot; +</span><br><span class="hljs-meta">        &quot;entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc &quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin , LocalDate end)</span>;<br></code></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CMD">==&gt;  Preparing: select * from emp where name like concat(&#x27;<span class="hljs-variable">%&#x27;,?,&#x27;%</span>&#x27;) and gender = ? and entrydate between ? and ? order by update_time desc<br>==&gt; Parameters: 张(String), <span class="hljs-number">1</span>(Short), <span class="hljs-number">2010</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>(LocalDate), <span class="hljs-number">2020</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>(LocalDate)<br>&lt;==    Columns: id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time<br>&lt;==        Row: <span class="hljs-number">2</span>, zhangwuji, <span class="hljs-number">123456</span>, 张无忌, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>.jpg, <span class="hljs-number">2</span>, <span class="hljs-number">2015</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span> <span class="hljs-number">13</span>:<span class="hljs-number">40</span>:<span class="hljs-number">58</span>, <span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span> <span class="hljs-number">13</span>:<span class="hljs-number">40</span>:<span class="hljs-number">58</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">72557746</span>]<br>[Emp(id=<span class="hljs-number">2</span>, username=zhangwuji, password=<span class="hljs-number">123456</span>, name=张无忌, gender=<span class="hljs-number">1</span>, image=<span class="hljs-number">2</span>.jpg, job=<span class="hljs-number">2</span>, entrydate=<span class="hljs-number">2015</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>, deptId=<span class="hljs-number">2</span>, createTime=<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span>T13:<span class="hljs-number">40</span>:<span class="hljs-number">58</span>, updateTime=<span class="hljs-number">2024</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span>T13:<span class="hljs-number">40</span>:<span class="hljs-number">58</span>)]<br></code></pre></td></tr></table></figure><h6 id="参数名说明"><a href="#参数名说明" class="headerlink" title="参数名说明"></a>参数名说明</h6><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/Mybatis%E5%8F%82%E6%95%B0%E5%90%8D%E8%AF%B4%E6%98%8E.png"></p><h4 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h4><h5 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h5><ol><li><code>XML</code>映射文件的名称与<code>Mapper</code>接口名称一致，并且将<code>XML</code>映射文件和<code>Mapper</code>接口放置在相同包下（同包同名）。</li><li><code>XML</code>映射文件的<code>namespace</code>属性为<code>Mapper</code>接口全限定名一致。</li><li><code>XML</code>映射文件中<code>SQL</code>语句的<code>id</code>与<code>Mapper</code>接口中的方法名一致，并保持返回类型一致。</li></ol><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/XML%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E8%A7%84%E8%8C%83.png"></p><p>1.在下<code>resources</code>文件夹下新建一样的包<code>com/itheima/mapper</code>，在该包下新建同名的<code>XML</code>文件<code>EmpMapper.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--resultType: 单条记录封装的类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>        select * from emp where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) and gender = #&#123;gender&#125;<br>                            and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在<code>java</code>文件夹下的包<code>com/itheima/mappe</code>中的<code>EmpMapper.java</code>文件编写查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin , LocalDate end)</span>;<br></code></pre></td></tr></table></figure><p>3.测试方法不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Emp&gt; empList = empMapper.list(<span class="hljs-string">&quot;张&quot;</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">1</span>, LocalDate.of(<span class="hljs-number">2010</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    System.out.println(empList);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：使用<code>XML</code>映射文件本质是通过相同的包，接口名和方法名，在<code>XML</code>文件中找到对应的<code>SQL</code>语句去执行该操作。</p><h5 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h5><p><code>MybatisX</code>是一款基于<code>IDEA</code>的快速开发<code>Mybatis</code>的插件，为效率而生。</p><p>安装：</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/MyBatisX%E5%AE%89%E8%A3%85.png"></p><p>使用<code>Mybatis</code>的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的<code>SQL</code>功能，建议使用<code>XML</code>来配置映射语句。</p><p>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></p><h4 id="Mybatis动态SQL"><a href="#Mybatis动态SQL" class="headerlink" title="Mybatis动态SQL"></a>Mybatis动态SQL</h4><h5 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h5><p>随着用户的输入或外部条件的变化而变化的<code>SQL</code>语句，称为动态<code>SQL</code>。</p><h5 id><a href="#" class="headerlink" title="&lt;if&gt;"></a><code>&lt;if&gt;</code></h5><p><code>&lt;if&gt;</code>：用于判断条件是否成立。使用<code>test</code>属性进行条件判断，如果条件为<code>true</code>，则拼接<code>SQL</code>。</p><p><code>&lt;where&gt;</code>：<code>where</code>元素只会在子元素有内容的情况下才插入<code>where</code>子句。而且会自动去除子句的开头的<code>AND</code>或<code>OR</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>    select * from emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>            and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//动态条件查询</span><br><span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String name, Short gender, LocalDate begin , LocalDate end)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//根据条件查询员工</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Emp&gt; empList = empMapper.list(<span class="hljs-string">&quot;张&quot;</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">1</span>, LocalDate.of(<span class="hljs-number">2010</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>), LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>    <span class="hljs-comment">//List&lt;Emp&gt; empList = empMapper.list(&quot;张&quot;, null, null, null);</span><br>    <span class="hljs-comment">//List&lt;Emp&gt; empList = empMapper.list(&quot;张&quot;, (short)1, null, null);</span><br>    <span class="hljs-comment">//List&lt;Emp&gt; empList = empMapper.list(null, (short)1, null, null);</span><br>    <span class="hljs-comment">//List&lt;Emp&gt; empList = empMapper.list(null, null, null, null);</span><br>    System.out.println(empList);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h6><p>案例说明：动态更新员工信息，如果更新时传递有值，则更新；如果更新时没有传递值，则不更新。</p><p><code>&lt;set&gt;</code>：动态地在行首插入<code>SET</code>关键字，并会删掉额外的逗号。（用在<code>update</code>语句中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 动态更新员工--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update2&quot;</span>&gt;</span><br>    update emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null&quot;</span>&gt;</span>username = #&#123;username&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;job != null&quot;</span>&gt;</span>job = #&#123;job&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;entrydate != null&quot;</span>&gt;</span>entrydate = #&#123;entrydate&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;deptId != null&quot;</span>&gt;</span>dept_id = #&#123;deptId&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span>update_time = #&#123;updateTime&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//动态更新员工</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update2</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//动态更新员工</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//构造员工对象</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>();<br>    emp.setId(<span class="hljs-number">22</span>);<br>    emp.setUsername(<span class="hljs-string">&quot;Tom222333&quot;</span>);<br>    emp.setName(<span class="hljs-string">&quot;汤姆222&quot;</span>);<br>    emp.setGender((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<br>    emp.setUpdateTime(LocalDateTime.now());<br><br>    <span class="hljs-comment">//执行更新员工操作</span><br>    empMapper.update2(emp);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="-1"><a href="#-1" class="headerlink" title="&lt;foreach&gt;"></a><code>&lt;foreach&gt;</code></h5><p>属性：</p><ul><li><code>collection</code>：集合名称。</li><li><code>item</code>：集合遍历出来的元素&#x2F;项。</li><li><code>separator</code>：每一次遍历使用的分隔符。</li><li><code>open</code>：遍历开始前拼接的片段。</li><li><code>close</code>：遍历结束后拼接的片段。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--批量删除员工 (18,19,20)--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        collection: 遍历的集合，和参数名保持一致</span><br><span class="hljs-comment">        item: 遍历出来的元素，一个变量名（随意取值）</span><br><span class="hljs-comment">        separator: 分隔符</span><br><span class="hljs-comment">        open: 遍历开始前拼接的SQL片段</span><br><span class="hljs-comment">        close: 遍历结束后拼接的SQL片段</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>    delete from emp where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//批量删除员工</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(List&lt;Integer&gt; ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//批量删除员工 - 13,14,15</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteByIds</span><span class="hljs-params">()</span>&#123;<br>    List&lt;Integer&gt; ids = Arrays.asList(<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>);<br>    empMapper.deleteByIds(ids);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="和"><a href="#和" class="headerlink" title="&lt;sql&gt;和&lt;include&gt;"></a><code>&lt;sql&gt;</code>和<code>&lt;include&gt;</code></h5><p><code> &lt;sql&gt;</code>：定义可重用的<code>SQL</code>片段。<code>id</code>指定唯一标识。</p><p> <code>&lt;include&gt;</code>：通过属性<code>refid</code>，指定包含的<code>SQL</code>片段。</p><p><img src="/2024/10/20/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMySQL%E5%92%8CMyBatis/MyBatis%E7%9A%84SQL%E7%89%87%E6%AE%B5.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;commonSelect&quot;</span>&gt;</span><br>    select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time<br>    from emp<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;commonSelect&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;begin != null and end != null&quot;</span>&gt;</span><br>            and entrydate between #&#123;begin&#125; and #&#123;end&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    order by update_time desc<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb后端开发：Maven和SpringBoot</title>
    <link href="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/"/>
    <url>/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/</url>
    
    <content type="html"><![CDATA[<h2 id="Web后端开发"><a href="#Web后端开发" class="headerlink" title="Web后端开发"></a>Web后端开发</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p><code>Maven</code>是<code>apache</code>旗下的一个开源项目，是一款用于管理和构建<code>Java</code>项目的工具。<code>Maven</code>基于项目对象模型(<code>POM</code>)的概念，通过一小段描述信息来管理项目的构建。</p><p>官网：<a href="http://maven.apache.org/">http://maven.apache.org/</a></p><p>【<code>Apache</code>软件基金会】成立于1999年7月，是目前世界上最大的最受欢迎的开源软件基金会，也是一个专门为支持开源项目而生的非盈利性组织。</p><p>开源项目：<a href="https://www.apache.org/index.html#projects-list">https://www.apache.org/index.html#projects-list</a></p><h4 id="Maven流程"><a href="#Maven流程" class="headerlink" title="Maven流程"></a>Maven流程</h4><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven.png"></p><p>仓库：用于存储资源，管理各种<code>jar</code>包。</p><ul><li>本地仓库：自己计算机上的一个目录。</li><li>中央仓库：由<code>Maven</code>团队维护的全球唯一的。 仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库（私服）：一般由公司团队搭建的私有仓库。（一般使用阿里云的私服：<a href="http://maven.aliyun.com/nexus/content/groups/public/%EF%BC%89">http://maven.aliyun.com/nexus/content/groups/public/）</a></li></ul><h4 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h4><p>1.依赖管理：管理项目依赖的资源(<code>jar</code>包)，避免版本冲突问题。<code>Maven</code>在<code>pom.xml</code>文件中的<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>、<code>&lt;dependency&gt;&lt;/dependency&gt;</code>标签下定义依赖的资源。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9A%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.png"></p><p>2.统一项目结构：提供标准、统一的项目结构。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9A%E7%BB%9F%E4%B8%80%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><p>3.项目构建：标准跨平台（<code>Linux</code>、<code>Windows</code>、<code>MacOS</code>）的自动化项目构建方式。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9A%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA.png"></p><h4 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h4><p>参考安装链接：<a href="https://blog.csdn.net/MSDCP/article/details/127680844">全站最全Maven下载安装配置教学（2024更新…全版本）建议收藏…赠送IDEA配置Maven教程-CSDN博客</a></p><p>1.解压<code>apache-maven-3.6.1-bin.zip</code>（安装最新版本即可）。</p><p>2.配置本地仓库：修改<code>conf/settings.xml</code>中的<code>&lt;localRepository&gt;</code>为一个指定目录。在解压的<code>Maven</code>目录下新建<code>mvn_repo</code>文件夹，将该文件夹作为本地仓库的目录。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Programs\apache-maven-3.9.9\mvn_repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span> <span class="hljs-comment">&lt;!-- 配置本地仓库 --&gt;</span><br></code></pre></td></tr></table></figure><p>3.配置阿里云私服：修改<code>conf/settings.xml</code>中的<code>&lt;mirrors&gt;</code>标签，为其添加如下子标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4.配置环境变量: <code>MAVEN_HOME</code>为<code>maven</code>的解压目录，并将其<code>bin</code>目录加入<code>PATH</code>环境变量。</p><p>5.测试是否安装成功：<code>mvn -v</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\<span class="hljs-title">srr18</span>&gt;<span class="hljs-title">mvn</span> -<span class="hljs-title">v</span></span><br><span class="hljs-function"><span class="hljs-title">Apache</span> <span class="hljs-title">Maven</span> 3.9.9 (8<span class="hljs-title">e8579a9e76f7d015ee5ec7bfcdc97d260186937</span>)</span><br><span class="hljs-function"><span class="hljs-title">Maven</span> <span class="hljs-title">home</span>: <span class="hljs-title">D</span>:\<span class="hljs-title">Programs</span>\<span class="hljs-title">apache</span>-<span class="hljs-title">maven</span>-3.9.9</span><br><span class="hljs-function"><span class="hljs-title">Java</span> <span class="hljs-title">version</span>: 21.0.4, <span class="hljs-title">vendor</span>: <span class="hljs-title">Oracle</span> <span class="hljs-title">Corporation</span>, <span class="hljs-title">runtime</span>: <span class="hljs-title">D</span>:\<span class="hljs-title">Programs</span>\<span class="hljs-title">Java</span>\<span class="hljs-title">jdk</span>-21</span><br><span class="hljs-function"><span class="hljs-title">Default</span> <span class="hljs-title">locale</span>: <span class="hljs-title">zh_CN</span>, <span class="hljs-title">platform</span> <span class="hljs-title">encoding</span>: <span class="hljs-title">UTF</span>-8</span><br><span class="hljs-function"><span class="hljs-title">OS</span> <span class="hljs-title">name</span>: &quot;<span class="hljs-title">windows</span> 11&quot;, <span class="hljs-title">version</span>: &quot;10.0&quot;, <span class="hljs-title">arch</span>: &quot;<span class="hljs-title">amd64</span>&quot;, <span class="hljs-title">family</span>: &quot;<span class="hljs-title">windows</span>&quot;</span><br></code></pre></td></tr></table></figure><h4 id="IDEA集成Maven"><a href="#IDEA集成Maven" class="headerlink" title="IDEA集成Maven"></a>IDEA集成Maven</h4><h5 id="配置Maven环境"><a href="#配置Maven环境" class="headerlink" title="配置Maven环境"></a>配置Maven环境</h5><p>1.新建<code>Empty Project</code>，打开<code>Project Structure</code>配置项目的<code>SDK</code>和<code>Language level</code>为自己的<code>Java</code>版本。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83-%E6%96%B0%E5%BB%BA%E7%A9%BA%E9%A1%B9%E7%9B%AE.png"></p><p>2.<code>Settings</code>-&gt;<code>Build, Execution, Deployment</code>-&gt;<code>Maven</code>，按照下图所示设置<code>Maven</code>路径。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E9%85%8D%E7%BD%AEMaven%E7%8E%AF%E5%A2%83-%E8%AE%BE%E7%BD%AEMaven%E8%B7%AF%E5%BE%84.png"></p><p><code>Settings</code>-&gt;<code>Build, Execution, Deployment</code>-&gt;<code>Maven</code>-&gt;<code>Runner</code>，设置<code>JRE</code>，我是默认<code>Use Project JDK</code>。</p><p>3.<code>Settings</code>-&gt;<code>Build, Execution, Deployment</code>-&gt;<code>Compiler</code>-&gt;<code>Java Compiler</code>，设置<code>Project bytecode version</code>，我这里是<code>same as language level</code>（新版本的IDEA不用修改，旧版本的改成和<code>JDK</code>对应版本就行）。</p><p>【注意】上述是局部配置，如果需要全局配置，则<code>Customize</code>-&gt;<code>All setting...</code>里面修改即可。关闭当前工程项目，再重新打开<code>IDEA</code>即可出现<code>Customize</code>。</p><h5 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h5><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><p>1.<code>new</code>-&gt;<code>Module</code>，选择<code>Java</code>，<code>Build system</code>选择<code>Maven</code>，点击<code>create</code>创建完成。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%96%B9%E6%B3%951%EF%BC%89-%E6%96%B0%E5%BB%BAModule.png"></p><p>2.得到的<code>Maven</code>项目结构如下图所示，在<code>test</code>文件夹下可以新建目录<code>resources</code>，存放项目资源。在<code>src</code>-&gt;<code>main</code>-&gt;<code>java</code>下新建<code>package</code>，然后新建<code>class</code>，编写代码，即可运行该程序。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%96%B9%E6%B3%951%EF%BC%89-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><p>3.如果需要使用<code>Junit</code>进行测试，则需要在<code>pom.xml</code>文件下配置依赖。然后右键运行即可。可以在<code>maven</code>面板中选择该项目-&gt;<code>Lifecycle</code>-&gt;<code>compile</code>进行编译，产生的文件会在和<code>src</code>同级的<code>target</code>目录下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 依赖配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>XML<br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h6><p>参考链接：<a href="https://blog.csdn.net/m0_53190754/article/details/136995356">2024最新maven安装+配置+创建+导入+依赖管理一条龙教程（针对IDEA2023以上，以及jdk17，maven3.9.6）_idea2024创建maven项目-CSDN博客</a></p><p>1.<code>new</code>-&gt;<code>Module</code>，选择<code>Maven Archetype</code>，<code>Archetype</code>选择<code>org.apache.maven.archetypes:maven-archetype-quickstart</code>，点击<code>create</code>创建完成。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%96%B9%E6%B3%952%EF%BC%89-%E6%96%B0%E5%BB%BAModule.png"></p><p>2.得到的<code>Maven</code>项目结构如下图所示，在<code>main</code>和<code>test</code>文件夹下可以新建目录<code>resources</code>，存放项目资源。在<code>src</code>-&gt;<code>main</code>-&gt;<code>java</code>下有默认创建好的包，包下有<code>App.java</code>文件，可以右键运行。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%96%B9%E6%B3%952%EF%BC%89-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><h6 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h6><p><code>Maven</code>中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。使用坐标来定义项目或引入项目中需要的依赖。</p><p><code>Maven</code>坐标主要组成：</p><ul><li><code>groupId</code>：定义当前<code>Maven</code>项目隶属组织名称（通常是域名反写，例如：<code>com.itheima</code>）。</li><li><code>artifactId</code>：定义当前<code>Maven</code>项目名称（通常是模块名称，例如 <code>order-service</code>、<code>goods-service</code>）。</li><li><code>version</code>：定义当前项目版本号。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="导入Maven项目"><a href="#导入Maven项目" class="headerlink" title="导入Maven项目"></a>导入Maven项目</h5><h6 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h6><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%AF%BC%E5%85%A5Maven%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%96%B9%E6%B3%951%EF%BC%89.png"></p><h6 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h6><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%AF%BC%E5%85%A5Maven%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%96%B9%E6%B3%952%EF%BC%89.png"></p><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>Maven依赖仓库：</p><p><a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></p><h5 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h5><p>依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</p><p>配置：</p><ol><li>在<code>pom.xml</code>中编写<code>&lt;dependencies&gt;</code>标签。</li><li>在<code>&lt;dependencies&gt;</code>标签中使用<code>&lt;dependency&gt;</code>引入坐标。</li><li>定义坐标的<code>groupId</code>，<code>artifactId</code>，<code>version</code>。</li><li>点击刷新按钮（右上角），或者在<code>Maven</code>面板中刷新，引入最新加入的坐标。</li></ol><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven%E4%BE%9D%E8%B5%96%E9%85%8D%E7%BD%AE.png"></p><p>注意：</p><p>1.如果引入的依赖，在本地仓库不存在，将会连接远程仓库&#x2F;中央仓库，然后下载依赖。（这个过程会比较耗时，耐心等待）</p><p>2.如果不知道依赖的坐标信息，可以到<a href="https://mvnrepository.com/%E4%B8%AD%E6%90%9C%E7%B4%A2%E3%80%82">https://mvnrepository.com/中搜索。</a></p><h5 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h5><p>依赖具有传递性：</p><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系。</p><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92.png"></p><p>排除依赖：排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。使用<code>&lt;exclusion&gt;&lt;/exclusion&gt;</code>排除资源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-projectB<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h5><p>依赖的<code>jar</code>包，默认情况下，可以在任何地方使用。可以通过<code>&lt;scope&gt;&lt;/scope &gt;</code>设置其作用范围。</p><p>作用范围：</p><ul><li>主程序范围有效。（<code>main</code>文件夹范围内）</li><li>测试程序范围有效。（<code>test</code>文件夹范围内）</li><li>是否参与打包运行。（<code>package</code>指令范围内）</li></ul><table><thead><tr><th>scope值</th><th>主程序</th><th>测试程序</th><th>打包（运行）</th><th>范例</th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test&lt;/scope &gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p><code>Maven</code>的生命周期就是为了对所有的<code>maven</code>项目构建过程进行抽象和统一。</p><p><code>Maven</code>中有3套相互独立的生命周期：</p><ol><li><code>clean</code>：清理工作。</li><li><code>default</code>：核心工作，如：编译、测试、打包、安装、部署等。</li><li><code>site</code>：生成报告、发布站点等。</li></ol><p>每套生命周期包含一些阶段（<code>phase</code>），阶段是有顺序的，后面的阶段依赖于前面的阶段。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><p>重要的生命周期阶段：</p><ol><li><p><code>clean</code>：移除上一次构建生成的文件。</p><p><code>target</code>文件夹会被清除。</p></li><li><p><code>compile</code>：编译项目源代码。</p><p>生成<code>target</code>文件夹。</p></li><li><p><code>test</code>：使用合适的单元测试框架运行测试(<code>junit</code>)。</p><p>控制台会显示<code>TESTs</code>的测试运行结果。</p></li><li><p><code>package</code>：将编译后的文件打包，如：<code>jar</code>、<code>war</code>等。</p><p>在<code>target</code>文件夹下会新生成一堆文件夹和两个<code>jar</code>包：<code>maven-project01-1.0-SNAPSHOT.jar</code>和<code>maven-project01-1.0-SNAPSHOT-jar-with-dependencies.jar</code>，其中<code>maven-project01</code>是项目的名字，<code>1.0-SNAPSHOT</code>是版本。可以当作压缩文件，使用解压缩文件打开。<code>maven-project01-1.0-SNAPSHOT-jar-with-dependencies.jar</code>是包含依赖的包，在其<code>ch</code>文件夹下，就是该项目所有的依赖。</p></li><li><p><code>install</code>：安装项目到本地仓库。</p><p>在本地仓库目录下，可以找到该项目，如：<code>D:\Programs\apache-maven-3.9.9\mvn_repo\org\example\maven-project01</code>。控制台也会显示安装的地址：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMD">[INFO] Installing E:\<span class="hljs-number">2</span>_学习\JavaWeb\code\itheima_web_project\maven-project\pom.xml to D:\Programs\apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">9</span>\mvn_repo\com\itheima\maven-project\<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT\maven-project-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT.pom<br>[INFO] Installing E:\<span class="hljs-number">2</span>_学习\JavaWeb\code\itheima_web_project\maven-project\target\maven-project-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT.jar to D:\Programs\apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">9</span>\mvn_repo\com\itheima\maven-project\<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT\maven-project-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT.jar<br></code></pre></td></tr></table></figure></li></ol><p>注意：在同一套生命周期中，<strong>当运行后面的阶段时，前面的阶段都会运行</strong>。</p><p>执行指定生命周期的两种方式：</p><ol><li><p>在<code>IDEA</code>中，右侧的<code>maven</code>工具栏，选中对应的生命周期，双击执行。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Maven%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AE%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p></li><li><p>在命令行该项目路径下，通过命令执行。如：<code>mvn clean</code>、<code>mvn compile</code>、<code>mvn package</code>、<code>mvn test</code>。</p></li></ol><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>官网：<a href="https://spring.io/">Spring | Home</a></p><p><code>Spring</code>发展到今天已经形成了一种开发生态圈，<code>Spring</code>提供了若干个子项目，每个项目用于完成特定的功能。</p><h4 id="SpringBootWeb快速入门"><a href="#SpringBootWeb快速入门" class="headerlink" title="SpringBootWeb快速入门"></a>SpringBootWeb快速入门</h4><h5 id="方法一：-2"><a href="#方法一：-2" class="headerlink" title="方法一："></a>方法一：</h5><p>1.创建<code>springboot</code>工程，填写模块信息。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BASpringBoot%E5%B7%A5%E7%A8%8B%EF%BC%9A%E5%A1%AB%E5%86%99%E6%A8%A1%E5%9D%97%E4%BF%A1%E6%81%AF.png"></p><p>勾选<code>web</code>开发相关依赖。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BASpringBoot%E5%B7%A5%E7%A8%8B%EF%BC%9A%E5%8B%BE%E9%80%89%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96.png"></p><h5 id="方法二：-2"><a href="#方法二：-2" class="headerlink" title="方法二："></a>方法二：</h5><p>如果遇到网络不好，在<code>IDEA</code>里无法创建<code>SpringBoot</code>工程。可以通过访问<code>SpringBoot</code>的官网<a href="https://start.spring.io/">Spring Initializr</a>，在网页创建<code>SpringBoot</code>工程，下载压缩包后解压即可。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E5%88%9B%E5%BB%BASpringBoot%E5%B7%A5%E7%A8%8B%EF%BC%88%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%BD%91%E9%A1%B5%E5%88%9B%E5%BB%BA.png"></p><p>【报错】</p><p>（1）<code>Dependency &#39;org.springframework.boot:spring-boot-starter-test:&#39; not found</code></p><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_37970469/article/details/116905582">首次使用IDEA创建maven项目出现“Dependency ‘org.springframework.boot:spring-boot-starter-web:‘ not found”问题_dependency ‘org.springframework.boot:spring-boot-s-CSDN博客</a></p><p>这里指出需要在<code>pom.xml</code>文件下点击图标下载<code>maven</code>所需的仓库。</p><p><a href="https://blog.csdn.net/ambiyou/article/details/116604030">Dependency ‘org.springframework.boot:spring-boot-starter-test:not found 的解决方法_dependency ‘org.springframework.boot:spring-boot-s-CSDN博客</a></p><p>这个是点击下载键导包。</p><p>（2）<code>ERROR:JAVA: 错误: 不支持发行版本 5 解决方法</code></p><p>出现原因：本地配置jdk和idea默认的jdk不匹配</p><p>参考链接：</p><p><a href="https://blog.csdn.net/xiao_yi_xiao/article/details/119142118">ERROR:JAVA: 错误: 不支持发行版本 5 解决方法-CSDN博客</a></p><p>我是使用方法一更改的。让<code>SDK</code>、<code>language level</code>、<code>Project bytecode version</code>的版本是一致的。</p><h5 id="【补充：Project-bytecode-version、language-level、JDK】"><a href="#【补充：Project-bytecode-version、language-level、JDK】" class="headerlink" title="【补充：Project bytecode version、language level、JDK】"></a><strong>【补充：Project bytecode version、language level、JDK】</strong></h5><ul><li><a href="https://blog.csdn.net/qq_42914528/article/details/138910301">IDEA里的项目字节码版本和语言级别的区别_idea语言级别-CSDN博客</a></li><li><a href="https://blog.csdn.net/glpghz/article/details/107509987">Idea中Jdk和Language level的指定_languagelevel选哪个-CSDN博客</a></li></ul><p>出现版本不一致的解决方法：</p><ul><li><a href="https://blog.csdn.net/itanping/article/details/91574784">Java异常 #IntelliJ IDEA改了项目的Target bytecode version-CSDN博客</a></li><li><a href="https://blog.csdn.net/zhangzl4321/article/details/124567091">idea的language level含义和module的language level自动跳到5-CSDN博客</a></li></ul><p>（3）<code>java: 程序包org.springframework.boot不存在</code></p><p>参考链接：<a href="https://blog.csdn.net/Asa_Prince/article/details/127986463">解决java: 程序包org.springframework.boot不存在的解决方法_idea java: 程序包org.springframework.boot不存在-CSDN博客</a></p><p>使用上述链接的方法二可以解决：在该工程下命令行，通过<code>mvn -U idea:idea</code>命令重新加载<code>maven</code>包。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-function">E:\2<span class="hljs-title">_</span>学习\<span class="hljs-title">JavaWeb</span>\<span class="hljs-title">code</span>\<span class="hljs-title">itheima_web_project</span>\<span class="hljs-title">springboot</span>-<span class="hljs-title">web</span>-<span class="hljs-title">quickstart</span>&gt;<span class="hljs-title">mvn</span> -<span class="hljs-title">U</span> <span class="hljs-title">idea:idea</span></span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] <span class="hljs-title">Not</span> <span class="hljs-title">adding</span> <span class="hljs-title">resource</span> <span class="hljs-title">directory</span> <span class="hljs-title">as</span> <span class="hljs-title">it</span> <span class="hljs-title">has</span> <span class="hljs-title">an</span> <span class="hljs-title">incompatible</span> <span class="hljs-title">target</span> <span class="hljs-title">path</span> <span class="hljs-title">or</span> <span class="hljs-title">filtering</span>: <span class="hljs-title">E</span>:\2<span class="hljs-title">_</span>学习\<span class="hljs-title">JavaWeb</span>\<span class="hljs-title">code</span>\<span class="hljs-title">itheima_web_project</span>\<span class="hljs-title">springboot</span>-<span class="hljs-title">web</span>-<span class="hljs-title">quickstart</span>\<span class="hljs-title">src</span>\<span class="hljs-title">main</span>\<span class="hljs-title">resources</span></span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] <span class="hljs-title">jdkName</span> <span class="hljs-title">is</span> <span class="hljs-title">not</span> <span class="hljs-title">set</span>, <span class="hljs-title">using</span> [<span class="hljs-title">java</span> <span class="hljs-title">version21</span>.0.4] <span class="hljs-title">as</span> <span class="hljs-title">default</span>.</span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] ------------------------------------------------------------------------</span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] <span class="hljs-title">BUILD</span> <span class="hljs-title">SUCCESS</span></span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] ------------------------------------------------------------------------</span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] <span class="hljs-title">Total</span> <span class="hljs-title">time</span>:  43.804 <span class="hljs-title">s</span></span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] <span class="hljs-title">Finished</span> <span class="hljs-title">at</span>: 2024-10-10<span class="hljs-title">T15</span>:21:34+08:00</span><br><span class="hljs-function">[<span class="hljs-title">INFO</span>] ------------------------------------------------------------------------</span><br></code></pre></td></tr></table></figure><p>运行上述步骤还不行，可以<strong>重启</strong><code>IDEA</code>，然后就可以了。</p><p>（4）<code>Error: Cannot download &#39;https://start.spring.io/starter.zip?type=maven-project&amp;bootVersion=3.3.4&amp;groupId=com.itheima&amp;artifactId=springboot-web-test&amp;name=springboot-web-test&amp;version=0.0.1-SNAPSHOT&amp;language=java&amp;packageName=com.itheima&amp;javaVersion=17&amp;packaging=jar&amp;description=springboot-web-test&amp;dependencies=web&#39;: Connection reset , response: 200 OK</code></p><p>可能是网络不好，关掉重写再来一次就可以了。</p><p>2.定义<code>HelloController</code>类，添加方法<code>hello</code>，并添加注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello surourou&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello surourou&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.运行启动类<code>SpringbootWebQuickstartApplication</code>，打开浏览器使用链接<code>http://localhost:8080/hello</code>进行测试。</p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p><code>Hyper Text Transfer Protocol</code>，超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</p><p>特点：</p><ul><li>基于<code>TCP</code>协议：面向连接，安全。</li><li>基于请求-响应模型的：一次请求对应一次响应。</li><li><code>HTTP</code>协议是<strong>无状态</strong>的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。</li><li>缺点：<strong>多次请求间不能共享数据</strong>。</li><li>优点：速度快。</li></ul><h5 id="HTTP请求数据格式"><a href="#HTTP请求数据格式" class="headerlink" title="HTTP请求数据格式"></a>HTTP请求数据格式</h5><p>1.请求行：请求数据第一行（请求方式、资源路径、协议）。</p><p>2.请求头：第二行开始，格式<code>key：value</code>。</p><table><thead><tr><th>key</th><th align="left">value</th></tr></thead><tbody><tr><td>Host</td><td align="left">请求的主机名</td></tr><tr><td>User-Agent</td><td align="left">浏览器版本，例如Chrome浏览器的标识类似Mozilla&#x2F;5.0 … Chrome&#x2F;79，IE浏览器的标识类似Mozilla&#x2F;5.0 (Windows NT …) like Gecko</td></tr><tr><td>Accept</td><td align="left">表示浏览器能接收的资源类型，如text&#x2F;*，image&#x2F;<em>或者</em>&#x2F;*表示所有；</td></tr><tr><td>Accept-Language</td><td align="left">表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</td></tr><tr><td>Accept-Encoding</td><td align="left">表示浏览器可以支持的压缩类型，例如gzip, deflate等。</td></tr><tr><td>Content-Type</td><td align="left">请求主体的数据类型。</td></tr><tr><td>Content-Length</td><td align="left">HTTP请求主体的大小（单位：字节）。</td></tr></tbody></table><p>3.请求体：<code>POST</code>请求，存放请求参数。（请求头和请求体之间有空行。）</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/HTTP%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png"></p><p>注意：</p><ol><li>请求方式<code>GET</code>：请求参数在请求行中，没有请求体，如：<code>/brand/findAll?name=OPPO&amp;status=1</code>。<code>GET</code>请求大小是有限制的。</li><li>请求方式<code>POST</code>：请求参数在请求体中，<code>POST</code>请求大小是没有限制的。</li></ol><h5 id="HTTP响应格式"><a href="#HTTP响应格式" class="headerlink" title="HTTP响应格式"></a>HTTP响应格式</h5><p>1.响应行：响应数据第一行（协议、状态码、描述）。</p><table><thead><tr><th>状态码</th><th>状态</th></tr></thead><tbody><tr><td>1xx</td><td>响应中-临时状态码，表示请求已经接收，告诉客户端应该继续请求或者如果它已经完成则忽略它。</td></tr><tr><td>2xx</td><td>成功-表示请求已经被成功接收，处理已完成。</td></tr><tr><td>3xx</td><td>重定向-重定向到其他地方；让客户端再发起一次请求以完成整个处理。</td></tr><tr><td>4xx</td><td>客户端错误-处理发生错误，责任在客户端。如: 请求了不存在的资源、客户端未被授权、禁止访问等。</td></tr><tr><td>5xx</td><td>服务器错误-处理发生错误，责任在服务端。如：程序抛出异常等。</td></tr><tr><td>200</td><td>客户端请求成功。</td></tr><tr><td>404</td><td>请求资源不存在，般是URL输入有误，或者网站资源被删除了。</td></tr><tr><td>500</td><td>服务器发生不可预期的错误。</td></tr></tbody></table><p>2.响应头：第二行开始，格式<code>key：value</code>。</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>Content-Type</td><td>表示该响应内容的类型，例如text&#x2F;html，application&#x2F;json。</td></tr><tr><td>Content-Length</td><td>表示该响应内容的长度（字节数）。</td></tr><tr><td>Content-Encoding</td><td>表示该响应压缩算法，例如gzip。</td></tr><tr><td>Cache-Control</td><td>指示客户端应如何缓存，例如max-age&#x3D;300表示可以最多缓存300秒。</td></tr><tr><td>Set-Cookie</td><td>告诉浏览器为当前页面所在的域设置cookie。</td></tr></tbody></table><p>3.响应体：最后一部分，存放响应数据。（响应头和响应体之间有空行。）</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/HTTP%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F.png"></p><h4 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h4><p><code>Web</code>服务器是一个软件程序，对<code>HTTP</code>协议的操作进行封装，使得程序员不必直接对协议进行操作，让<code>Web</code>开发更加便捷。主要功能是部署<code>Web</code>项目，对外提供网上信息浏览服务。</p><h5 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h5><p>概念：<code>Tomcat</code>是<code>Apache</code>软件基金会一个核心项目，是一个开源免费的轻量级<code>Web</code>服务器，支持<code>Servlet/JSP</code>少量<code>JavaEE</code>规范。</p><ul><li><code>JavaEE</code>：<code>Java Enterprise Edition</code>，<code>Java</code>企业版。指<code>Java</code>企业级开发的技术规范总和。包含13项技术规范：<code>JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</code>。</li><li><code>JavaSE</code>：<code>Java</code>标准版。</li><li><code>JavaME</code>：<code>Java</code>小型版。</li></ul><p><code>Tomcat</code>也被称为<code>Web</code>容器、<code>Servlet</code>容器。<code>Servlet</code>程序需要依赖于<code>Tomcat</code>才能运行。</p><p>官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><h5 id="Tomcat基本使用"><a href="#Tomcat基本使用" class="headerlink" title="Tomcat基本使用"></a>Tomcat基本使用</h5><p>下载：官网下载，地址 <a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p>安装：绿色版，直接解压即可。</p><p>卸载：直接删除目录即可。</p><p>启动：双击<code>bin\startup.bat</code>。</p><p>控制台中文乱码：修改<code>conf/ logging.properties</code>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-attr">java.util.logging.ConsoleHandler.level</span> = <span class="hljs-string">ALL</span><br><span class="hljs-attr">java.util.logging.ConsoleHandler.formatter</span> = <span class="hljs-string">org.apache.juli.OneLineFormatter</span><br><span class="hljs-comment"># java.util.logging.ConsoleHandler.encoding = UTF-8</span><br><span class="hljs-attr">java.util.logging.ConsoleHandler.encoding</span> = <span class="hljs-string">GBK</span><br><span class="hljs-comment"># 修改为GBK，在控制台才不会出现中文乱码</span><br></code></pre></td></tr></table></figure><p>关闭：</p><ol><li>直接<code>×</code>掉运行窗口：强制关闭。</li><li><code>bin\shutdown.bat</code>：正常关闭。</li><li><code>Ctrl+C</code>：正常关闭。</li></ol><p><code>Tomcat</code>部署项目：将项目放置到<code>webapps</code>目录下， 即部署完成。</p><p>访问<code>Web</code>项目地址：<a href="http://localhost:8080/">http://localhost:8080/</a> ，若访问<code>webapps</code>目录下的项目，则通过 <a href="http://localhost:8080/demo/">http://localhost:8080/demo/</a> 访问到<code>webapps/demo/index.html</code>。</p><p>【常见问题】</p><p>1.启动窗口一闪而过：检查<code>JAVA_HOME</code>：<code>D:\Programs\Java\jdk-21</code>环境变量是否正确配置。</p><p>2.端口号冲突：找到对应程序，将其关闭掉。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Tomcat%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%86%B2%E7%AA%81.png"></p><p>配置<code>Tomcat</code>端口号（<code>conf/server.xml</code>）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Properties"><span class="hljs-attr">&lt;Connector</span> <span class="hljs-string">port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br>    <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span><br>    <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span><br>    <span class="hljs-attr">maxParameterCount</span>=<span class="hljs-string">&quot;1000&quot;</span><br>               <span class="hljs-attr">/&gt;</span><br></code></pre></td></tr></table></figure><p>注意：<code>HTTP</code>协议默认端口号为<code>80</code>，如果将<code>Tomcat</code>端口号改为<code>80</code>，则将来访问<code>Tomcat</code>时，将不用输入端口号 。</p><h5 id="SpringBootWeb入门程序解析"><a href="#SpringBootWeb入门程序解析" class="headerlink" title="SpringBootWeb入门程序解析"></a>SpringBootWeb入门程序解析</h5><p>起步依赖：</p><p><code>spring-boot-starter-web</code>：包含了<code>Web</code>应用开发所需要的常见依赖。</p><p><code>spring-boot-starter-test</code>：包含了单元测试所需要的常见依赖。</p><p>官方提供的starter：<a href="https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#using.build-systems.starters</a></p><p>SpringBootWeb内嵌<code>Tomcat</code>服务器：</p><p>基于<code>Springboot</code>开发的<code>Web</code>应用程序，内置了<code>tomcat</code>服务器，当启动类运行时，会自动启动内嵌的<code>tomcat</code>服务器。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/SpringBootWeb%E5%86%85%E5%B5%8CTomcat.png"></p><h3 id="SpringBoot请求"><a href="#SpringBoot请求" class="headerlink" title="SpringBoot请求"></a>SpringBoot请求</h3><h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h4><p><code>Postman</code>是一款功能强大的网页调试与发送网页<code>HTTP</code>请求的<code>Chrome</code>插件。</p><p>作用：常用于进行接口测试。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Postman.png"></p><p>注意：有时候使用<code>Postman</code>发送请求没有反应，返回数据一片空白，大概率不是程序的问题，重启一下<code>Postman</code>就好了。</p><h4 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h4><h5 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式"></a>原始方式</h5><p>在原始的<code>web</code>程序中，获取请求参数，需要通过<code>HttpServletRequest</code>对象手动获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<span class="hljs-comment">//在com.itheima.controller包下</span><br>    <span class="hljs-comment">//原始方式</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">//获取请求参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ageStr</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;age&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(ageStr);<br>        System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + age);<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;:&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/simpleParam?name=surourou&age=18">http://localhost:8080/simpleParam?name=surourou&amp;age=18</a></p><h5 id="SpringBoot方式"><a href="#SpringBoot方式" class="headerlink" title="SpringBoot方式"></a>SpringBoot方式</h5><p>参数名与形参变量名<strong>相同</strong>，定义形参即可接收参数。<code>SpringBoot</code>会自动进行类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//SpringBoot方式</span><br><span class="hljs-meta">@RequestMapping(&quot;/simpleParamSpringBoot&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParamSpringBoot</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>    System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;simpleParamSpringBoot : &quot;</span> + name + <span class="hljs-string">&quot;:&quot;</span> + age;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：使用该方式可以发送<code>GET</code>和<code>POST</code>请求，<code>POST</code>请求需要在<code>boy</code>里面填写键值信息。</p><p><code>Postman</code>的<code>GET</code>请求：<a href="http://localhost:8080/simpleParamSpringBoot?name=surourou&age=18">http://localhost:8080/simpleParamSpringBoot?name=surourou&amp;age=18</a></p><p>如果方法形参名称与请求参数名称不匹配，程序不会报错，但是传入的值会变成<code>null</code>。可以使用<code>@RequestParam</code>完成映射。注意： <code>@RequestParam</code>中的<code>required</code>属性默认为<code>true</code>，代表该请求参数必须传递，如果不传递将报错。 如果该参数是可选的，可以将<code>required</code>属性设置为<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//SpringBoot方式</span><br><span class="hljs-meta">@RequestMapping(&quot;/simpleParamSpringBoot&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParamSpringBoot</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;name&quot;)</span> String username, <span class="hljs-type">int</span> age)</span> &#123;<br>    System.out.println(username + <span class="hljs-string">&quot;:&quot;</span> + age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;simpleParamSpringBoot : &quot;</span> + username + <span class="hljs-string">&quot;:&quot;</span> + age;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h4><h5 id="简单实体对象"><a href="#简单实体对象" class="headerlink" title="简单实体对象"></a>简单实体对象</h5><p>简单实体对象：请求参数名与形参对象属性名相同，定义<code>POJO</code>接收即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<span class="hljs-comment">//在com.itheima.pojo包下</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<span class="hljs-comment">//1.定义构造函数</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<span class="hljs-comment">//2.设置setter方法</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;simplePojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplePojo</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;simplePojo : &quot;</span> + user;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/simplePojo?name=surourou&age=18">http://localhost:8080/simplePojo?name=surourou&amp;age=18</a></p><p>【注意】：<code>User</code>类必须定义构造函数或者<code>setter</code>方法，否则无法获取到传入的参数值，得到的值为默认值：<code>User&#123;name=&#39;null&#39;, age=0&#125;</code>。正常得到的值为：<code>User&#123;name=&#39;surourou&#39;, age=18&#125;</code>。</p><p>【注意】：虽然上述定义构造函数的方法可行，但是后续需要<code>new User</code>对象赋值时，会出现报错。所以<strong>最好还是使用定义setter和getter方法</strong>。</p><h5 id="复杂实体对象"><a href="#复杂实体对象" class="headerlink" title="复杂实体对象"></a>复杂实体对象</h5><p>复杂实体对象：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套<code>POJO</code>属性参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Address address;<br><br>    <span class="hljs-comment">//注意：只能使用有全部参数的构造函数，不能加入其他构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, Address address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br><span class="hljs-comment">/*    //不能加入这个构造函数</span><br><span class="hljs-comment">    public User(String name, int age) &#123;</span><br><span class="hljs-comment">        this.name = name;</span><br><span class="hljs-comment">        this.age = age;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, address=&quot;</span> + address +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Address</span><span class="hljs-params">(String province, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Address&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;province=&#x27;&quot;</span> + province + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, city=&#x27;&quot;</span> + city + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;complexPojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">complexPojo</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;simplePojo : &quot;</span> + user;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/complexPojo?name=surourou&age=18&address.province=zhanjiang&address.city=shenzhen">http://localhost:8080/complexPojo?name=surourou&amp;age=18&amp;address.province=zhanjiang&amp;address.city=shenzhen</a></p><p>得到的<code>User</code>结果：<code>User&#123;name=&#39;surourou&#39;, age=18, address=Address&#123;province=&#39;zhanjiang&#39;, city=&#39;shenzhen&#39;&#125;&#125;</code></p><h4 id="数组集合参数"><a href="#数组集合参数" class="headerlink" title="数组集合参数"></a>数组集合参数</h4><h5 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h5><p>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义<strong>数组类型形参</strong>即可接收参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;arrayParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(String[] hobby)</span> &#123;<br>    System.out.println(Arrays.toString(hobby));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;arrayParam : &quot;</span> + Arrays.toString(hobby);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/arrayParam?hobby=sing&hobby=rap">http://localhost:8080/arrayParam?hobby=sing&amp;hobby=rap</a></p><h5 id="集合参数"><a href="#集合参数" class="headerlink" title="集合参数"></a>集合参数</h5><p>集合参数：请求参数名与形参集合名称相同且请求参数为多个，<code>@RequestParam</code>绑定参数关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;listParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">listParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; hobby)</span> &#123;<br>    System.out.println(hobby);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;listParam : &quot;</span> + hobby;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/listParam?hobby=sing&hobby=rap">http://localhost:8080/listParam?hobby=sing&amp;hobby=rap</a></p><h4 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h4><p>日期参数：使用<code>@DateTimeFormat</code>注解完成日期参数格式转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;dateParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dateParam</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span> &#123;<br>    System.out.println(updateTime);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dateParam : &quot;</span> + updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：[日期参数](<a href="http://localhost:8080/dateParam?updateTime=2024-10-13">http://localhost:8080/dateParam?updateTime=2024-10-13</a> 10:55:08)</p><h4 id="JSON参数"><a href="#JSON参数" class="headerlink" title="JSON参数"></a>JSON参数</h4><p><code>JSON</code>参数：<code>JSON</code>数据键名与形参对象属性名相同，定义<code>POJO</code>类型形参即可接收参数，需要使用<code>@RequestBody</code>标识。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;jsonParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jsonParam : &quot;</span> + user;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/jsonParam">http://localhost:8080/jsonParam</a></p><p><code>body</code>内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;surourou&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;province&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhanjiang&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shenzhen&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h4><p>路径参数：通过请求<code>URL</code>直接传递参数，使用<code>&#123;…&#125;</code>来标识该路径参数，需要使用<code>@PathVariable</code>获取路径参数。</p><p>单个路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;path/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pathParam</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>    System.out.println(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pathParam : &quot;</span> + id;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/path/8">http://localhost:8080/path/8</a></p><p>多个路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;path/&#123;id&#125;/&#123;name&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">pathParam</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id, <span class="hljs-meta">@PathVariable</span> String name)</span> &#123;<br>    System.out.println(id + <span class="hljs-string">&quot;:&quot;</span> + name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;pathParam : &quot;</span> + id + <span class="hljs-string">&quot;:&quot;</span> + name;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Postman</code>请求：<a href="http://localhost:8080/path/8/surourou">http://localhost:8080/path/8/surourou</a></p><h3 id="SpringBoot响应"><a href="#SpringBoot响应" class="headerlink" title="SpringBoot响应"></a>SpringBoot响应</h3><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><p>类型：方法注解、类注解。</p><p>位置：<code>Controller</code>方法上&#x2F;类上。</p><p>作用：<strong>将方法返回值直接响应</strong>，如果返回值类型是<strong>实体对象&#x2F;集合</strong> ，将会转换为<strong>JSON格式</strong>响应。</p><p>说明：<code>@RestController = @Controller + @ResponseBody</code></p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/ResponseBody%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE.png"></p><h4 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h4><p>使用<code>Result</code>类统一响应结果格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> …<br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;密码错误&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> …<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>Result</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-comment">//统一响应结果封装类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer code ;<span class="hljs-comment">//1 成功 , 0 失败</span><br>    <span class="hljs-keyword">private</span> String msg; <span class="hljs-comment">//提示信息</span><br>    <span class="hljs-keyword">private</span> Object data; <span class="hljs-comment">//数据 data</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(Integer code, String msg, Object data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Object data)</span> &#123;Java<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, data);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">0</span>, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Result&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;code=&quot;</span> + code +<br>                <span class="hljs-string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, data=&quot;</span> + data +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>【注意】：一定要设置<code>Address</code>类的<code>setter</code>和<code>getter</code>方法，否则会报错：<code>com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class com.itheima.pojo.Address and no properties discovered to create BeanSerializer</code>。</p><p>参考链接：<a href="https://blog.csdn.net/m0_47074358/article/details/107424179">JAVA—-JSON序列化错误:InvalidDefinitionException: No serializer found for class org.apache.ibatis.execut_java 实体类 json序列号不对的提示信息-CSDN博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;<br><br><span class="hljs-comment">//@JsonIgnoreProperties(value = &#123; &quot;handler&quot; &#125;) //加入这句不会报错，但是返回的值为空</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Address</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Address</span><span class="hljs-params">(String province, String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProvince</span><span class="hljs-params">(String province)</span> &#123;<br>        <span class="hljs-built_in">this</span>.province = province;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCity</span><span class="hljs-params">(String city)</span> &#123;<br>        <span class="hljs-built_in">this</span>.city = city;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProvince</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> province;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCity</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> city;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Address&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;province=&#x27;&quot;</span> + province + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, city=&#x27;&quot;</span> + city + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello surourou&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;hello surourou&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/getAddr&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getAddr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        address.setProvince(<span class="hljs-string">&quot;zhanjiang&quot;</span>);<br>        address.setCity(<span class="hljs-string">&quot;shenzhen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, address);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/listAddr&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">listAddr</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Address&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        address1.setProvince(<span class="hljs-string">&quot;zhanjiang&quot;</span>);<br>        address1.setCity(<span class="hljs-string">&quot;shenzhen&quot;</span>);<br><br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>();<br>        address2.setProvince(<span class="hljs-string">&quot;guangzhou&quot;</span>);<br>        address2.setCity(<span class="hljs-string">&quot;foshan&quot;</span>);<br>        list.add(address1);<br>        list.add(address2);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;success&quot;</span>, list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>案例要求：加载并解析<code>emp.xml</code>文件中的数据，完成数据处理，并在页面展示。</p><p>1.在<code>pom.xml</code>文件中引入<code>dom4j</code>的依赖，用于解析<code>XML</code>文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 解析XML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>【注意】</strong>如果<code>IDEA</code>内无法加载依赖，使用<code>CMD</code>打开命令行，然后使用<code>mvn -U idea:idea</code>命令即可下载依赖。</p><p>2.引入资料中提供的解析<code>XML</code>的工具类<code>XMLParserUtils</code>、对应的实体类<code>Emp</code>、<code>XML</code>文件<code>emp.xml</code>（存放数据）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlParserUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">parse</span><span class="hljs-params">(String file , Class&lt;T&gt; targetClass)</span>  &#123;<br>        ArrayList&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;(); <span class="hljs-comment">//封装解析出来的数据</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取一个解析器对象</span><br>            <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>            <span class="hljs-comment">//2.利用解析器把xml文件加载到内存中,并返回一个文档对象</span><br>            <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file));<br>            <span class="hljs-comment">//3.获取到根标签</span><br>            <span class="hljs-type">Element</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> document.getRootElement();<br>            <span class="hljs-comment">//4.通过根标签来获取 user 标签</span><br>            List&lt;Element&gt; elements = rootElement.elements(<span class="hljs-string">&quot;emp&quot;</span>);<br><br>            <span class="hljs-comment">//5.遍历集合,得到每一个 user 标签</span><br>            <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>                <span class="hljs-comment">//获取 name 属性</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> element.element(<span class="hljs-string">&quot;name&quot;</span>).getText();<br>                <span class="hljs-comment">//获取 age 属性</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> element.element(<span class="hljs-string">&quot;age&quot;</span>).getText();<br>                <span class="hljs-comment">//获取 image 属性</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> element.element(<span class="hljs-string">&quot;image&quot;</span>).getText();<br>                <span class="hljs-comment">//获取 gender 属性</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> element.element(<span class="hljs-string">&quot;gender&quot;</span>).getText();<br>                <span class="hljs-comment">//获取 job 属性</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> element.element(<span class="hljs-string">&quot;job&quot;</span>).getText();<br><br>                <span class="hljs-comment">//组装数据</span><br>                Constructor&lt;T&gt; constructor = targetClass.getDeclaredConstructor(String.class, Integer.class, String.class, String.class, String.class);<br>                constructor.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">T</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> constructor.newInstance(name, Integer.parseInt(age), image, gender, job);<br><br>                list.add(object);<br>            &#125;Java<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String job;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(String name, Integer age, String image, String gender, String job)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.image = image;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.job = job;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> image;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImage</span><span class="hljs-params">(String image)</span> &#123;<br>        <span class="hljs-built_in">this</span>.image = image;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJob</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> job;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJob</span><span class="hljs-params">(String job)</span> &#123;<br>        <span class="hljs-built_in">this</span>.job = job;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, image=&#x27;&quot;</span> + image + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, job=&#x27;&quot;</span> + job + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- 在resources目录下 --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">emps</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">emp</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>金毛狮王<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>55<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span>https://web-framework.oss-cn-hangzhou.aliyuncs.com/web/1.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 1: 男, 2: 女 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 1: 讲师, 2: 班主任 , 3: 就业指导 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">job</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">job</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">emp</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">emp</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>白眉鹰王<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>65<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span>https://web-framework.oss-cn-hangzhou.aliyuncs.com/web/2.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">job</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">job</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">emp</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">emp</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>青翼蝠王<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>45<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span>https://web-framework.oss-cn-hangzhou.aliyuncs.com/web/3.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">job</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">job</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">emp</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">emp</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>紫衫龙王<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span>https://web-framework.oss-cn-hangzhou.aliyuncs.com/web/4.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">job</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">job</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">emp</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">emps</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.引入资料中提供的静态页面文件，放在<code>resources</code>下的<code>static</code>目录下。</p><p>【注意】<code>Springboot</code>项目的静态资源（<code>html</code>，<code>css</code>，<code>js</code>等前端资源）默认存放目录为：<code>classpath:/static</code> 、<code>classpath:/public</code>、 <code>classpath:/resources</code>。</p><p><code>classpath</code>是类路径，对于<code>Maven</code>来说，<code>resources</code>就是类路径。</p><p>4.编写<code>Controller</code>程序，处理请求，响应数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.加载并解析emp.xml</span><br>        <span class="hljs-comment">//注意文件路径不要有中文和空格，否则使用下面这句代码会出现错误。如果有中文路径，使用绝对路径访问。</span><br><span class="hljs-comment">//        String file = this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\2_学习\\JavaWeb\\code\\itheima_web_project\\springboot-web-test\\src\\main\\resources\\emp.xml&quot;</span>;<br>        <span class="hljs-comment">//拿到当前类resources目录下的emp.xml文件</span><br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br><br>        <span class="hljs-comment">//2.对数据进行转换处理：gender,job</span><br>        empList.stream().forEach(emp -&gt; &#123;<br>            <span class="hljs-comment">//处理gender：1男，2女</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(emp.getGender()))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(emp.getGender()))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//处理job：1讲师，2班主任，3就业指导</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(emp.getJob()))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(emp.getJob()))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(emp.getJob()))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;就业指导&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//3.响应数据</span><br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><h4 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h4><ol><li><code>controller</code>：控制层，接收前端发送的请求，对请求进行处理，并响应数据。</li><li><code>service</code>：业务逻辑层，处理具体的业务逻辑。</li><li><code>dao</code>：数据访问层(<code>Data Access Object</code>)（持久层），负责数据访问操作，包括数据的增、删、改、查。</li></ol><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//dao数据访问层，定义接口</span><br><span class="hljs-keyword">package</span> com.itheima.dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-comment">//获取员工列表数据</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//dao数据访问层，实现接口</span><br><span class="hljs-keyword">package</span> com.itheima.dao.impl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.加载并解析emp.xml</span><br>        <span class="hljs-comment">//注意文件路径不要有中文和空格，否则使用下面这句代码会出现错误。如果有中文路径，使用绝对路径访问。</span><br><span class="hljs-comment">//        String file = this.getClass().getClassLoader().getResource(&quot;emp.xml&quot;).getFile();</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\2_学习\\JavaWeb\\code\\itheima_web_project\\springboot-web-test\\src\\main\\resources\\emp.xml&quot;</span>;<br>        <span class="hljs-comment">//拿到当前类resources目录下的emp.xml文件</span><br>        System.out.println(file);<br>        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);<br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//service业务逻辑层，定义接口</span><br><span class="hljs-keyword">package</span> com.itheima.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-comment">//获取员工列表</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt;  <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//service业务逻辑层，实现接口</span><br><span class="hljs-keyword">package</span> com.itheima.service.impl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpDao</span> <span class="hljs-variable">empDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpDaoA</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Emp&gt; <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Emp&gt; empList = empDao.listEmp();<br><br>        <span class="hljs-comment">//2.对数据进行转换处理：gender,job</span><br>        empList.stream().forEach(emp -&gt; &#123;<br>            <span class="hljs-comment">//处理gender：1男，2女</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(emp.getGender()))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(emp.getGender()))&#123;<br>                emp.setGender(<span class="hljs-string">&quot;女&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//处理job：1讲师，2班主任，3就业指导</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(emp.getJob()))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;讲师&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;2&quot;</span>.equals(emp.getJob()))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;班主任&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;3&quot;</span>.equals(emp.getJob()))&#123;<br>                emp.setJob(<span class="hljs-string">&quot;就业指导&quot;</span>);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">return</span> empList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//controller控制层</span><br><span class="hljs-keyword">package</span> com.itheima.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">EmpService</span> <span class="hljs-variable">empService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpServiceA</span>();<br>    <span class="hljs-meta">@RequestMapping(&quot;listEmp&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">listEmp</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Emp&gt; empList = empService.listEmp();<br><br>        <span class="hljs-comment">//3.响应数据</span><br>        <span class="hljs-keyword">return</span> Result.success(empList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h4><p>内聚：软件中各个功能模块内部的功能联系。</p><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p><p>软件设计原则：<strong>高内聚低耦合</strong>。</p><p><strong>控制反转</strong>：<code> Inversion Of Control</code>，简称<code>IOC</code>。<strong>对象的创建控制权由程序自身转移到外部（容器）</strong>，这种思想称为控制反转。</p><p><strong>依赖注入</strong>： <code>Dependency Injection</code>，简称<code>DI</code>。容器为应用程序提供运行时，所<strong>依赖的资源</strong>，称之为依赖注入。</p><p><strong>Bean对象</strong>：<code>IOC</code><strong>容器中创建、管理的对象</strong>，称之为<code>bean</code>。</p><h4 id="IOC-DI入门"><a href="#IOC-DI入门" class="headerlink" title="IOC &amp; DI入门"></a>IOC &amp; DI入门</h4><p>1.<code>Service</code>层及<code>Dao</code>层的实现类，交给<code>IOC</code>容器管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将当前类交给IOC容器管理，成为IOC容器中的bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">//将当前类交给IOC容器管理，成为IOC容器中的bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpDaoA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpDao</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>2.为<code>Controller</code>及<code>Service</code>注入运行时，依赖的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//运行时，IOC容器会提供该类型的bean对象，并赋值给该变量，依赖注入</span><br>    <span class="hljs-keyword">private</span> EmpService empService;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//运行时，IOC容器会提供该类型的bean对象，并赋值给该变量，依赖注入</span><br>    <span class="hljs-keyword">private</span> EmpDao empDao;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h4><h5 id="Bean的声明"><a href="#Bean的声明" class="headerlink" title="Bean的声明"></a>Bean的声明</h5><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td><code>@Component</code></td><td>声明<code>bean</code>的基础注解</td><td>不属于以下三类时，用此注解</td></tr><tr><td><code>@Controller</code></td><td><code>@Component</code>的衍生注解</td><td>标注在控制器类上</td></tr><tr><td><code>@Service</code></td><td><code>@Component</code>的衍生注解</td><td>标注在业务类上</td></tr><tr><td><code>@Repository</code></td><td><code>@Component</code>的衍生注解</td><td>标注在数据访问类上（由于与<code>mybatis</code>整合，用的少）</td></tr></tbody></table><p>注意：</p><p>1.声明<code>bean</code>的时候，可以通过<code>value</code>属性指定<code>bean</code>的名字，如果没有指定，默认为<strong>类名首字母小写</strong>。如：<code>@Repository(value=&quot;daoA&quot;)/@Repository(&quot;daoA&quot;)</code>指定该数据访问类名字为<code>daoA</code>。</p><p>2.使用以上四个注解都可以声明<code>bean</code>，但是在<code>springboot</code>集成<code>web</code>开发中，声明控制器<code>bean</code>只能用<code>@Controller</code>。</p><h5 id="Bean组件扫描"><a href="#Bean组件扫描" class="headerlink" title="Bean组件扫描"></a>Bean组件扫描</h5><p>1.前面声明<code>bean</code>的四大注解，要想生效，还需要被<strong>组件扫描</strong>注解<code>@ComponentScan</code>扫描。</p><p>2.<code>@ComponentScan</code>注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解<code>@SpringBootApplication</code>中，默认扫描的范围是<strong>启动类所在包及其子包</strong>。如果<code>dao</code>不在<code>com.itheima</code>包下，则需要在启动类下声明<code>@ComponentScan(&#123;&quot;dao&quot;, &quot;com.itheima&quot;&#125;)</code>。</p><p><img src="/2024/10/14/JavaWeb%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9AMaven%E5%92%8CSpringBoot/Bean%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F%E8%8C%83%E5%9B%B4.png"></p><h4 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h4><h5 id="Bean注入"><a href="#Bean注入" class="headerlink" title="Bean注入"></a>Bean注入</h5><p><code>@Autowired</code>注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报出如下错误：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CMD"><span class="hljs-function">Description:</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Field</span> <span class="hljs-title">empService</span> <span class="hljs-title">in</span> <span class="hljs-title">com.itheima.controller.EmpController</span> <span class="hljs-title">required</span> <span class="hljs-title">a</span> <span class="hljs-title">single</span> <span class="hljs-title">bean</span>, <span class="hljs-title">but</span> 2 <span class="hljs-title">were</span> <span class="hljs-title">found</span>:</span><br><span class="hljs-function">- <span class="hljs-title">empServiceA</span>: <span class="hljs-title">defined</span> <span class="hljs-title">in</span> <span class="hljs-title">file</span> [<span class="hljs-title">E</span>:\2<span class="hljs-title">_</span>学习\<span class="hljs-title">JavaWeb</span>\<span class="hljs-title">code</span>\<span class="hljs-title">itheima_web_project</span>\<span class="hljs-title">springboot</span>-<span class="hljs-title">web</span>-<span class="hljs-title">test</span>\<span class="hljs-title">target</span>\<span class="hljs-title">classes</span>\<span class="hljs-title">com</span>\<span class="hljs-title">itheima</span>\<span class="hljs-title">service</span>\<span class="hljs-title">impl</span>\<span class="hljs-title">EmpServiceA.class</span>]</span><br><span class="hljs-function">- <span class="hljs-title">empServiceB</span>: <span class="hljs-title">defined</span> <span class="hljs-title">in</span> <span class="hljs-title">file</span> [<span class="hljs-title">E</span>:\2<span class="hljs-title">_</span>学习\<span class="hljs-title">JavaWeb</span>\<span class="hljs-title">code</span>\<span class="hljs-title">itheima_web_project</span>\<span class="hljs-title">springboot</span>-<span class="hljs-title">web</span>-<span class="hljs-title">test</span>\<span class="hljs-title">target</span>\<span class="hljs-title">classes</span>\<span class="hljs-title">com</span>\<span class="hljs-title">itheima</span>\<span class="hljs-title">service</span>\<span class="hljs-title">impl</span>\<span class="hljs-title">EmpServiceB.class</span>]</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">This</span> <span class="hljs-title">may</span> <span class="hljs-title">be</span> <span class="hljs-title">due</span> <span class="hljs-title">to</span> <span class="hljs-title">missing</span> <span class="hljs-title">parameter</span> <span class="hljs-title">name</span> <span class="hljs-title">information</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Action</span>:</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Consider</span> <span class="hljs-title">marking</span> <span class="hljs-title">one</span> <span class="hljs-title">of</span> <span class="hljs-title">the</span> <span class="hljs-title">beans</span> <span class="hljs-title">as</span> @<span class="hljs-title">Primary</span>, <span class="hljs-title">updating</span> <span class="hljs-title">the</span> <span class="hljs-title">consumer</span> <span class="hljs-title">to</span> <span class="hljs-title">accept</span> <span class="hljs-title">multiple</span> <span class="hljs-title">beans</span>, <span class="hljs-title">or</span> <span class="hljs-title">using</span> @<span class="hljs-title">Qualifier</span> <span class="hljs-title">to</span> <span class="hljs-title">identify</span> <span class="hljs-title">the</span> <span class="hljs-title">bean</span> <span class="hljs-title">that</span> <span class="hljs-title">should</span> <span class="hljs-title">be</span> <span class="hljs-title">consumed</span></span><br></code></pre></td></tr></table></figure><p>通过以下几种方案来解决：</p><p>1.<code>@Primary</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Primary</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<code>@Qualifier</code>：<code>@Autowired + @Qualifier(&quot;bean的名称&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;empServiceA&quot;)</span><br>    <span class="hljs-keyword">private</span> EmpService empService ;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<code>@Resource</code>：<code>@Resource(name=&quot;bean的名称&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpController</span> &#123;<br>    <span class="hljs-meta">@Resource(name = &quot;empServiceB&quot;)</span><br>    <span class="hljs-keyword">private</span> EmpService empService ;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Resource</code>与<code>@Autowired</code>区别：</p><p>1.<code>@Autowired</code>是<code>spring</code>框架提供的注解，而<code>@Resource</code>是<code>JDK</code>提供的注解。</p><p>2.<code>@Autowired</code>默认是按照类型注入，而<code>@Resource</code>默认是按照名称注入。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb前端开发</title>
    <link href="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="Web前端开发"><a href="#Web前端开发" class="headerlink" title="Web前端开发"></a>Web前端开发</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p><code>HTML</code>（HyperText Markup Language）：超文本标记语言。</p><p><strong>超文本</strong>：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p><p><strong>标记语言</strong>：由标签构成的语言。</p><p><code>HTML</code>标签都是预定义好的。例如：使用<code>&lt;a&gt;</code>展示超链接，使用<code>&lt;img&gt;</code>展示图片，<code>&lt;video&gt;</code>展示视频。</p><p><code>HTML</code>代码直接在浏览器中运行，<code>HTML</code>标签由浏览器解析。</p><h4 id="HTML结构标签"><a href="#HTML结构标签" class="headerlink" title="HTML结构标签"></a>HTML结构标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点</p><p>1.<code>HTML</code>标签不区分大小写。</p><p>2.<code>HTML</code>标签属性值单双引号都可以。</p><p>3.<code>HTML</code>语法松散。</p><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签&lt;img&gt;"></a>图片标签<code>&lt;img&gt;</code></h4><ul><li><code>src</code>：指定图像的url（绝对路径 &#x2F; 相对路径）</li><li><code>width</code>：图像的宽度（像素 &#x2F; 相对于父元素的百分比）</li><li><code>height</code>：图像的高度（像素 &#x2F; 相对于父元素的百分比）</li></ul><p>绝对路径：绝对磁盘路径（<code>D:/xxxx</code>）、绝对网络路径（<code>https://xxxx</code>）</p><p>相对路径：从当前文件开始查找。（<code>./</code> : 当前目录, <code>../</code> : 上级目录）</p><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签&lt;h1&gt;-&lt;h6&gt;"></a>标题标签<code>&lt;h1&gt;-&lt;h6&gt;</code></h4><p>h1 → h6 重要程度依次降低。</p><p>注意：<code>HTML</code>标签都是预定义好的，不能自己随意定义。</p><h4 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签&lt;hr&gt;"></a>水平线标签<code>&lt;hr&gt;</code></h4><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接&lt;a&gt;"></a>超链接<code>&lt;a&gt;</code></h4><ul><li><code>href</code>：指定资源访问的url。</li><li><code>target</code>：指定在何处打开资源链接。<code>_self</code>：默认值，在当前页面打开。<code>_blank</code>：在空白页面打开。</li></ul><p>注意：<code>text-decoration</code>：规定添加到文本的修饰，<code>none</code>表示定义标准的文本。使用<code>none</code>可以将超链接<code>&lt;a&gt;</code>的下划线和蓝色字体去除。</p><h4 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签&lt;video&gt;"></a>视频标签<code>&lt;video&gt;</code></h4><ul><li><code>src</code>：规定视频的<code>url</code>。</li><li><code>controls</code>：显示播放控件。<code>controls = controls</code>，属性和属性值一样，可以简写为<code>controls</code>。</li><li><code>width</code>：播放器的宽度。</li><li><code>height</code>：播放器的高度。</li></ul><h4 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签&lt;audio&gt;"></a>音频标签<code>&lt;audio&gt;</code></h4><ul><li><code>src</code>：规定音频的<code>url</code>。</li><li><code>controls</code>：显示播放控件。<code>controls = controls</code>，属性和属性值一样，可以简写为<code>controls</code>。</li></ul><h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签&lt;p&gt;"></a>段落标签<code>&lt;p&gt;</code></h4><p>段落内换行：<code>&lt;br&gt;</code></p><p>文本加粗标签：<code> &lt;b&gt;</code>（加粗）&#x2F; <code>&lt;strong&gt;</code>（强调）</p><p>在HTML中无论输入多少个空格，只会显示一个。 可以使用空格占位符：<code>&amp;nbsp;</code></p><p>设置段落的CSS样式：</p><ul><li><code>line-height</code>：设置行高。</li><li><code>text-indent</code>：定义第一个行内容的缩进。值为<code>2em</code>则为缩进两个字。</li><li><code>text-align</code>：规定元素中的文本的水平对齐方式。</li></ul><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局。</p><p>盒子模型组成：内容区域（<code>content</code>）、内边距区域（<code>padding</code>）、边框区域（<code>border</code>）、外边距区域（<code>margin</code>）。</p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p><h5 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a><strong>布局标签</strong></h5><p><code>div</code>和<code>span</code>是没有语义的布局标签。</p><ul><li><code>div</code>标签：一行只显示一个（独占一行），宽度默认是父元素的宽度，高度默认由内容撑开，可以设置宽高（<code>width</code>、<code>height</code>）。</li><li><code>span</code>标签：一行可以显示多个（组合行内元素），宽度和高度默认由内容撑开，不可以设置宽高（<code>width</code>、<code>height</code>）。</li></ul><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><table><thead><tr><th><strong>标签</strong></th><th><strong>描述</strong></th><th><strong>属性</strong></th></tr></thead><tbody><tr><td><code>&lt;table&gt;</code></td><td>定义表格整体，可以包裹多个<code>&lt;tr&gt;</code></td><td><code>border</code>：规定表格边框的宽度<br><code>width</code>：规定表格的宽度<br><code>cellspacing</code>: 规定单元之间的空间。</td></tr><tr><td><code>&lt;tr&gt;</code></td><td>表格的行，可以包裹多个<code>&lt;td&gt;</code></td><td></td></tr><tr><td><code>&lt;td&gt;</code></td><td>表格单元格（普通），可以包裹内容</td><td>如果是表头单元格，可以替换为 <code>&lt;th&gt;</code>（有居中加粗的效果）</td></tr></tbody></table><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><p>标签：<code>&lt;form&gt;</code></p><p>表单项：不同类型的<code>input</code>元素、下拉列表、文本域等。</p><ul><li><code>&lt;input&gt;</code>：定义表单项，通过<code>type</code>属性控制输入形式。</li><li><code> &lt;select&gt;</code>：定义下拉列表。</li><li><code>&lt;textarea&gt;</code>：定义文本域。</li></ul><p>属性：</p><ul><li><code>action</code>：当提交表单时向何处发送表单数据，即表单数据提交的<code>URL</code>地址。</li><li><code>method</code>：发送表单数据的方式。<code>GET</code>、<code>POST</code>。</li></ul><table><thead><tr><th><strong>type取值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>text</td><td>默认值，定义单行的输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>date&#x2F;time&#x2F;datetime-local</td><td>定义日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td>number</td><td>定义数字输入框</td></tr><tr><td>email</td><td>定义邮件输入框</td></tr><tr><td>hidden</td><td>定义隐藏域</td></tr><tr><td>submit &#x2F; reset &#x2F; button</td><td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td></tr></tbody></table><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><strong>CSS</strong></h3><p><code> CSS</code>（Cascading Style Sheet）：层叠样式表，用于控制页面的样式（表现）。</p><h4 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a><strong>CSS引入方式</strong></h4><p>1.<strong>行内样式</strong>：写在标签的style属性中（不推荐）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;xxx: xxx; xxx: xxx;&quot;</span>&gt;</span>中国新闻网<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.<strong>内嵌样式</strong>：写在<code>style</code>标签中（可以写在页面任何位置，但通常约定写在<code>head</code>标签中）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">     xxx: xxx; </span><br><span class="language-css">     xxx: xxx;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.<strong>外联样式</strong>：写在一个单独的<code>.css</code>文件中（需要通过<code>link</code>标签在网页中引入）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<br>   xxx: xxx; <br>   xxx: xxx;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/news.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a><strong>CSS选择器</strong></h4><p>CSS选择器用来选取需要设置样式的元素（标签）。</p><p><strong>1.元素选择器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">h1 &#123;<br>    color: red;<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> Hello CSS <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.<code>id</code>选择器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">#hid &#123;<br>    color: red;<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hid&quot;</span>&gt;</span> CSS id Selector<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.类选择器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.cls &#123;<br>    color: red;<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>CSS class Selector<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>优先级：<code>id</code>选择器 &gt; 类选择器 &gt; 元素选择器</strong></p><h4 id="颜色color的表示方式"><a href="#颜色color的表示方式" class="headerlink" title="颜色color的表示方式"></a><strong>颜色color的表示方式</strong></h4><table><thead><tr><th><strong>表示方式</strong></th><th><strong>表示含义</strong></th><th><strong>取值</strong></th></tr></thead><tbody><tr><td>关键字</td><td>预定义的颜色名</td><td>red、green、blue…</td></tr><tr><td>rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td></tr><tr><td>十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000、#ff0000、#cccccc，简写：#000、#ccc</td></tr></tbody></table><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><code>JavaScript</code>是一门跨平台、面向对象的脚本语言。是用来控制网页行为的，它能使网页可交互。</p><p><code>ECMAScript6(ES6)</code> 是最主流的<code>JavaScript</code>版本（发布于2015年)。</p><h4 id="JavaScript引入方式"><a href="#JavaScript引入方式" class="headerlink" title="JavaScript引入方式"></a>JavaScript引入方式</h4><p>1.内部脚本：将<code>JS</code>代码定义在<code>HTML</code>页面中。<code>JavaScript</code>代码必须位于<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签之间。在HTML文档中，可以在任意地方，放置任意数量的<code>&lt;script&gt;</code>。一般会把脚本置于<code>&lt;body&gt;</code>元素的底部，可改善显示速度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.外部脚本：将 JS代码定义在外部<code>JS</code>文件中，然后引入到<code>HTML</code>页面中。外部JS文件中，只包含<code>JS</code>代码，不包含<code>&lt;script&gt;</code>标签。<code>&lt;script&gt;</code>标签不能自闭合。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="JavaScript基础语法"><a href="#JavaScript基础语法" class="headerlink" title="JavaScript基础语法"></a>JavaScript基础语法</h4><p><code>Javascript</code>区分大小写。每行结尾的分号可有可无。大括号表示代码块。</p><h5 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h5><ol><li><code>window.alert()</code>写入警告框。</li><li><code>document.write()</code>写入HTML输出。</li><li><code>console.log()</code>写入浏览器控制台。</li></ol><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p><code>JavaScript</code>中用<code>var</code>关键字（<code>variable</code>的缩写）来声明变量 。<code>JavaScript</code>是<strong>弱类型语言</strong>，变量可以存放不同类型的值 。</p><p>变量名规则：组成字符可以是任何字母、数字、下划线（<code>_</code>）或美元符号（<code>$</code>），数字不能开头。</p><p>注意：</p><ul><li><code>ECMAScript6</code>新增了<code>le</code>关键字来定义变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>关键字<strong>所在的代码块内有效</strong>，<strong>且不允许重复声明</strong>。</li><li><code>ECMAScript6</code>新增了<code>const</code>关键字，用来声明一个<strong>只读的常量</strong>。一旦声明，常量的值就不能改变。</li></ul><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p><code>JavaScript</code>中分为原始类型和引用类型。</p><p>原始类型：</p><ol><li><code>number</code>：数字（整数、小数、<code>NaN</code>(<code>Not a Number</code>)）。</li><li><code>string</code>：字符串，单双引皆可。</li><li><code>boolean</code>：布尔。<code>true</code>，<code>false</code>。</li><li><code>null</code>：对象为空。</li><li><code>undefined</code>：当声明的变量未初始化时，该变量的默认值是<code>undefined</code>。</li></ol><p>使用<code>typeof</code>运算符可以获取数据类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> a);<br></code></pre></td></tr></table></figure><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>1.字符串类型转为数字：将字符串字面值转为数字。 如果字面值不是数字，则转为<code>NaN</code>。</p><p>2.其他类型转为<code>boolean</code>：</p><ul><li><code>Number</code>：<code>0</code>和<code>NaN</code>为<code>false</code>，其他（包括负数）均转为<code>true</code>。</li><li><code>String</code>：空字符串为<code>false</code>，其他均转为<code>true</code>。</li><li><code>Null</code>和<code>undefined</code>：均转为<code>false</code>。</li></ul><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p><code>==</code>会进行类型转换，<code>===</code>不会进行类型转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">alert</span>(a == <span class="hljs-string">&quot;10&quot;</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_">alert</span>(a === <span class="hljs-string">&quot;10&quot;</span>); <span class="hljs-comment">//false</span><br><span class="hljs-title function_">alert</span>(a === <span class="hljs-number">10</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p><code>JavaScript</code>函数通过<code>function</code>关键字进行定义。</p><p>注意：</p><ul><li>形式参数不需要类型。因为<code>JavaScript</code>是弱类型语言。</li><li>返回值也不需要定义类型，可以在函数内部直接使用<code>return</code>返回即可。</li><li><code>JavaScript</code>中，函数调用可以传递任意个数的参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//定义方式一</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a , b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-comment">//定义方式二</span><br><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">a , b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>**箭头函数(ES6)**：用来简化函数定义语法。具体形式为: <code> (…) =&gt; &#123; … &#125;</code> ，如果需要给箭头函数起名字：<code>var  xxx = (…) =&gt; &#123; … &#125;</code>。</p><h4 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h4><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//定义方式一</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><span class="hljs-comment">//定义方式二</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<span class="hljs-comment">//可以访问</span><br></code></pre></td></tr></table></figure><p>注意：<code>JavaScript</code>中的数组相当于<code>Java</code>中集合，数组的长度是可变的，而<code>JavaScript</code>是弱类型，所以可以存储任意的类型的数据。</p><p>属性：</p><p><code>length</code>：  设置或返回数组中元素的数量。</p><p>方法：</p><ul><li><code>forEach()</code>：遍历数组中的每个有值的元素，并调用一次传入的函数。</li><li><code>push()</code>：将新元素添加到数组的末尾，并返回新的长度。</li><li><code>splice()</code>：从数组中删除元素。</li></ul><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//定义方式一</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello String&quot;</span>);<br><span class="hljs-comment">//定义方式二</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello String&quot;</span>;<br></code></pre></td></tr></table></figure><p>属性：</p><p><code>length</code>：字符串的长度。</p><p>方法：</p><ul><li><code>charAt()</code>：返回在指定位置的字符。</li><li><code>indexOf()</code>：检索字符串。</li><li><code>trim()</code>：去除字符串两边的空格。</li><li><code>substring()</code>：提取字符串中两个指定的索引号之间的字符。</li></ul><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><p><strong>JavaScript自定义对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> user = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Tom&quot;</span>, <br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>, <br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">eat</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用膳~&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//或：</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    eat()&#123;</span><br><span class="hljs-comment">        alert(&quot;用膳~&quot;);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>JSON</code>：<code>JavaScript Object Notation</code>，<code>JavaScript</code>对象标记法。<code>JSON</code>是通过<code>JavaScript</code>对象标记法书写的文本。</p><p>注意：</p><ul><li><code>JSON</code>的属性名必须使用<strong>双引号</strong>包裹。</li><li>属性值<code>value</code>的数据类型为：数字（整数或浮点数）、字符串（在双引号中）、逻辑值（<code>true</code>或<code>false</code>）、数组（在方括号中）、对象（在花括号中）、<code>null</code>。</li></ul><p><strong>JSON字符串转为JS对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> userStr = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;Jerry&quot;,&quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;&#x27;</span>;<br><span class="hljs-keyword">var</span> jsObject = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(userStr);<br></code></pre></td></tr></table></figure><p><strong>JS对象转为JSON字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> jsonStr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(jsObject);<br></code></pre></td></tr></table></figure><h5 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h5><p>概念：<code>Browser Object Model</code>浏览器对象模型，允许<code>JavaScript</code>与浏览器对话，<code> JavaScript</code>将浏览器的各个组成部分封装为对象。</p><p>组成：</p><ol><li><p><code>Window</code>：浏览器窗口对象。</p><p>获取：直接使用<code>window</code>，其中<code>window.</code>可以省略。</p><p>属性：</p><p><code>history</code>：对<code>History</code>对象的只读引用。</p><p><code>location</code>：用于窗口或框架的<code>Location</code>对象。</p><p><code>navigator</code>：对<code>Navigator</code>对象的只读引用。</p><p>方法：</p><p><code>alert()</code>：显示带有一段消息和一个确认按钮的警告框。</p><p><code>confirm()</code>：显示带有一段消息以及确认按钮和取消按钮的对话框。</p><p><code>setInterval()</code>：按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;, <span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure><p><code>setTimeout()</code>：在指定的毫秒数后调用函数或计算表达式。（只调用一次）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hi&quot;</span>);<br>&#125;, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure></li><li><p><code>Navigator</code>：浏览器对象。</p></li><li><p><code>Screen</code>：屏幕对象。</p></li><li><p><code>History</code>：历史记录对象。</p></li><li><p><code>Location</code>：地址栏对象。</p><p>获取：<code>window.location.属性;</code>&#x2F;<code>location.属性</code>。</p><p>属性：</p><p><code>href</code>：设置或返回完整的<code>URL</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.itcast.cn&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h5 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h5><p>概念：<code>Document Object Model</code>，文档对象模型。<code>DOM</code>是<code>W3C</code>（万维网联盟）的标准，定义了访问<code>HTML</code>和<code>XML</code>文档的标准，分为3个不同的部分：</p><p>1.<code>Core DOM</code>：所有文档类型的标准模型。将标记语言的各个组成部分封装为对应的对象：</p><ul><li><code>Document</code>：整个文档对象。</li><li><code>Element</code>：元素对象。</li><li><code>Attribute</code>：属性对象。</li><li><code>Text</code>：文本对象。</li><li><code>Comment</code>：注释对象。</li></ul><p>2.<code>XML DOM</code>：<code>XML</code>文档的标准模型。</p><p>3.<code>HTML DOM</code>：<code>HTML</code>文档的标准模型。</p><ul><li><code>Image</code>：<code>&lt;img&gt;</code></li><li><code>Button</code>：<code>&lt;input type=&#39;button&#39;&gt;</code></li></ul><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/DOM.png"></p><p><code>HTML</code>中的<code>Element</code>对象可以通过<code>Document</code>对象获取，而<code>Document</code>对象是通过<code>window</code>对象获取的。 </p><p><code>Document</code>提供获取<code>Element</code>元素对象的函数：</p><p>1.根据<code>id</code>属性值获取，返回单个<code>Element</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);<br></code></pre></td></tr></table></figure><p>2.根据标签名称获取，返回<code>Element</code>对象数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3.根据<code>name</code>属性值获取，返回<code>Element</code>对象数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;hobby&#x27;</span>);<br></code></pre></td></tr></table></figure><p>4.根据<code>class</code>属性值获取，返回<code>Element</code>对象数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> clss = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;cls&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="JavaScript事件监听"><a href="#JavaScript事件监听" class="headerlink" title="JavaScript事件监听"></a>JavaScript事件监听</h4><p>事件：<code>HTML</code>事件是发生在<code>HTML</code>元素上的事情。比如：按钮被点击、鼠标移动到元素上、按下键盘按键。</p><p>事件监听：<code>JavaScript</code>可以在事件被侦测到时执行代码。</p><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>方式一：通过 HTML标签中的事件属性进行绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我被点击了!&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二：通过 DOM 元素属性绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我被点击了!&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h5><table><thead><tr><th><strong>事件名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><code>Vue</code>是一套前端框架，免除原生<code>JavaScript</code>中的<code>DOM</code>操作，简化书写。</p><p>基于<code>MVVM</code>(<code>Model-View-ViewModel</code>)思想，实现数据的双向绑定，将编程的关注点放在数据上。</p><p>官网： <a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p><h4 id="引入Vue"><a href="#引入Vue" class="headerlink" title="引入Vue"></a>引入Vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    &#123;&#123; message &#125;&#125; <span class="hljs-comment">&lt;!-- &#123;&#123;message&#125;&#125;内支持变量、三元运算符、函数调用、算术运算 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello Vue!&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>1.<code>v-bind</code>为HTML标签绑定属性值，如设置<code>href</code> , <code>css</code>样式等。</p><p>2.<code>v-model</code>在表单元素上创建双向数据绑定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;a v-bind:href=&quot;url&quot;&gt;传智教育&lt;/a&gt;<br>&lt;a :href=&quot;url&quot;&gt;传智教育&lt;/a&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;url&quot;&gt; &lt;!-- 修改url，则三者的url均会改变 --&gt;<br><br>&lt;script&gt;<br>  new Vue(&#123;<br>     el: &quot;#app&quot;,<br>     data: &#123;<br>        url: &quot;https://www.itcast.cn&quot;<br>     &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>注意：通过<code>v-bind</code>或者<code>v-model</code>绑定的变量，必须在数据模型中声明。</p><p>3.<code>v-on</code>为<code>HTML</code>标签绑定事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;handle()&quot;&gt;<br>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;handle()&quot;&gt;<br><br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>//...<br>        &#125;,<br>        methods: &#123;<br>            handle:function()&#123;<br>                alert(&#x27;我被点击了&#x27;);<br>            &#125;<br>        &#125;,<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>4.<code>v-if</code>、<code>v-else-if</code>、<code>v-else</code>：条件性的渲染某元素，判定为<code>true</code>时渲染，否则不渲染。</p><p>5.<code>v-show</code>根据条件展示某元素，与<code>v-if</code>的区别在于，<code>v-show</code>切换的是<code>display</code>属性的值。会渲染在屏幕上，但是不显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Vue">年龄&#123;&#123;age&#125;&#125;,经判定为:<br>&lt;span v-if=&quot;age &lt;= 35&quot;&gt;年轻人&lt;/span&gt;<br>&lt;span v-else-if=&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;&gt;中年人&lt;/span&gt;<br>&lt;span v-else&gt;老年人&lt;/span&gt;<br><br>年龄&#123;&#123;age&#125;&#125;,经判定为:Vue<br>&lt;span v-show=&quot;age &lt;= 35&quot;&gt;年轻人&lt;/span&gt;<br><br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>           age: 18<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>6.<code>v-for</code>渲染列表，遍历容器的元素或者对象的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;div v-for=&quot;addr in addrs&quot;&gt;&#123;&#123;addr&#125;&#125;&lt;/div&gt;<br>&lt;div v-for=&quot;(addr,index) in addrs&quot;&gt;&#123;&#123;index + 1&#125;&#125; : &#123;&#123;addr&#125;&#125;&lt;/div&gt;<br><br>&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>           addrs: [&#x27;北京&#x27;,&#x27;上海&#x27;,&#x27;广州&#x27;,&#x27;深圳&#x27;,&#x27;成都&#x27;,&#x27;杭州&#x27;]<br>        &#125;<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>生命周期：指一个对象从创建到销毁的整个过程。</p><p>生命周期的<strong>八个阶段</strong>：每触发一个生命周期事件，会自动执行一个<strong>生命周期方法</strong>（<strong>钩子</strong>）。</p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><table><thead><tr><th><strong>状态</strong></th><th><strong>阶段周期</strong></th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>载入前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;script&gt;<br>    new Vue(&#123;<br>        el: &quot;#app&quot;,<br>        data: &#123;<br>            <br>        &#125;,<br>        mounted() &#123;//mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。（发送请求到服务端，加载数据）<br>            console.log(&quot;Vue挂载完毕,发送请求获取数据&quot;);<br>        &#125;,<br>        methods: &#123;<br>           <br>        &#125;,<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>概念：<code>Asynchronous JavaScript And XML</code>，异步的<code>JavaScript</code>和<code>XML</code>。</p><p>作用：</p><ul><li><strong>数据交换</strong>：通过<code>Ajax</code>可以给服务器发送请求，并获取服务器响应的数据。</li><li><strong>异步交互</strong>：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用的校验等等。</li></ul><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.png"></p><h4 id="原生Ajax（繁琐）"><a href="#原生Ajax（繁琐）" class="headerlink" title="原生Ajax（繁琐）"></a>原生Ajax（繁琐）</h4><p>1.准备数据地址。</p><p>2.创建<code>XMLHttpRequest</code>对象：用于和服务器交换数据。</p><p>3.向服务器发送请求。</p><p>4.获取服务器响应数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getData()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//1. 创建XMLHttpRequest </span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> xmlHttpRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//2. 发送异步请求</span></span><br><span class="language-javascript">        xmlHttpRequest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;https://mock.apifox.cn/m1/3128855-0-default/emp/list&#x27;</span>);</span><br><span class="language-javascript">        xmlHttpRequest.<span class="hljs-title function_">send</span>();<span class="hljs-comment">//发送请求</span></span><br><span class="language-javascript">        <span class="hljs-comment">//3. 获取服务响应数据</span></span><br><span class="language-javascript">        xmlHttpRequest.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(xmlHttpRequest.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlHttpRequest.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div1&#x27;</span>).<span class="hljs-property">innerHTML</span> = xmlHttpRequest.<span class="hljs-property">responseText</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><p><code>Axios</code>对原生的<code>Ajax</code>进行了封装，简化书写，快速开发。</p><p>官网： <a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></p><p>1.引入Axios的js文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.使用<code>Axios</code>发送请求，并获取响应结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span></span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;id=1&quot;</span></span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>Axios</code>请求方式别名：</p><ul><li><code>axios.get(url [, config])</code></li><li><code>axios.delete(url [, config])</code></li><li><code>axios.post(url [, data[, config]])</code></li><li><code>axios.put(url [, data[, config]])</code></li></ul><p>发送<code>GET</code>请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">axios.get(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;).then((result) =&gt; &#123;<br>    console.log(result.data);HTML<br>&#125;);<br></code></pre></td></tr></table></figure><p>发送<code>POST</code>请求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">axios.post(&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;,&quot;id=1&quot;).then((result) =&gt; &#123;<br>    console.log(result.data);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="前后端分离开发"><a href="#前后端分离开发" class="headerlink" title="前后端分离开发"></a>前后端分离开发</h3><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><h5 id="YAPI"><a href="#YAPI" class="headerlink" title="YAPI"></a>YAPI</h5><p>案例使用的是<code>YApi</code>，官网：<a href="http://yapi.smart-xwork.cn/">yapi.smart-xwork.cn</a>（旧版，无法访问）</p><p>新版：<a href="https://yapi.pro/">https://yapi.pro/</a> （但是卡卡的，还是很难用）</p><p>步骤：添加项目、添加分类、添加接口。</p><h5 id="Apifox"><a href="#Apifox" class="headerlink" title="Apifox"></a>Apifox</h5><p>官网：<a href="https://app.apifox.com/">Apifox</a></p><p>步骤：</p><p>1.新建接口：<code>GET</code>后面填<code>/users/&#123;id&#125;</code>，使用大括号<code>&#123;&#125;</code>表示<code>Path</code>参数。</p><p>2.返回响应：在<code>数据结构</code>下设置返回的数据结构。</p><p>3.运行：选择<code>体验模式</code>或<code>云端Mock</code>（建议，需要单独开启）。点击<code>发送</code>就有随机的值返回。</p><p>免费<code>API</code>接口：<a href="https://free-api.com/">接口大全-免费API,收集所有免费的API</a></p><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p><code>Vue-cli</code>是<code>Vue</code>官方提供的一个脚手架，用于快速生成一个<code>Vue</code>的项目模板。</p><p>Vue-cli提供了如下功能：统一的目录结构、本地调试、热部署（不用手动刷新，可以自动更新修改后的页面）、单元测试、集成打包上线。</p><p>依赖环境：<code>NodeJS </code></p><p>安装命令：<code>npm install -g @vue/cli</code></p><h4 id="Vue项目"><a href="#Vue项目" class="headerlink" title="Vue项目"></a>Vue项目</h4><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p>1.命令行：<code>vue create vue-project01 </code></p><p>2.图形化界面：<code>vue ui</code>（项目目录下输入）</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">E:\<span class="hljs-number">2</span>_学习\JavaWeb\code\vue&gt;vue ui<br>🚀  Starting GUI<span class="hljs-params">...</span><br>🌠  Ready <span class="hljs-keyword">on</span> http:<span class="hljs-comment">//localhost:8000</span><br></code></pre></td></tr></table></figure><p>在<code>http://localhost:8000</code>下打开图形化界面，<code>创建</code>-&gt;在文件夹下<code>创建新项目</code>-&gt;填写<code>项目名称</code>，先取消<code>初始化git仓库</code>-&gt;选择一套预设<code>手动</code>-&gt;选择功能，添加<code>Router</code>，其他的以后需要再添加-&gt;选择<code>2.x</code>和<code>ESLint with error prevention only</code>-&gt;<code>创建新项目</code>。</p><p>等待一段很长的时间，即可创建成功。在<code>http://localhost:8000</code>下即可看到新创建的项目。</p><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p>基于<code>Vue</code>脚手架创建出来的工程，有标准的目录结构。</p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue%E5%B7%A5%E7%A8%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"></p><h5 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h5><p>1.图形化界面</p><p>在<code>package.json</code>页面<code>Ctrl+Q</code>，然后一直按住<code>Ctrl</code>键，找到<code>NPM Scripts</code>，点击之后在<code>VSCode</code>左下方出现<code>NPM SCRIPTS</code>(<code>NPM脚本</code>)，选择<code>serve vue-cli-service</code>，点击右边的三角键即可运行。</p><p>2.命令行：<code>npm run serve</code></p><h5 id="配置端口"><a href="#配置端口" class="headerlink" title="配置端口"></a>配置端口</h5><p>在<code>vue.config.js</code>文件下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">7000</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Vue项目开发流程"><a href="#Vue项目开发流程" class="headerlink" title="Vue项目开发流程"></a>Vue项目开发流程</h4><p>默认首页：<code>index.html</code></p><p>入口文件：<code>main.js</code></p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B1.png"></p><p>根组件：<code>App.vue</code></p><p><code>Vue</code>的组件文件以 <code>.vue</code>结尾，每个组件由三个部分组成：<code>&lt;template&gt; </code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code> 。</p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B2.png" alt="image-20241009161239796"></p><h3 id="Vue组件库Element"><a href="#Vue组件库Element" class="headerlink" title="Vue组件库Element"></a>Vue组件库Element</h3><p><code>Element</code>：是饿了么团队研发的，一套为开发者、设计师和产品经理准备的基于<code>Vue 2.0</code>的桌面端组件库。</p><p>组件：组成网页的部件，例如超链接、按钮、图片、表格、表单、分页条等等。</p><p>官网：<a href="https://element.eleme.cn/#/zh-CNListener">https://element.eleme.cn/#/zh-CNListener</a></p><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>1.安装ElementUI组件库 （在当前工程的目录下），在命令行执行指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">npm install element-ui@<span class="hljs-number">2</span>.<span class="hljs-number">15</span>.<span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p>2.引入ElementUI组件库，在<code>main.js</code>文件下加入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br></code></pre></td></tr></table></figure><p>3.在<code>views</code>文件夹下创建<code>.vue</code>组件（在<code>views</code>文件夹下或者<code>views</code>的子文件夹下创建都可以），命名格式必须是<code>驼峰命名法</code>，如<code>ElementView.vue</code>，在<code>App.vue</code>文件中，在<code>&lt;template&gt;&lt;/template&gt;</code>模块中使用<code>&lt;element-view&gt;&lt;/element-view&gt;</code>标签引入该模板。完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>      &lt;element-view&gt;&lt;/element-view&gt; &lt;!-- 引入组件 --&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import ElementView from &#x27;./views/element/ElementView.vue&#x27;<br><br>export default &#123;<br>  components: &#123; ElementView &#125;,<br>  data()&#123;<br>    return &#123;<br>      message: &quot;Hello surourou&quot;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>【报错】</p><p>1.【vue 报错】The template root requires exactly one element</p><p>原因：因为<code>vue</code>的模版中只有能一个根节点，所以在<code>template</code>中插入第二个元素就会报错。</p><p>解决方法：在<code>template</code>下套一个<code>div</code>标签，然后在<code>div</code>标签下放<code>Element</code>组件。</p><h4 id="常见组件"><a href="#常见组件" class="headerlink" title="常见组件"></a>常见组件</h4><h5 id="Table表格"><a href="#Table表格" class="headerlink" title="Table表格"></a>Table表格</h5><p>用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。</p><h5 id="Pagination分页"><a href="#Pagination分页" class="headerlink" title="Pagination分页"></a>Pagination分页</h5><p>当数据量过多时，使用分页分解数据。</p><h5 id="Dialog对话框"><a href="#Dialog对话框" class="headerlink" title="Dialog对话框"></a>Dialog对话框</h5><p>在保留当前页面状态的情况下，告知用户并承载相关操作。</p><h5 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h5><p>由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据。</p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;!-- Button按钮 --&gt;<br>        &lt;el-row&gt;<br>            &lt;el-button&gt;默认按钮&lt;/el-button&gt;<br>            &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;<br>            &lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;<br>            &lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;<br>            &lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;<br>            &lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;<br>        &lt;/el-row&gt;<br><br>        &lt;br&gt;<br><br>        &lt;!-- Table表格 --&gt;<br>        &lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; :row-class-name=&quot;tableRowClassName&quot;&gt;<br>            &lt;el-table-column prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;180&quot;&gt;<br>            &lt;/el-table-column&gt;<br>            &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;<br>            &lt;/el-table-column&gt;<br>            &lt;el-table-column prop=&quot;address&quot; label=&quot;地址&quot;&gt;<br>            &lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br><br>        &lt;br&gt;<br><br>        &lt;!-- Pagination分页 --&gt;<br>        &lt;el-pagination background layout=&#x27;total, sizes, prev, pager, next, jumper, -&gt;&#x27; @size-change=&quot;handleSizeChange&quot;<br>            @current-change=&quot;handleCurrentChange&quot; :total=totalPage&gt;<br>        &lt;/el-pagination&gt;<br><br>        &lt;br&gt;<br><br>        &lt;!-- Dialog对话框 --&gt;<br>        &lt;el-button type=&quot;text&quot; @click=&quot;dialogTableVisible = true&quot;&gt;打开嵌套表格的 Dialog&lt;/el-button&gt;<br><br>        &lt;el-dialog title=&quot;收货地址&quot; :visible.sync=&quot;dialogTableVisible&quot;&gt;<br>            &lt;el-table :data=&quot;gridData&quot;&gt;<br>                &lt;el-table-column property=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot;&gt;&lt;/el-table-column&gt;<br>                &lt;el-table-column property=&quot;name&quot; label=&quot;姓名&quot; width=&quot;200&quot;&gt;&lt;/el-table-column&gt;<br>                &lt;el-table-column property=&quot;address&quot; label=&quot;地址&quot;&gt;&lt;/el-table-column&gt;<br>            &lt;/el-table&gt;<br>        &lt;/el-dialog&gt;<br><br>        &lt;br&gt;<br><br>        &lt;!-- Form表单 --&gt;<br><br>        &lt;el-button type=&quot;text&quot; @click=&quot;dialogFormVisible = true&quot;&gt;打开嵌套表单的 Dialog&lt;/el-button&gt;<br><br>        &lt;el-dialog title=&quot;收货地址&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;<br><br>            &lt;el-form ref=&quot;form&quot; :model=&quot;form&quot; label-width=&quot;80px&quot;&gt;<br>                &lt;el-form-item label=&quot;活动名称&quot;&gt;<br>                    &lt;el-input v-model=&quot;form.name&quot;&gt;&lt;/el-input&gt;<br>                &lt;/el-form-item&gt;<br>                &lt;el-form-item label=&quot;活动区域&quot;&gt;<br>                    &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;请选择活动区域&quot;&gt;<br>                        &lt;el-option label=&quot;区域一&quot; value=&quot;shanghai&quot;&gt;&lt;/el-option&gt;<br>                        &lt;el-option label=&quot;区域二&quot; value=&quot;beijing&quot;&gt;&lt;/el-option&gt;<br>                    &lt;/el-select&gt;<br>                &lt;/el-form-item&gt;<br>                &lt;el-form-item label=&quot;活动时间&quot;&gt;<br>                    &lt;el-col :span=&quot;11&quot;&gt;<br>                        &lt;el-date-picker type=&quot;date&quot; placeholder=&quot;选择日期&quot; v-model=&quot;form.date1&quot;<br>                            style=&quot;width: 100%;&quot;&gt;&lt;/el-date-picker&gt;<br>                    &lt;/el-col&gt;<br>                    &lt;el-col class=&quot;line&quot; :span=&quot;2&quot;&gt;-&lt;/el-col&gt;<br>                    &lt;el-col :span=&quot;11&quot;&gt;<br>                        &lt;el-time-picker placeholder=&quot;选择时间&quot; v-model=&quot;form.date2&quot; style=&quot;width: 100%;&quot;&gt;&lt;/el-time-picker&gt;<br>                    &lt;/el-col&gt;<br>                &lt;/el-form-item&gt;<br>                &lt;el-form-item&gt;<br>                    &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;立即创建&lt;/el-button&gt;<br>                    &lt;el-button&gt;取消&lt;/el-button&gt;<br>                &lt;/el-form-item&gt;<br>            &lt;/el-form&gt;<br><br>        &lt;/el-dialog&gt;<br><br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    methods: &#123;<br>        tableRowClassName(&#123; rowIndex &#125;) &#123;<br>            if (rowIndex === 1) &#123;<br>                return &#x27;warning-row&#x27;;<br>            &#125; else if (rowIndex === 3) &#123;<br>                return &#x27;success-row&#x27;;<br>            &#125;<br>            return &#x27;&#x27;;<br>        &#125;,<br>        handleSizeChange(value) &#123;<br>            alert(&quot;每页记录数变化&quot; + value)<br>        &#125;,<br>        handleCurrentChange(value) &#123;<br>            alert(&quot;页码发生变化&quot; + value)<br>        &#125;,<br>        onSubmit() &#123;<br>            alert(JSON.stringify(this.form))<br>        &#125;<br>    &#125;,<br>    data() &#123;<br>        return &#123;<br>            totalPage: 88,<br>            tableData: [&#123;<br>                date: &#x27;2016-05-02&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,<br>            &#125;, &#123;<br>                date: &#x27;2016-05-04&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>            &#125;, &#123;<br>                date: &#x27;2016-05-01&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;,<br>            &#125;, &#123;<br>                date: &#x27;2016-05-03&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>            &#125;],<br>            gridData: [&#123;<br>                date: &#x27;2016-05-02&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>            &#125;, &#123;<br>                date: &#x27;2016-05-04&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>            &#125;, &#123;<br>                date: &#x27;2016-05-01&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>            &#125;, &#123;<br>                date: &#x27;2016-05-03&#x27;,<br>                name: &#x27;王小虎&#x27;,<br>                address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;<br>            &#125;],<br>            dialogTableVisible: false,<br>            dialogFormVisible: false,<br>            form: &#123;<br>                name: &#x27;&#x27;,<br>                region: &#x27;&#x27;,<br>                date1: &#x27;&#x27;,<br>                date2: &#x27;&#x27;,<br>                delivery: false,<br>                type: [],<br>                resource: &#x27;&#x27;,<br>                desc: &#x27;&#x27;<br>            &#125;,<br>            formLabelWidth: &#x27;120px&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.el-table .warning-row &#123;<br>    background: oldlace;<br>&#125;<br><br>.el-table .success-row &#123;<br>    background: #f0f9eb;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h3><p>前端路由：<code>URL</code>中的<code>hash</code>(<code>#</code>号) 与组件之间的对应关系。</p><p><code>Vue Router</code>是<code>Vue</code>的官方路由。</p><p>组成：</p><p><code>VueRouter</code>：路由器类，根据路由请求在路由视图中动态渲染选中的组件。</p><p><code>&lt;router-link&gt;</code>：请求链接组件，浏览器会解析成<code>&lt;a&gt;</code>。</p><p><code>&lt;router-view&gt;</code>：动态视图组件，用来渲染展示与路由路径对应的组件。</p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/VueRouter%E8%B7%AF%E7%94%B1.png"></p><p>安装路由：<code>npm install vue-router@3.5.1</code></p><p>在<code>index.js</code>文件中定义路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>在<code>main.js</code>文件中引入路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//引入路由</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br></code></pre></td></tr></table></figure><p>【案例】通过<code>Vue</code>的路由<code>VueRouter</code>完成左侧菜单栏点击切换效果</p><p>在两个需要切换的组件中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;router-link to=&quot;/dept&quot;&gt;部门管理&lt;/router-link&gt;<br>&lt;router-link to=&quot;/emp&quot;&gt;员工管理&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><p>在<code>App.vue</code>组件中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>在<code>package.json</code>页面<code>Ctrl+Q</code>，然后一直按住<code>Ctrl</code>键，找到<code>NPM Scripts</code>，点击之后在<code>VSCode</code>左下方出现<code>NPM SCRIPTS</code>(<code>NPM脚本</code>)，选择<code>build vue-cli-service</code>，点击右边的三角键即可运行。</p><p>打包后生成<code>dist</code>文件夹，包含生成的静态页面。将<code>dist</code>文件夹用于部署。</p><p><img src="/2024/10/09/JavaWeb%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%89%93%E5%8C%85.png"></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p><code>Nginx</code>是一款轻量级的<code>Web</code>服务器&#x2F;反向代理服务器及电子邮件（<code>IMAP/POP3</code>）代理服务器。其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用。</p><p>官网：<a href="https://nginx.org/">https://nginx.org/</a></p><h4 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h4><p>部署：将打包好的<code>dist</code>目录下的文件，复制到<code>nginx</code>安装目录的<code>html</code>目录下。</p><p>启动：双击<code>nginx.exe</code>文件即可，<code>Nginx</code>服务器默认占用<code>80</code>端口号。</p><p>注意：<code>Nginx</code>默认占用<code>80</code>端口号，如果<code>80</code>端口号被占用，可以在<code>nginx.conf</code>中修改端口号。（<code>netstat –ano | findStr  80</code>命令可以查看当前占用<code>80</code>端口的是什么进程。）（备注：我的电脑可以使用<code>80</code>端口，所以可以不需要这个操作）</p><p>访问：<a href="http://localhost:90/">http://localhost:90</a></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>【补充知识】</p><p>1.通过 <code>Scoped slot</code> 可以获取到<code>row</code>, <code>column</code>, <code>$index</code> 和 <code>store</code>（<code>table</code>内部的状态管理）的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template slot-scope=&quot;scope&quot;&gt;<br>    &lt;p&gt;姓名: &#123;&#123; scope.row.name &#125;&#125;&lt;/p&gt; &lt;!-- scope.row获取到该行的值 --&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>2.<code>Vue</code>项目中使用<code>Axios</code></p><p>在项目目录下安装<code>axios</code>：<code>npm  install axios</code></p><p>需要使用axios时，导入<code>axios</code>：<code>import axios from &#39;axios&#39;;</code></p><p>【案例要求】：根据页面原型完成员工管理页面开发，并通过<code>Axios</code>完成数据异步加载。</p><p>1.用户管理组件<code>EmpView.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;el-container style=&quot;height: 700px; border: 1px solid #eee&quot;&gt;<br>            &lt;el-header<br>                style=&quot;font-size: 30px; color: #000; text-align: center; line-height: 60px; background-color: rgb(238, 241, 246);&quot;&gt;tlias智能学习辅助系统&lt;/el-header&gt;<br>            &lt;el-container&gt;<br>                &lt;el-aside width=&quot;230px&quot; style=&quot;border: 1px solid #eee&quot;&gt;<br>                    &lt;el-menu :default-openeds=&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;&gt;<br>                        &lt;el-submenu index=&quot;1&quot;&gt;<br>                            &lt;template slot=&quot;title&quot;&gt;&lt;i class=&quot;el-icon-message&quot;&gt;&lt;/i&gt;系统信息管理&lt;/template&gt;<br>                            &lt;el-menu-item index=&quot;1-1&quot;&gt;<br>                                &lt;router-link to=&quot;/dept&quot;&gt;部门管理&lt;/router-link&gt;<br>                            &lt;/el-menu-item&gt;<br>                            &lt;el-menu-item index=&quot;1-2&quot;&gt;<br>                                &lt;router-link to=&quot;/emp&quot;&gt;用户管理&lt;/router-link&gt;<br>                            &lt;/el-menu-item&gt;<br>                        &lt;/el-submenu&gt;<br>                    &lt;/el-menu&gt;<br>                &lt;/el-aside&gt;<br>                &lt;el-main&gt;<br><br>                    &lt;el-form :inline=&quot;true&quot; :model=&quot;searchForm&quot; class=&quot;demo-form-inline&quot;&gt;<br>                        &lt;el-form-item label=&quot;姓名&quot;&gt;<br>                            &lt;el-input v-model=&quot;searchForm.user&quot; placeholder=&quot;姓名&quot;&gt;&lt;/el-input&gt;<br>                        &lt;/el-form-item&gt;<br>                        &lt;el-form-item label=&quot;性别&quot;&gt;<br>                            &lt;el-select v-model=&quot;searchForm.region&quot; placeholder=&quot;性别&quot;&gt;<br>                                &lt;el-option label=&quot;男&quot; value=&quot;1&quot;&gt;&lt;/el-option&gt;<br>                                &lt;el-option label=&quot;女&quot; value=&quot;2&quot;&gt;&lt;/el-option&gt;<br>                            &lt;/el-select&gt;<br>                        &lt;/el-form-item&gt;<br>                        &lt;el-form-item label=&quot;入职日期&quot;&gt;<br>                            &lt;el-date-picker v-model=&quot;searchForm.entrydate&quot; type=&quot;daterange&quot; range-separator=&quot;至&quot;<br>                                start-placeholder=&quot;开始日期&quot; end-placeholder=&quot;结束日期&quot;&gt;<br>                            &lt;/el-date-picker&gt;<br>                        &lt;/el-form-item&gt;<br>                        &lt;el-form-item&gt;<br>                            &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;查询&lt;/el-button&gt;<br>                        &lt;/el-form-item&gt;<br>                    &lt;/el-form&gt;<br><br>                    &lt;el-table :data=&quot;tableData&quot; border&gt;<br>                        &lt;el-table-column prop=&quot;name&quot; label=&quot;姓名&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;<br>                        &lt;el-table-column prop=&quot;image&quot; label=&quot;图像&quot; width=&quot;180&quot;&gt;<br>                            &lt;template slot-scope=&quot;scope&quot;&gt;<br>                                &lt;img :src=&quot;scope.row.image&quot; width=&quot;100px&quot; height=&quot;70px&quot;&gt;<br>                            &lt;/template&gt;<br>                        &lt;/el-table-column&gt;<br>                        &lt;el-table-column label=&quot;性别&quot; width=&quot;140&quot;&gt;<br>                            &lt;template slot-scope=&quot;scope&quot;&gt;<br>                                &#123;&#123; scope.row.gender == 1 ? &#x27;男&#x27;: &#x27;女&#x27; &#125;&#125;<br>                            &lt;/template&gt;<br>                        &lt;/el-table-column&gt;<br>                        &lt;el-table-column prop=&quot;job&quot; label=&quot;职位&quot; width=&quot;140&quot;&gt;&lt;/el-table-column&gt;<br>                        &lt;el-table-column prop=&quot;entrydate&quot; label=&quot;入职日期&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;<br>                        &lt;el-table-column prop=&quot;updatetime&quot; label=&quot;最后操作时间&quot; width=&quot;230&quot;&gt;&lt;/el-table-column&gt;<br>                        &lt;el-table-column label=&quot;操作&quot;&gt;<br>                            &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot;&gt;编辑&lt;/el-button&gt;<br>                            &lt;el-button type=&quot;danger&quot; size=&quot;mini&quot;&gt;删除&lt;/el-button&gt;<br>                        &lt;/el-table-column&gt;<br>                    &lt;/el-table&gt;<br><br>                    &lt;br&gt;<br>                    &lt;!-- 分页 --&gt;<br>                    &lt;el-pagination background layout=&#x27;total, sizes, prev, pager, next, jumper, -&gt;&#x27;<br>                        @size-change=&quot;handleSizeChange&quot; @current-change=&quot;handleCurrentChange&quot; :total=totalPage&gt;<br>                    &lt;/el-pagination&gt;<br><br><br>                &lt;/el-main&gt;<br>            &lt;/el-container&gt;<br>        &lt;/el-container&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import axios from &#x27;axios&#x27;;<br>export default &#123;<br>    data() &#123;<br>        return &#123;<br>            tableData: &#123;&#125;,<br>            searchForm: &#123;<br>                name: &quot;&quot;,<br>                gender: &quot;&quot;,<br>                entrydate: [],<br>            &#125;<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        onsubmit() &#123;<br>            alert(&quot;查询用户信息&quot;);<br>        &#125;,<br>        handleSizeChange(value) &#123;<br>            alert(&quot;每页记录数变化&quot; + value)<br>        &#125;,<br>        handleCurrentChange(value) &#123;<br>            alert(&quot;页码发生变化&quot; + value)<br>        &#125;,<br>    &#125;,<br>    mounted() &#123;<br>        axios.get(&quot;https://mock.apifox.cn/m1/3128855-0-default/emp/list&quot;).then(result =&gt; &#123;<br>            this.tableData = result.data.data; // 必须要带上this才能访问tableData <br>        &#125;)<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>2.部门管理组件<code>DeptView.vue</code>：类似用户管理组件，留着空白也可以运行。</p><p>3.<code>App.vue</code>组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>      &lt;router-view&gt;&lt;/router-view&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br><br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>4.配置路由<code>index.js</code>文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/emp&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;emp&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../views/tlias/EmpView.vue&quot;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/dept&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;dept&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../views/tlias/DeptView.vue&quot;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;emp&#x27;</span><br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java高级</title>
    <link href="/2024/10/07/Java%E9%AB%98%E7%BA%A7/"/>
    <url>/2024/10/07/Java%E9%AB%98%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Junit单元测试框架"><a href="#Junit单元测试框架" class="headerlink" title="Junit单元测试框架"></a>Junit单元测试框架</h4><p><code>Junit</code>是使用Java语言实现的单元测试框架，它是第三方公司开源出来的，很多开发工具已经集成了<code>Junit</code>框架，比如<code>IDEA</code>。</p><p><code>Junit</code>框架完成单元测试：</p><ol><li>将<code>Junit</code>框架的<code>jar</code>包导入到项目中（注意：<code>IDEA</code>集成了<code>Junit</code>框架，不需要我们自己手工导入了）。</li><li>编写测试类、测试类方法（注意：<strong>测试方法必须是公共的，无参数，无返回值的非静态方法</strong>）。</li><li>必须在测试方法上使用<code>@Test</code>注解（标注该方法是一个测试方法）。</li><li>在测试方法中，编写程序调用被测试的方法。</li><li>选中测试方法，右键选择运行，如果测试通过则是绿色；如果测试失败，则是红色。<strong>注意：</strong>如果无法执行测试方法，需要<code>Settings</code>-&gt;<code>Plugins</code>-&gt;搜索下载<code>JUnit4 Parallel Runner</code>这个插件即可。</li></ol><p><code>Junit</code>单元测试框架的常用注解：</p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNumber</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">if</span>(name == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 停掉方法</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;名字长度是：&quot;</span> + name.length());<br>    &#125;<br><br>    <span class="hljs-comment">//求字符串的最大索引</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxIndex</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> data.length() - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span> &#123;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//在每个测试方法执行之前都执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;---&gt; test1 Before 执行了---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//在所有测试方法执行之前只执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;---&gt; test11 BeforeClass 执行了---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//在每个测试方法执行之后都执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;---&gt; test2 After 执行了---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test22</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//在所有测试方法执行之后只执行一次</span><br>        System.out.println(<span class="hljs-string">&quot;---&gt; test22 AfterClass 执行了---------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 测试方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPrintNumber</span><span class="hljs-params">()</span>&#123;<br>        StringUtil.printNumber(<span class="hljs-string">&quot;admin&quot;</span>);<br>        StringUtil.printNumber(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 测试方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetMaxIndex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> StringUtil.getMaxIndex(<span class="hljs-literal">null</span>);<br>        System.out.println(index1);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> StringUtil.getMaxIndex(<span class="hljs-string">&quot;admin&quot;</span>);<br>        System.out.println(index2);<br><br>        <span class="hljs-comment">// 断言机制：程序员可以通过预测业务方法的结果。</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;方法内部有bug!&quot;</span>, <span class="hljs-number">4</span>, index2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射指的是允许以编程方式访问已加载类的成分（成员变量、方法、构造器等）。</p><h4 id="获取类：Class"><a href="#获取类：Class" class="headerlink" title="获取类：Class"></a>获取类：Class</h4><p>反射是在运行时获取类的字节码文件对象，然后可以解析类中的全部成分。</p><p>反射的核心思想和关键：得到编译以后的<code>class</code>文件对象。</p><p>获取Class类的对象的三种方式：</p><ol><li><code>Class c1 = Class.forName(“全类名”);</code></li><li><code>Class c2 = 类名.class;</code></li><li><code>Class c3 = 对象.getClass();</code></li></ol><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%B1%BB.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行无参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Student.class;<br>    System.out.println(c1.getName());<span class="hljs-comment">//全类名</span><br>    System.out.println(c1.getSimpleName());<span class="hljs-comment">//简名：Student</span><br><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.itheima.Reflect_.Student&quot;</span>);<br>    System.out.println(c1 == c2);<span class="hljs-comment">// Student类的Class对象只有一份，c1和c2指向的都是同一个Class对象</span><br><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> s.getClass();<br>    System.out.println(c1 == c3);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取类的构造器：Constructor"><a href="#获取类的构造器：Constructor" class="headerlink" title="获取类的构造器：Constructor"></a>获取类的构造器：Constructor</h4><p>获取构造器的作用：初始化一个对象返回。</p><p>注意：如果是非<code>public</code>的构造器，需要打开权限（暴力反射）：<code>setAccessible(boolean)</code>，然后再创建对象。反射可以破坏封装性，私有的也可以执行了。</p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8.png"></p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/Constructor%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类和上述一样</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br><span class="hljs-comment">//获取类的全部构造器</span><br>Constructor[] cons = c.getDeclaredConstructors();<br><span class="hljs-keyword">for</span> (Constructor con : cons) &#123;<br>    System.out.println(con.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + con.getParameterCount());<br>&#125;<br><span class="hljs-comment">//获取某个构造器</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cons1</span> <span class="hljs-operator">=</span> c.getConstructor();<span class="hljs-comment">//获取无参构造器</span><br>System.out.println(cons1.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + cons1.getParameterCount());<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Student) cons1.newInstance();<br><span class="hljs-comment">//调用构造器，返回Object类型，需要强转</span><br><span class="hljs-comment">//如果不强转，可以在获取构造器时声明泛型Constructor&lt;Student&gt; cons1 = c1.getConstructor();但是构造器一般不声明泛型</span><br>System.out.println(s2);<br><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cons2</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<span class="hljs-comment">//获取有参构造器</span><br>System.out.println(cons2.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + cons2.getParameterCount());<br>cons2.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//因为该构造器是private，会报错：java.lang.IllegalAccessException，需要暴力反射：禁止检查访问权限</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> (Student) cons2.newInstance(<span class="hljs-string">&quot;surourou&quot;</span>, <span class="hljs-number">18</span>);<br>System.out.println(s3);<br></code></pre></td></tr></table></figure><h4 id="获取类的成员变量：Field"><a href="#获取类的成员变量：Field" class="headerlink" title="获取类的成员变量：Field"></a>获取类的成员变量：Field</h4><p>获取成员变量的作用：在某个对象中取值和赋值。</p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F.png"></p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/Field%E7%B1%BB%E4%B8%AD%E5%8F%96%E5%80%BC%E8%B5%8B%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类和上述一样</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>Field[] fields = c.getDeclaredFields();<span class="hljs-comment">//获取类的全部成员变量</span><br><span class="hljs-keyword">for</span> (Field f : fields) &#123;<br>    System.out.println(f.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + f.getType());<br>&#125;<br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<span class="hljs-comment">//定位某个成员变量</span><br>System.out.println(f.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + f.getType());<br><br><span class="hljs-comment">//为对象的成员变量赋值</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>f.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//暴力反射，可以访问私有变量</span><br>f.set(s, <span class="hljs-string">&quot;surourou&quot;</span>);<br>System.out.println(s);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) f.get(s);<span class="hljs-comment">//取值</span><br>System.out.println(name);<br></code></pre></td></tr></table></figure><h4 id="获取类的成员方法：Method"><a href="#获取类的成员方法：Method" class="headerlink" title="获取类的成员方法：Method"></a>获取类的成员方法：Method</h4><p>获取成员方法的作用：在某个对象中进行执行此方法。</p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%B1%BB%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png"></p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/Method%E7%B1%BB%E4%B8%AD%E7%94%A8%E4%BA%8E%E8%A7%A6%E5%8F%91%E6%89%A7%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类和上述一样</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Student.class;<br>Method[] methods = c.getDeclaredMethods();<span class="hljs-comment">//获取类的全部成员方法</span><br><span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>    System.out.println(m.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + m.getParameterCount() + <span class="hljs-string">&quot; --&gt; &quot;</span> + m.getReturnType());<br>&#125;<br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<span class="hljs-comment">//获取某个方法对象</span><br>System.out.println(m.getName() + <span class="hljs-string">&quot; --&gt; &quot;</span> + m.getParameterCount() + <span class="hljs-string">&quot; --&gt; &quot;</span> + m.getReturnType());<br><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>m.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//暴力反射</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> m.invoke(s, <span class="hljs-string">&quot;surourou&quot;</span>);<span class="hljs-comment">//调用方法，无返回值则结果为null</span><br>System.out.println(s + <span class="hljs-string">&quot; --&gt; &quot;</span> + rs);<br></code></pre></td></tr></table></figure><h4 id="反射的作用：绕过编译阶段为集合添加数据"><a href="#反射的作用：绕过编译阶段为集合添加数据" class="headerlink" title="反射的作用：绕过编译阶段为集合添加数据"></a>反射的作用：绕过编译阶段为集合添加数据</h4><p>反射是<strong>作用在运行时</strong>的技术，此时集合的泛型将不能产生约束了，此时是可以为集合存入其他任意类型的元素的。</p><p>泛型只是在<strong>编译阶段</strong>可以约束集合只能操作某种数据类型，在编译成<code>Class</code>文件进入运行阶段的时候，其真实类型都是<code>ArrayList</code>了，泛型相当于被擦除了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 定义两个不同类型的集合</span><br>ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>ArrayList&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-comment">// 对比两个的对象地址</span><br>System.out.println(list.getClass() == list2.getClass()); <span class="hljs-comment">// true</span><br><br>System.out.println(<span class="hljs-string">&quot;-----------------反射修改指定类型---------------&quot;</span>);<br>ArrayList&lt;Integer&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list3.add(<span class="hljs-number">12</span>);<br>list3.add(<span class="hljs-number">18</span>);<br><span class="hljs-comment">// list3.add(&quot;大冶人&quot;); 翻译阶段会报错</span><br><br><span class="hljs-comment">// 使用反射绕过编译阶段修改add()方法添加字符串</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> list3.getClass();<br><span class="hljs-comment">// 定位c中的方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (<span class="hljs-type">boolean</span>) add.invoke(list3,<span class="hljs-string">&quot;我修改你&quot;</span>);<br>System.out.println(list3); <span class="hljs-comment">// [12, 18, 我修改你]</span><br><br><span class="hljs-comment">// ------- 更简单的方式</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list4</span> <span class="hljs-operator">=</span> list3;<br>list4.add(<span class="hljs-string">&quot;sada&quot;</span>);<br>list4.add(<span class="hljs-literal">true</span>);<br>System.out.println(list3); <span class="hljs-comment">// [12, 18, 我修改你, sada, true]</span><br></code></pre></td></tr></table></figure><h4 id="案例：使用反射做框架"><a href="#案例：使用反射做框架" class="headerlink" title="案例：使用反射做框架"></a>案例：使用反射做框架</h4><p>对于任意一个对象，在不清楚对象字段的情况下，可以把对象的字段名称和对应值存储到文件中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Teacher类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectFrame</span> &#123;<br>    <span class="hljs-comment">//开发框架：保存任意对象的字段和其数据到文件中去</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/Test.txt&quot;</span>, <span class="hljs-literal">true</span>));<br>        <span class="hljs-comment">//注意：Junit测试下，文件相对路径是&quot;src&quot;开头，不是&quot;项目名/src&quot;</span><br>        <span class="hljs-comment">//obj是任意对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classname</span> <span class="hljs-operator">=</span> c.getSimpleName();<br>        ps.println(<span class="hljs-string">&quot;------------&quot;</span> + classname + <span class="hljs-string">&quot;------------&quot;</span>);<br>        Field[] fields = c.getDeclaredFields();<span class="hljs-comment">//拿到全部成员变量</span><br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> field.getName();<span class="hljs-comment">//拿到成员变量的名字</span><br>            field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//暴力反射，禁止检查访问控制</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> field.get(obj) + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//拿到成员变量在对象中的数据（全都转为字符串）</span><br>            ps.println(name + <span class="hljs-string">&quot; = &quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;surourou&quot;</span>, <span class="hljs-number">18</span>);<br>    <span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-string">&quot;shenzhen&quot;</span>);<br>    ObjectFrame.saveObject(s);<br>    ObjectFrame.saveObject(t);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>Java注解（Annotation）又称Java标注，是JDK5.0引入的一种注释机制。比如：<code>@Override</code>、<code>@Test</code>，作用是：让其他程序根据注解信息来决定怎么执行该程序。</p><p>Java 语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注。</p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> 注解名称 &#123;<br>    <span class="hljs-keyword">public</span> 属性类型 属性名() <span class="hljs-keyword">default</span> 默认值 ;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//自定义注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest1 &#123;<br>    String <span class="hljs-title function_">aaa</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">bbb</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>    String[] ccc();<br>&#125;<br></code></pre></td></tr></table></figure><p>特殊属性：<code>value</code>属性。如果只有一个<code>value</code>属性的情况下，使用<code>value</code>属性的时候可以省略<code>value</code>名称不写。但是如果有多个属性,  且多个属性没有默认值，那么<code>value</code>名称是不能省略的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest2&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>; <span class="hljs-comment">//特殊属性</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">10</span>; <span class="hljs-comment">//其他属性有默认值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@MyTest1(aaa=&quot;牛魔王&quot;, ccc=&#123;&quot;Java&quot;, &quot;C++&quot;&#125;)</span><br><span class="hljs-meta">@MyTest2(&quot;孙悟空&quot;)</span> <span class="hljs-comment">//等价于 @MyTest2(value=&quot;孙悟空&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest1</span> &#123;<br>    <span class="hljs-meta">@MyTest1(aaa=&quot;至尊宝&quot;, bbb = false, ccc = &#123;&quot;python&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解的本质"><a href="#注解的本质" class="headerlink" title="注解的本质"></a>注解的本质</h4><p>1.<code>MyTest1</code>注解本质上是<strong>接口</strong>，每一个注解接口都继承子<code>Annotation</code>接口。</p><p>2.<code>MyTest1</code>注解中的属性本质上是<strong>抽象方法</strong>。</p><p>3.<code>@MyTest1</code>实际上是作为<code>MyTest</code>接口的<strong>实现类对象</strong>。</p><p>4.<code>@MyTest1(aaa=&quot;孙悟空&quot;,bbb=false,ccc=&#123;&quot;Python&quot;,&quot;前端&quot;,&quot;Java&quot;&#125;)</code>里面的属性值，可以通过调用<code>aaa()</code>、<code>bbb()</code>、<code>ccc()</code>方法获取到。</p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%9C%AC%E8%B4%A8.png"></p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>元注解：修饰注解的注解。</p><p>元注解有两个：</p><p><code>@Target</code>是用来声明注解只能用在那些位置，比如：类上、方法上、成员变量上等。</p><p><code>@Retetion</code>是用来声明注解保留周期，比如：源代码时期、字节码时期、运行时期。</p><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/%E5%85%83%E6%B3%A8%E8%A7%A3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//声明@MyTest3注解只能用在类上和方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-comment">//控制使用了@MyTest3注解的代码中，@MyTest3保留到运行时期</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest3&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h4><p>注解的解析：判断类上、方法上、成员变量上是否存在注解，并把注解里的内容解析出来。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.如果注解在类上，先获取类的字节码对象，再获取类上的注解。<br>2.如果注解在方法上，先获取方法对象，再获取方法上的注解。<br>3.如果注解在成员变量上，先获取成员变量对象，再获取变量上的注解。<br>总之：注解在谁身上，就先获取谁，再用谁获取谁身上的注解<br></code></pre></td></tr></table></figure><p><img src="/2024/10/07/Java%E9%AB%98%E7%BA%A7/AnnotatedELement%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90%E6%B3%A8%E8%A7%A3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//声明@MyTest4注解只能用在类上和方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="hljs-comment">//控制使用了@MyTest4注解的代码中，@MyTest4保留到运行时期</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest4&#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">aaa</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">100</span>;<br>    String[] bbb();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@MyTest4(value=&quot;蜘蛛侠&quot;,aaa=99.9, bbb=&#123;&quot;至尊宝&quot;,&quot;黑马&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-meta">@MyTest4(value=&quot;孙悟空&quot;,aaa=199.9, bbb=&#123;&quot;紫霞&quot;,&quot;牛夫人&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//测试类AnnotationTest3解析Demo类上的MyTest4注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest3</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseClass</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.先获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Demo.class;<br><br>        <span class="hljs-comment">//2.解析Demo类上的注解</span><br>        <span class="hljs-keyword">if</span>(c.isAnnotationPresent(MyTest4.class))&#123;<br>            <span class="hljs-comment">//获取类上的MyTest4注解</span><br>            <span class="hljs-type">MyTest4</span> <span class="hljs-variable">myTest4</span> <span class="hljs-operator">=</span> (MyTest4)c.getDeclaredAnnotation(MyTest4.class);<br>            <span class="hljs-comment">//获取MyTests4注解的属性值</span><br>            System.out.println(myTest4.value());<br>            System.out.println(myTest4.aaa());<br>            System.out.println(myTest4.bbb());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.先获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Demo.class;<br><br>        <span class="hljs-comment">//2.解析Demo类中test1方法上的注解MyTest4注解</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;test1&quot;</span>);<br>        <span class="hljs-keyword">if</span>(m.isAnnotationPresent(MyTest4.class))&#123;<br>            <span class="hljs-comment">//获取方法上的MyTest4注解</span><br>            <span class="hljs-type">MyTest4</span> <span class="hljs-variable">myTest4</span> <span class="hljs-operator">=</span> (MyTest4)m.getDeclaredAnnotation(MyTest4.class);<br>            <span class="hljs-comment">//获取MyTests4注解的属性值</span><br>            System.out.println(myTest4.value());<br>            System.out.println(myTest4.aaa());<br>            System.out.println(myTest4.bbb());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例：模拟Junit框架"><a href="#案例：模拟Junit框架" class="headerlink" title="案例：模拟Junit框架"></a>案例：模拟Junit框架</h4><p>需求：定义若干个方法，只要加了<code>MyTest</code>注解，就可以在启动时被触发执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyTest&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest4</span> &#123;<br>    <span class="hljs-meta">@MyTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test1====&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@MyTest</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test2====&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====test3====&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">AnnotationTest4</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTest4</span>();<br>        <span class="hljs-comment">//1.先获取Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> AnnotationTest4.class;<br><br>        <span class="hljs-comment">//2.解析AnnotationTest4类中所有的方法对象</span><br>        Method[] methods = c.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span>(Method m: methods)&#123;<br>            <span class="hljs-comment">//3.判断方法上是否有MyTest注解，有就执行该方法</span><br>            <span class="hljs-keyword">if</span>(m.isAnnotationPresent(MyTest.class))&#123;<br>                m.invoke(a);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>代理思想：被代理者没有能力，或者不愿意去完成某件事情，需要找个人（代理）代替自己去完成这件事。</p><p>动态代理主要是对被代理对象的行为进行代理。</p><h4 id="动态代理的开发步骤"><a href="#动态代理的开发步骤" class="headerlink" title="动态代理的开发步骤"></a>动态代理的开发步骤</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">1.必须定义接口，里面定义一些行为，用来约束被代理对象和代理对象都要完成的事情。<br>2.定义一个实现类实现接口，这个实现类的对象代表被代理的对象。<br>3.定义一个测试类，在里面创建被代理对象，然后为其创建一个代理对象返回。（重点）<br>4.代理对象中，需要模拟收首付款，真正触发被代理对象的行为，然后接收尾款操作。<br>5.通过返回的代理对象进行方法的调用，观察动态代理的执行流程。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Star</span> &#123;<br>    String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//实现类实现接口：被代理的对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BigStar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BigStar</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sing</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在唱歌：&quot;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;谢谢！&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dance</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;正在跳舞&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//定义ProxyUtil工具类，为BigStar对象生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Star <span class="hljs-title function_">createProxy</span><span class="hljs-params">(BigStar bigStar)</span>&#123;<br>               <span class="hljs-comment">/* newProxyInstance(ClassLoader loader,</span><br><span class="hljs-comment">                Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-comment">                InvocationHandler h)</span><br><span class="hljs-comment">                参数1：用于指定一个类加载器（一般用当前类的类加载器）</span><br><span class="hljs-comment">                参数2：指定生成的代理长什么样子，也就是有哪些方法</span><br><span class="hljs-comment">                参数3：用来指定生成的代理对象要干什么事情</span><br><span class="hljs-comment">                */</span><br>        <span class="hljs-comment">// Star starProxy = ProxyUtil.createProxy(s);</span><br>        <span class="hljs-comment">// starProxy.sing(&quot;好日子&quot;) starProxy.dance()</span><br>        <span class="hljs-type">Star</span> <span class="hljs-variable">starProxy</span> <span class="hljs-operator">=</span> (Star) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Star.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 回调方法</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">//proxy：当前的代理对象</span><br>                        <span class="hljs-comment">//method：当前代理调用的方法</span><br>                        <span class="hljs-comment">//args：调用方法的参数</span><br>                        <span class="hljs-comment">// 代理对象要做的事情，会在这里写代码</span><br>                        <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;sing&quot;</span>))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备话筒，收钱20万&quot;</span>);<br>                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;dance&quot;</span>))&#123;<br>                            System.out.println(<span class="hljs-string">&quot;准备场地，收钱1000万&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> method.invoke(bigStar, args);<span class="hljs-comment">//返回方法执行的结果</span><br>                    &#125;<br>                &#125;);<br>        <span class="hljs-keyword">return</span> starProxy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//调用ProxyUtil工具类，为BigStar对象生成代理对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BigStar</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigStar</span>(<span class="hljs-string">&quot;surourou&quot;</span>);<br>        <span class="hljs-type">Star</span> <span class="hljs-variable">starProxy</span> <span class="hljs-operator">=</span> ProxyUtil.createProxy(s);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> starProxy.sing(<span class="hljs-string">&quot;倒数&quot;</span>);<br>        System.out.println(rs);<br><br>        starProxy.dance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>需求：模拟某企业用户管理业务，需包含用户登录，用户删除，用户查询功能，并要统计每个功能的耗时。</p><p>传统方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//用户业务接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 登录功能</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName,String passWord)</span> <span class="hljs-keyword">throws</span> Exception;<br>    <span class="hljs-comment">// 删除用户</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>    <span class="hljs-comment">// 查询用户，返回数组的形式。</span><br>    String[] selectUsers() <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//用户业务实现类（面向接口编程）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName, String passWord)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(passWord))&#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录失败，用户名或密码错误~&quot;</span>);<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;login方法耗时：&quot;</span>+(time2-time1));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;成功删除了1万个用户~&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1500</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;deleteUsers方法耗时：&quot;</span>+(time2-time1));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectUsers() <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;查询出了3个用户&quot;</span>);<br>        String[] names = &#123;<span class="hljs-string">&quot;张全蛋&quot;</span>, <span class="hljs-string">&quot;李二狗&quot;</span>, <span class="hljs-string">&quot;牛爱花&quot;</span>&#125;;<br>        Thread.sleep(<span class="hljs-number">500</span>);<br><span class="hljs-type">long</span> <span class="hljs-variable">time2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;selectUsers方法耗时：&quot;</span>+(time2-time1));<br>        <span class="hljs-keyword">return</span> names;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>存在问题：每一个方法中计算耗时的代码都是重复的，且这些重复的代码并不属于UserSerivce的主要业务代码。</p><p>解决办法：把计算每一个方法的耗时操作，交给代理对象来做。</p><p>先在<code>UserService</code>类中把计算耗时的代码删除：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//用户业务实现类（面向接口编程）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String loginName, String passWord)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(passWord))&#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;您登录失败，用户名或密码错误~&quot;</span>);<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUsers</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;成功删除了1万个用户~&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">1500</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectUsers() <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;查询出了3个用户&quot;</span>);<br>        String[] names = &#123;<span class="hljs-string">&quot;张全蛋&quot;</span>, <span class="hljs-string">&quot;李二狗&quot;</span>, <span class="hljs-string">&quot;牛爱花&quot;</span>&#125;;<br>        Thread.sleep(<span class="hljs-number">500</span>);<br><br>        <span class="hljs-keyword">return</span> names;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后为<code>UserService</code>生成一个动态代理对象，在动态代理中调用目标方法，在调用目标方法之前和之后记录毫秒值，并计算方法运行的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyUtil2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserService <span class="hljs-title function_">createProxy</span><span class="hljs-params">(UserService userService)</span>&#123;<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userServiceProxy</span> <span class="hljs-operator">=</span> (UserService) Proxy.newProxyInstance(<br>                ProxyUtil.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;UserService.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;login&quot;</span>) || method.getName().equals(<span class="hljs-string">&quot;deleteUsers&quot;</span>)|| method.getName().equals(<span class="hljs-string">&quot;selectUsers&quot;</span>))&#123;<br>                            <span class="hljs-comment">//方法运行前记录毫秒值</span><br>                            <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                            <span class="hljs-comment">//执行方法</span><br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(userService, args);<br>                            <span class="hljs-comment">//执行方法后记录毫秒值</span><br>                            <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>                            System.out.println(method.getName() + <span class="hljs-string">&quot;方法执行耗时：&quot;</span> + (endTime - startTime)/ <span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>                            <span class="hljs-keyword">return</span> rs;<br>                        &#125;<span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> method.invoke(userService, args);<br>                            <span class="hljs-keyword">return</span> rs;<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-comment">//返回代理对象</span><br>        <span class="hljs-keyword">return</span> userServiceProxy;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在测试类中为<code>UserService</code>创建代理对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1、创建用户业务对象。</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> ProxyUtil2.createProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>());<br><br>        <span class="hljs-comment">// 2、调用用户业务的功能。</span><br>        <span class="hljs-comment">// 每次用代理对象调用方法时，都会执行InvocationHandler中的invoke方法。</span><br>        userService.login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br><br>        userService.deleteUsers();<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br><br>        String[] names = userService.selectUsers();<br>        System.out.println(<span class="hljs-string">&quot;查询到的用户是：&quot;</span> + Arrays.toString(names));<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><p>基本的通信架构有2种形式：<code>CS</code>架构（Client客户端&#x2F;Server服务端） 、<code>BS</code>架构（Browser浏览器&#x2F;Server服务端）。</p><p><code>CS</code>架构：</p><ul><li>客户端：需要程序员开发。用户需要安装。</li><li>服务端：需要程序员开发实现。</li></ul><p><code>BS</code>架构</p><ul><li>客户端：不需要程序员开发实现。用户需要安装浏览器。</li><li>服务端：需要程序员开发实现。</li></ul><p>网络通信的三要素：</p><ol><li><p><strong>IP</strong>：设备在网络中的地址，是唯一的标识。</p><p><code>192.168. </code>开头的就是常见的局域网地址，范围即为<code>192.168.0.0</code>–<code>192.168.255.255</code>，专门为组织机构内部使用。</p><p><code>127.0.0.1</code>、<code>localhost</code>：代表本机IP，只会寻找当前所在的主机。</p><p><code>ipconfig</code>：查看本机IP地址。</p><p><code>ping</code> IP地址：检查网络是否连通。</p></li><li><p><strong>端口</strong>：应用程序在设备中唯一的标识。</p><p>端口标记正在计算机设备上运行的应用程序的，被规定为一个16位的二进制，范围是<code>0~65535</code>。</p><p>分类：</p><p>周知端口：<code>0~1023</code>，被预先定义的知名应用占用（如：<code>HTTP</code>占用 80，<code>FTP</code>占用21） 。</p><p>注册端口：<code>1024~49151</code>，分配给用户进程或某些应用程序。</p><p>动态端口：<code>49152~65535</code>，之所以称为动态端口，是因为它一般不固定分配某种进程，而是动态分配。</p><p>注意：自己开发的程序一般选择使用注册端口，且一个设备中不能出现两个程序的端口号一样，否则出错。</p></li><li><p><strong>协议</strong>：连接和数据在网络中传输的规则。</p><p><code>UDP</code>(User Datagram Protocol)：用户数据报协议。无连接、不可靠通信。<strong>一次最多发送64K数据</strong>。</p><p><code>TCP</code>(Transmission Control Protocol)：传输控制协议。面向连接、可靠通信（三次握手建立连接，传输数据进行确认，四次挥手断开连接）。</p></li></ol><h4 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h4><p><code>InetAddress</code>代表IP地址。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/InetAddress%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip1</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<span class="hljs-comment">//获取本机IP地址对象</span><br>    System.out.println(ip1.getHostName());<br>    System.out.println(ip1.getHostAddress());<br><br>    <span class="hljs-comment">//获取指定IP或者域名的IP地址对象</span><br>    <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip2</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>    System.out.println(ip2.getHostName());<br>    System.out.println(ip2.getHostAddress());<br><br>    <span class="hljs-comment">//相当于：ping www.baidu.com</span><br>    System.out.println(ip2.isReachable(<span class="hljs-number">6000</span>));<span class="hljs-comment">//6s内是否连通</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h4><p>特点：无连接、不可靠通信。不事先建立连接；发送端每次把要发送的数据（限制在64KB内）、接收端IP、等信息封装成一个数据包，发出去就不管了。</p><h5 id="DatagramSocket、DatagramPacket"><a href="#DatagramSocket、DatagramPacket" class="headerlink" title="DatagramSocket、DatagramPacket"></a>DatagramSocket、DatagramPacket</h5><p>Java提供了一个<code>java.net.DatagramSocket</code>类来实现UDP通信。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/DatagramSocket%E5%92%8CDatagramPacket%E5%AE%9E%E7%8E%B0UDP%E9%80%9A%E4%BF%A1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//UDP客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDP_Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.创建客户端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<span class="hljs-comment">//随意分配端口，也可以指定端口</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请发送数据：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                socket.close();<span class="hljs-comment">//关闭客户端对象</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">byte</span>[] bytes = msg.getBytes();<br><br>            <span class="hljs-comment">//2.创建数据包对象封装成要发出去的数据</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, <span class="hljs-comment">//封装要发出去的数据</span><br>                    bytes.length, <span class="hljs-comment">//发送出去的数据大小（字节个数）</span><br>                    InetAddress.getLocalHost(), <span class="hljs-comment">//服务器的IP地址（找到服务器主机）</span><br>                    <span class="hljs-number">6666</span>); <span class="hljs-comment">//服务器程序的端口</span><br><br>            <span class="hljs-comment">//3.发送数据包的数据</span><br>            socket.send(packet);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//UDP服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDP_Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;启动服务器&quot;</span>);<br>        <span class="hljs-comment">//1.创建服务器对象，注册端口</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">//2.创建数据包对象，用于接收数据</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">64</span>];<span class="hljs-comment">//一次发送的数据不会超过64KB</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//3.使用数据包接收客户端发送的数据</span><br>            socket.receive(packet);<span class="hljs-comment">//服务端会阻塞等待客户端发送数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//接收数据的长度</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), <span class="hljs-number">0</span>, len);<br>            System.out.println(<span class="hljs-string">&quot;数据：&quot;</span> + rs);<br>            System.out.println(<span class="hljs-string">&quot;IP地址：&quot;</span> +packet.getAddress().getHostAddress());<span class="hljs-comment">//获取客服的IP地址</span><br>            System.out.println(<span class="hljs-string">&quot;端口号：&quot;</span> + packet.getPort());<span class="hljs-comment">//获取客户端端口</span><br>            System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//socket.close();//释放资源（但是服务员会一直运行，不用释放资源）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h4><p>特点：面向连接、可靠通信。</p><p>通信双方事先会采用三次握手方式建立可靠连接，实现端到端的通信；底层能保证数据成功传给服务端。</p><p>Java提供了一个<code>java.net.Socket</code>类来实现TCP通信。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><h5 id="客户端Socket"><a href="#客户端Socket" class="headerlink" title="客户端Socket"></a>客户端Socket</h5><p>客户端程序是通过<code>java.net</code>包下的<code>Socket</code>类来实现的。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP%E9%80%9A%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AFSocket.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//TCP客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCP_Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.创建Socket对象，请求与服务器程序连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">//2.从Socket通信管道中得到一个字节输出流，用来发送数据给服务器程序</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">//3.把低级的字节输出流包装成数据输出流（易于写数据）</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请发送数据：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                dos.close();<span class="hljs-comment">//关闭字节输出流</span><br>                socket.close();<span class="hljs-comment">//关闭客户端对象</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//4.写数据出去</span><br>            dos.writeUTF(msg);<br>            dos.flush();<span class="hljs-comment">//需要把数据刷新出去，防止数据还在客户端的内存中</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="服务端ServerSocket"><a href="#服务端ServerSocket" class="headerlink" title="服务端ServerSocket"></a>服务端ServerSocket</h5><p>服务端是通过<code>java.net</code>包下的<code>ServerSocket</code>类来实现的。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E7%AB%AFServerSocket.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//TCP服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCP_Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;启动服务器&quot;</span>);<br>        <span class="hljs-comment">//1.创建ServerSocket对象，同时为服务器注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">//2.使用ServerSocket对象，调用accept方法，等待客户端的连接请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        <span class="hljs-comment">//3.从socket通信管道中得到字节输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">//4.把原始的字节输入流包装成数据输入流（易于读数据）</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//5.使用数据输入流读取客户端发送过来的消息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dis.readUTF();<span class="hljs-comment">//这里服务端会阻塞等待客户端发消息，如果客户端主动退出，这里会报错：java.io.EOFException</span><br>                <span class="hljs-comment">//若客服端比服务端快，服务端底层会缓存消息，直到这里服务端readUTF读取消息</span><br>                System.out.println(rs);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;离线了&quot;</span>);<span class="hljs-comment">//拿到远程客户端地址</span><br>                dis.close();<span class="hljs-comment">//</span><br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="与多个客户端同时通信"><a href="#与多个客户端同时通信" class="headerlink" title="与多个客户端同时通信"></a>与多个客户端同时通信</h5><p>方法：主线程定义循环负责接收客户端Socket管道连接。每接收到一个<code>Socket</code>通信管道后分配一个独立的线程负责处理它。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP%E9%80%9A%E4%BF%A1-%E6%94%AF%E6%8C%81%E4%B8%8E%E5%A4%9A%E4%B8%AA%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%8C%E6%97%B6%E9%80%9A%E4%BF%A1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//客户端使用上述TCP_Client即可</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//ServerReaderThread，独立的线程处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(msg);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;下线：&quot;</span> + socket.getRemoteSocketAddress());<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//服务端TCP_Server2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TCP_Server2</span> &#123;<span class="hljs-comment">//对应使用TCP_Client就好了</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;启动服务器&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            System.out.println(<span class="hljs-string">&quot;上线：&quot;</span> + socket.getRemoteSocketAddress());<br>            <span class="hljs-comment">//把这个客服端对应的Socket通信管道交给一个独立的线程处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例：群聊"><a href="#案例：群聊" class="headerlink" title="案例：群聊"></a>案例：群聊</h5><p>群聊是指一个客户端把消息发出去，其他在线的全部客户端都可以收到消息。</p><p>方法：需要用到<strong>端口转发</strong>的设计思想。服务端需要把在线的<code>Socket</code>管道存储起来，一旦收到一个消息要推送给其他管道。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/TCP%E9%80%9A%E4%BF%A1-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//服务端线程：处理每个客户端的连接</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerChatThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerChatThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(msg);<br>                    <span class="hljs-comment">//把消息分发给全部客户端接收（包括自己）</span><br>                    sendMsgToAll(msg);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;下线：&quot;</span> + socket.getRemoteSocketAddress());<br>                    Chat_Server.onLineSockets.remove(socket);<span class="hljs-comment">//移除离线的Socket</span><br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgToAll</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//发送给全部在线的Socket管道接收</span><br>        <span class="hljs-keyword">for</span>(Socket onLineSocket : Chat_Server.onLineSockets) &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> onLineSocket.getOutputStream();<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>            dos.writeUTF(msg);<br>            dos.flush();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat_Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Socket&gt; onLineSockets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//存储在线客户端Socket</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;启动服务器&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            onLineSockets.add(socket);<br>            System.out.println(<span class="hljs-string">&quot;上线：&quot;</span> + socket.getRemoteSocketAddress());<br>            <span class="hljs-comment">//把这个客服端对应的Socket通信管道交给一个独立的线程处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerChatThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//客户端线程：接收服务端传回来的数据（和服务端线程接收数据的run方法类似）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientChatThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientChatThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(msg);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;自己下线：&quot;</span> + socket.getRemoteSocketAddress());<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chat_Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">//创建独立的线程，从Socket中接收服务器发送过来的消息</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientChatThread</span>(socket).start();<br><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请发送数据：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;成功退出&quot;</span>);<br>                dos.close();<span class="hljs-comment">//关闭字节输出流</span><br>                socket.close();<span class="hljs-comment">//关闭客户端对象</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            dos.writeUTF(msg);<br>            dos.flush();<span class="hljs-comment">//需要把数据刷新出去，防止数据还在客户端的内存中</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例：BS架构"><a href="#案例：BS架构" class="headerlink" title="案例：BS架构"></a>案例：BS架构</h5><p>基本原理：客户端使用浏览器发起请求（不需要开发客户端）。服务端必须按照HTTP协议响应数据。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/BS%E6%9E%B6%E6%9E%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.png"></p><p>注意：服务器必须给浏览器响应HTTP协议规定的数据格式，否则浏览器不识别返回的数据。</p><p>HTTP协议规定：响应给浏览器的数据格式必须满足如下格式。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/HTTP%E5%8D%8F%E8%AE%AE%E5%93%8D%E5%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//服务端线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerBSThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerBSThread</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//立即响应一个网页内容给浏览器展示</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            DataOutputStream dos = new DataOutputStream(os);</span><br><span class="hljs-comment">            dos.writeUTF(&quot;Hello ServerBSThread&quot;);</span><br><span class="hljs-comment">            dos.close();</span><br><span class="hljs-comment">            //使用这种方式浏览器无法识别，会显示：127.0.0.1 发送了无效的响应。必须要遵守HTTP协议，浏览器才能识别。</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type: text/html; charset=utf-8&quot;</span>);<br>            ps.println();<br>            ps.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red; font-size:120px; text-align:center&#x27;&gt; surourou666 &lt;/div&gt;&quot;</span>);<br><br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BS_Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;启动服务器&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            System.out.println(<span class="hljs-string">&quot;上线：&quot;</span> + socket.getRemoteSocketAddress());<br>            <span class="hljs-comment">//把这个客服端对应的Socket通信管道交给一个独立的线程处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBSThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="案例：BS架构（使用线程池优化）"><a href="#案例：BS架构（使用线程池优化）" class="headerlink" title="案例：BS架构（使用线程池优化）"></a>案例：BS架构（使用线程池优化）</h5><p>每次请求都开一个新线程，在高并发时，容易引起宕机，所以使用线程池进行优化。</p><p><img src="/2024/09/30/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BC%98%E5%8C%96BS%E6%9E%B6%E6%9E%84.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//服务端线程，和上面的ServerBSThread内容是一样的。</span><br><span class="hljs-comment">//区别：ServerBSThread继承了Thread类，ServerBSpoolRunnable实现了Runnable接口，便于线程池使用。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerBSpoolRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerBSpoolRunnable</span><span class="hljs-params">(Socket socket)</span> &#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//立即响应一个网页内容给浏览器展示</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            DataOutputStream dos = new DataOutputStream(os);</span><br><span class="hljs-comment">            dos.writeUTF(&quot;Hello ServerBSThread&quot;);</span><br><span class="hljs-comment">            dos.close();</span><br><span class="hljs-comment">            //使用这种方式浏览器无法识别，会显示：127.0.0.1 发送了无效的响应。必须要遵守HTTP协议，浏览器才能识别。</span><br><span class="hljs-comment">             */</span><br><br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type: text/html; charset=utf-8&quot;</span>);<br>            ps.println();<br>            ps.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red; font-size:120px; text-align:center&#x27;&gt; surourou666 &lt;/div&gt;&quot;</span>);<br><br>            socket.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BSpool_Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;启动服务器&quot;</span>);<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-comment">//创建一个线程池，负责处理通信管道的任务</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">16</span>*<span class="hljs-number">2</span>, <span class="hljs-number">16</span>*<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">8</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            System.out.println(<span class="hljs-string">&quot;上线：&quot;</span> + socket.getRemoteSocketAddress());<br><br>            pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBSpoolRunnable</span>(socket));<span class="hljs-comment">//使用线程池处理任务</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>线程（<code>Thread</code>）是一个程序内部的一条执行流程。</p><p>程序中如果只有一条执行流程，那这个程序就是单线程的程序。</p><p><strong>多线程</strong>是指从软硬件上实现的<strong>多条执行流程</strong>的技术（多条线程由<code>CPU</code>负责调度执行）。</p><p>Java是通过<code>java.lang.Thread</code>类的对象来代表线程的。 </p><h4 id="多线程的创建方式"><a href="#多线程的创建方式" class="headerlink" title="多线程的创建方式"></a>多线程的创建方式</h4><h5 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h5><p>1.定义一个子类MyThread继承线程类<code>java.lang.Thread</code>，重写<code>run()</code>方法。</p><p>2.创建<code>MyThread</code>类的对象。</p><p>3.调用线程对象的<code>start()</code>方法启动线程（启动后还是执行<code>run</code>方法的）。</p><p>优点：编码简单。</p><p>缺点：线程类已经继承<code>Thread</code>，无法继承其他类，不利于功能的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程MyThread输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>t.start();<span class="hljs-comment">//启动线程，自动执行run方法</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;主线程main输出：&quot;</span> + i);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.启动线程必须是调用start方法，不是调用run方法。<strong>直接调用run方法会当成普通方法执行</strong>，此时相当于还是单线程执行，这样主线程一直是先跑完的，相当于是一个单线程的效果。只有调用start方法才是启动一个新的线程执行。</p><p>2.不要把主线程任务放在启动子线程之前。这样会导致先运行完主线程任务，然后再启动子线程。</p><h5 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h5><p>1.定义一个线程任务类<code>MyRunnable</code>实现<code>Runnable</code>接口，重写<code>run()</code>方法。</p><p>2.创建<code>MyRunnable</code>任务对象。（简化：创建<code>Runnable</code>的匿名内部类对象。）</p><p>3.把<code>MyRunnable</code>任务对象交给<code>Thread</code>处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Thread</span><span class="hljs-params">(Runnable target)</span><span class="hljs-comment">//封装Runnable对象成为线程对象</span><br></code></pre></td></tr></table></figure><p>4.调用线程对象的<code>start()</code>方法启动线程。</p><p>优点：任务类只是实现接口，可以继续继承其他类、实现其他接口，扩展性强。</p><p>缺点：需要多一个<code>Runnable</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程MyRunnable输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<span class="hljs-comment">//创建任务对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target).start();<span class="hljs-comment">//把任务对象交给一个线程对象处理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;主线程main输出：&quot;</span> + i);<br>&#125;<br><br><span class="hljs-comment">//直接创建Runnable接口的匿名内部类形式（任务对象）</span><br><span class="hljs-comment">//简化方式1：</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">target2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程1输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target2).start();<br><br><span class="hljs-comment">//简化方式2：</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程2输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;).start();<br><br><span class="hljs-comment">//简化方式3：</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;子线程3输出：&quot;</span> + i);<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h5 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h5><p>1.创建任务对象</p><ul><li>定义一个类实现<code>Callable</code>接口，重写<code>call</code>方法，封装要做的事情，和要返回的数据。</li><li>把<code>Callable</code>类型的对象封装成<code>FutureTask</code>（线程任务对象）。</li></ul><p>2.把线程任务对象交给<code>Thread</code>对象。</p><p>3.调用<code>Thread</code>对象的<code>start</code>方法启动线程。</p><p>4.线程执行完毕后、通过<code>FutureTask</code>对象的的<code>get</code>方法去获取线程任务执行的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> FutureTask&lt;&gt;(Callable call)<span class="hljs-comment">//把Callable对象封装成FutureTask对象。</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception<span class="hljs-comment">//获取线程执行call方法返回的结果。</span><br></code></pre></td></tr></table></figure><p>优点：线程任务类只是实现接口，可以继续继承类和实现接口，扩展性强；可以在线程执行完毕后去获取线程执行的结果。</p><p>缺点：编码复杂一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//描述线程的任务，返回线程执行返回后的结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;求出1-&quot;</span> + n + <span class="hljs-string">&quot;的和是：&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//创建Callable对象</span><br>Callable&lt;String&gt; call = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//把Callable对象封装成一个FutureTask对象（任务对象）</span><br><span class="hljs-comment">//未来任务对象实现了Runnable对象，可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完毕后的结果</span><br>FutureTask&lt;String&gt; f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call);<br><span class="hljs-comment">//把任务对象交给一个Thread对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f1).start();<br><br><span class="hljs-comment">//获取线程执行完毕后返回的结果</span><br><span class="hljs-comment">//如果执行到这里，上面的线程还没有执行完毕，这里的代码会暂停，等待上面线程执行完毕后才会获取结果</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> f1.get();<br>System.out.println(rs);<br></code></pre></td></tr></table></figure><h4 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h4><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Thread%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(t.getName() + <span class="hljs-string">&quot;输出：&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;1号线程&quot;</span>);<br>    t1.start();<br>    t1.join();<span class="hljs-comment">//join方法：让当前调用这个方法的线程先执行完</span><br>    System.out.println(t1.getName());<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    t2.setName(<span class="hljs-string">&quot;2号线程&quot;</span>);<br>    t2.start();<br>    Thread.sleep(<span class="hljs-number">2000</span>);<span class="hljs-comment">//让当前执行的线程暂停5秒</span><br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    System.out.println(m.getName());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;主线程main输出：&quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>线程安全问题：多个线程，同时操作同一个共享资源的时候，可能会出现业务安全问题。</p><p>线程安全问题出现的原因：</p><ul><li>存在多个线程在同时执行。</li><li>同时访问一个共享资源。</li><li>存在修改该共享资源。</li></ul><p>场景：小明和小红是一对夫妻，他们有一个共同的账户，余额是10万元，如果小明和小红同时来取钱，并且2人各自都在取钱10万元。</p><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%8F%96%E9%92%B1%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.png"></p><h5 id="用程序模拟线程安全问题"><a href="#用程序模拟线程安全问题" class="headerlink" title="用程序模拟线程安全问题"></a>用程序模拟线程安全问题</h5><p>需求：小明和小红是一对夫妻，他们有一个共同的账户，余额是10万元，模拟2人同时去取钱10万。</p><ol><li>需要提供一个账户类，接着创建一个账户对象代表2个人的共享账户。</li><li>需要定义一个线程类（用于创建两个线程，分别代表小明和小红）。</li><li>创建2个线程，传入同一个账户对象给2个线程处理。</li><li>启动2个线程，同时去同一个账户对象中取钱10万。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Account类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<span class="hljs-comment">//卡号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<span class="hljs-comment">//余额</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<span class="hljs-comment">//获取当前取钱的线程</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功&quot;</span>);<br>            <span class="hljs-built_in">this</span>.money -= money;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(name + <span class="hljs-string">&quot;来取钱，余额不足&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//DrawThread类，取钱线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Account acc;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        acc.drawMoney(<span class="hljs-number">100000</span>);<span class="hljs-comment">//取钱10万元</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ICBC&quot;</span>, <span class="hljs-number">100000</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-comment">/*可能的结果：（出现线程安全问题）</span><br><span class="hljs-comment">小红来取钱100000.0成功</span><br><span class="hljs-comment">小红来取钱后，余额剩余：0.0</span><br><span class="hljs-comment">小明来取钱100000.0成功</span><br><span class="hljs-comment">小明来取钱后，余额剩余：-100000.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>线程同步让<strong>多个线程实现先后依次访问共享资源</strong>，这样就解决了线程安全问题。</p><p>线程同步的常见方案：<strong>加锁</strong>，每次只允许一个线程加锁，加锁后才能进入访问，访问完毕后自动解锁，然后其他线程才能再加锁进来。</p><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><p>作用：把访问共享资源的核心代码给上锁，以此保证线程安全。</p><p>原理：每次只允许一个线程加锁后进入，执行完毕后自动解锁，其他线程才可以进来执行。</p><p>注意：对于当前同时执行的线程来说，同步锁必须是同一把（同一个对象），否则会出bug。</p><ul><li>使用共享资源作为锁对象，对于<strong>实例方法使用this</strong>作为锁对象。</li><li>对于<strong>静态方法</strong>建议使用<strong>字节码（类名.class）</strong>对象作为锁对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<span class="hljs-comment">//卡号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<span class="hljs-comment">//余额</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span>(Account.class)&#123;<br>            <span class="hljs-comment">//2.静态方法使用类名.class作为同步锁</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<span class="hljs-comment">//获取当前取钱的线程</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<span class="hljs-comment">//1.实例方法使用this当前对象作为同步锁</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功&quot;</span>);<br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱，余额不足&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><p>作用：把访问共享资源的核心方法给上锁，以此保证线程安全。</p><p>原理：每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行。</p><p>同步方法底层原理：</p><ul><li>同步方法其实底层也是有<strong>隐式锁对象</strong>的，只是<strong>锁的范围是整个方法代码</strong>。</li><li>如果方法是<strong>实例方法</strong>：同步方法默认用<strong>this</strong>作为锁对象。</li><li>如果方法是<strong>静态方法</strong>：同步方法默认用<strong>类名.class</strong>作为锁对象。</li></ul><p>同步方法与同步代码块的区别：</p><ul><li>范围上：同步代码块锁的范围更小，同步方法锁的范围更大。</li><li>可读性：同步方法更好。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//同步方法使用synchronized声明即可</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h5><p>Lock是接口，不能直接实例化，可以采用它的实现类ReentrantLock来构建Lock锁对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//ReentrantLock类构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span><span class="hljs-comment">//获得Lock锁的实现类对象</span><br><br><span class="hljs-comment">//Lock类的常用方法</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span><span class="hljs-comment">//获得锁</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span><span class="hljs-comment">//释放锁</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<span class="hljs-comment">//卡号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;<span class="hljs-comment">//余额</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(); <span class="hljs-comment">//声明一个锁，不能被修改</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<span class="hljs-comment">//获取当前取钱的线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            lk.lock();<span class="hljs-comment">//加锁</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱&quot;</span> + money + <span class="hljs-string">&quot;成功&quot;</span>);<br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱，余额不足&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">//即便加锁后中间程序出现了异常，最后还是可以进行解锁</span><br>            lk.unlock();<span class="hljs-comment">//解锁</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h4><p>当多个线程共同操作共享的资源时，线程间通过某种方式互相告知自己的状态，以相互协调，并避免无效的资源争夺。</p><p>线程通信的常见模型（<strong>生产者与消费者模型</strong>）：</p><ul><li>生产者线程负责生产数据。</li><li>消费者线程负责消费生产者生产的数据。</li><li>生产者生产完数据应该等待自己，通知消费者消费；消费者消费完数据也应该等待自己，再通知生产者生产。</li></ul><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><ul><li>3个生产者线程，负责生产包子，每个线程每次只能生产1个包子放在桌子上。</li><li>2个消费者线程负责吃包子，每人每次只能从桌子上拿1个包子吃。</li></ul><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Object%E7%B1%BB%E7%9A%84%E7%AD%89%E5%BE%85%E5%92%8C%E5%94%A4%E9%86%92%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Desk类：共同资源</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Desk</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//生产者：厨师1 厨师2 厨师3</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//判断是否有包子</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(list.size() == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//没包子则生产包子</span><br>                list.add(name + <span class="hljs-string">&quot;做的肉包子&quot;</span>);<br>                System.out.println(name + <span class="hljs-string">&quot;做了一个肉包子&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<span class="hljs-comment">//做包子需要时间</span><br>                <span class="hljs-comment">//先：唤醒别人，后：等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//有包子则不做了</span><br>                <span class="hljs-comment">//先：唤醒别人，后：等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//消费者：吃货1 吃货2</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//判断是否有包子</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(list.size() == <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//有包子则消费包子</span><br>                System.out.println(name + <span class="hljs-string">&quot;吃了：&quot;</span> + list.get(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot;做的肉包子&quot;</span>);<br>                list.clear();<br>                Thread.sleep(<span class="hljs-number">2000</span>);<span class="hljs-comment">//做包子需要时间</span><br>                <span class="hljs-comment">//先：唤醒别人，后：等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//没包子则不吃了</span><br>                <span class="hljs-comment">//先：唤醒别人，后：等待自己</span><br>                <span class="hljs-built_in">this</span>.notifyAll();<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//生产者和消费者模型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Desk</span> <span class="hljs-variable">desk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Desk</span>();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                desk.put();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;厨师1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                desk.put();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;厨师2&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                desk.put();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;厨师3&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                desk.get();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;吃货1&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                desk.get();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;吃货2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>线程池是一个可以<strong>复用线程</strong>的技术。</p><p>不使用线程池的问题：用户每发起一个请求，后台就需要创建一个新线程来处理，下次新任务来了又要创建新线程处理，  而创建新线程的开销是很大的，并且请求过多时，肯定会产生大量的线程出来，这样会严重影响系统的性能。</p><h5 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h5><p>线程池的接口：<code>ExecutorService</code></p><p>1.使用<code>ExecutorService</code>的实现类<code>ThreadPoolExecutor</code>自创建一个线程池对象。</p><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/ThreadPoolExecutor%E6%9E%84%E9%80%A0%E5%99%A8.png"></p><p>注意：</p><ul><li>临时线程创建的时间：新任务提交时发现<strong>核心线程都在忙</strong>，<strong>任务队列也满了</strong>，并且还可以创建临时线程，此时才会创建临时线程。</li><li>拒绝新任务的时间：<strong>核心线程和临时线程都在忙</strong>，<strong>任务队列也满了</strong>，新的任务过来的时候才会开始拒绝任务。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//线程池</span><br><span class="hljs-comment">//通过ThreadPoolExecutor创建一个线程池对象</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                                              <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">4</span>), <span class="hljs-comment">//基于数组实现，可以设置任务队列大小；LinkedBlockingQueue&lt;&gt;()是基于链表实现，不限制大小</span><br>                                              Executors.defaultThreadFactory(), <span class="hljs-comment">//方法1:获取默认的线程池工厂 方法2:使用Thread::new（方法3的简化版本）</span><br>                                              <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()); <span class="hljs-comment">//任务拒绝策略</span><br><span class="hljs-comment">//方法3:为线程池创建线程池工厂：上面用Executors.defaultThreadFactory()获取默认的线程池工厂</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>2.使用<code>Executors</code>（线程池的工具类）调用方法返回不同特点的线程池对象。</p><h5 id="线程池处理Runnable任务"><a href="#线程池处理Runnable任务" class="headerlink" title="线程池处理Runnable任务"></a>线程池处理Runnable任务</h5><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/ExecutorService%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E6%96%B0%E4%BB%BB%E5%8A%A1%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; 输出&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//Thread.sleep(1000);</span><br>            Thread.sleep(Integer.MAX_VALUE);<span class="hljs-comment">//可以让核心线程一直在忙</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//线程池</span><br>        <span class="hljs-comment">//通过ThreadPoolExecutor创建一个线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">4</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()); <span class="hljs-comment">//任务拒绝策略（有4种）</span><br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable1</span>();<br>        pool.execute(target);<span class="hljs-comment">//线程池自动创建一个新线程，自动处理这个任务</span><br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//等前面3个核心任务执行完毕，会复用前面的核心线程；若使用Thread.sleep(Integer.MAX_VALUE);可以让前面3个核心线程一直在忙</span><br>        pool.execute(target);<span class="hljs-comment">//这4个会进入任务队列进行等待</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//3个核心线程在忙，4个任务队列已满，则到了临时线程的创建时机</span><br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//3个核心线程在忙，4个任务队列已满，2个临时线程在忙，已经忙不过来了，到了新任务的拒绝时机</span><br>        <span class="hljs-comment">//报错：java.util.concurrent.RejectedExecutionException</span><br>        <span class="hljs-comment">//若使用new ThreadPoolExecutor.CallerRunsPolicy()策略，则由main主线程来服务</span><br>        pool.execute(target);<br><br>        <span class="hljs-comment">//pool.shutdown();//等待线程池的任务全部执行完毕后，再关闭线程池</span><br><br>        <span class="hljs-comment">//pool.shutdownNow();//立即关闭线程池，不管任务是否执行完毕</span><br>        <span class="hljs-comment">//若任务未执行完关闭，会报错：java.lang.InterruptedException: sleep interrupted</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="线程池处理Callable任务"><a href="#线程池处理Callable任务" class="headerlink" title="线程池处理Callable任务"></a>线程池处理Callable任务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//MyCallable类再上述实现Runnable接口中已实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//线程池</span><br>        <span class="hljs-comment">//通过ThreadPoolExecutor创建一个线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">4</span>), <span class="hljs-comment">//基于数组实现，可以设置任务队列大小；LinkedBlockingQueue&lt;&gt;()是基于链表实现，不限制大小</span><br>                Executors.defaultThreadFactory(), <span class="hljs-comment">//方法1:获取默认的线程池工厂 方法2:使用Thread::new（方法3的简化版本）</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()); <span class="hljs-comment">//任务拒绝策略</span><br><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br><br>        System.out.println(f1.get());<br>        System.out.println(f2.get());<br>        System.out.println(f3.get());<br>        System.out.println(f4.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Executors工具类实现线程池"><a href="#Executors工具类实现线程池" class="headerlink" title="Executors工具类实现线程池"></a>Executors工具类实现线程池</h5><p><code>Executors</code>是一个线程池的工具类，提供了很多静态方法用于返回不同特点的线程池对象。 </p><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Executors%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//通过Executor创建一个线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<span class="hljs-comment">//内部还是使用了ThreadPoolExecutor来创建线程池对象</span><br><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br><br>        System.out.println(f1.get());<br>        System.out.println(f2.get());<br>        System.out.println(f3.get());<br>        System.out.println(f4.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Executors</code>使用可能存在的陷阱：大型并发系统环境中使用<code>Executors</code>如果不注意可能会出现系统风险。</p><p><strong>阿里巴巴Java开发手册【强制】</strong>线程池不允许使用<code>Executors</code>去创建，而是通过<code>ThreadPoolExecutor</code>的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p><strong>说明：</strong><code>Executors</code>返回的线程池对象的弊端如下：</p><p>1.<code>FixedThreadPool</code>和 <code>SingleThreadPool</code>：允许的请求队列长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致<code>OOM</code>。</p><p>2.<code>CachedThreadPool</code>：允许的创建线程数量为<code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致<code>OOM</code>。</p><p><strong>核心线程池数量的配置</strong>：</p><ul><li>计算密集型的任务：核心线程数量 &#x3D; <code>CPU</code>核数 + 1</li><li><code>IO</code>密集型的任务：核心线程数量 &#x3D; <code>CPU</code>核数 * 2</li></ul><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><h5 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h5><p><strong>正在运行的程序（软件）</strong>就是一个独立的进程。线程是属于进程的，一个进程中可以同时运行很多个线程。进程中的<strong>多个线程</strong>其实是<strong>并发</strong>和<strong>并行</strong>执行的。</p><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><p>进程中的线程是由CPU负责调度执行的，但CPU能同时处理线程的数量有限，为了保证全部线程都能往前执行，<strong>CPU会轮询为系统的每个线程服务</strong>，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。</p><h5 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h5><p>在同一个时刻上，同时有<strong>多个线程在被CPU调度</strong>执行。</p><h5 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h5><p>Java总共定义了线程的6种状态，6种状态都定义在<code>Thread</code>类的<strong>内部枚举类</strong>中。</p><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%846%E7%A7%8D%E7%8A%B6%E6%80%81%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.png"></p><p><img src="/2024/09/29/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%846%E7%A7%8D%E7%8A%B6%E6%80%81.png"></p><h4 id="悲观锁、乐观锁"><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h4><p>1.悲观锁：一上来就加锁，每次只能一个线程进入访问完毕后，再解锁。线程安全，性能较差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">//记录浏览人次</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<span class="hljs-comment">//1.悲观锁</span><br>                System.out.println(<span class="hljs-string">&quot;count ===&gt; &quot;</span> + (++count));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//悲观锁：一上来就加锁，没有安全感，每次只能一个线程进入访问完毕后，再解锁。线程安全，性能较差。</span><br>        <span class="hljs-comment">//乐观锁：一开始不上锁，认为是没有问题的，大家一起跑，等要出现线程安全问题的时候才开始控制。线程安全，性能较好。</span><br><br>        <span class="hljs-comment">//需求：1个静态变量，100个线程，每个线程对其加100次。</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable2</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<span class="hljs-comment">//1.悲观锁</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.乐观锁：一开始不上锁，认为是没有问题的，大家一起跑，等要出现线程安全问题的时候才开始控制。线程安全，性能较好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">// 整数修改的乐观锁：原子类实现的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<span class="hljs-comment">//2.乐观锁</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;count ===&gt; &quot;</span> + count.incrementAndGet());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//悲观锁：一上来就加锁，没有安全感，每次只能一个线程进入访问完毕后，再解锁。线程安全，性能较差。</span><br>        <span class="hljs-comment">//乐观锁：一开始不上锁，认为是没有问题的，大家一起跑，等要出现线程安全问题的时候才开始控制。线程安全，性能较好。</span><br><br>        <span class="hljs-comment">//需求：1个静态变量，100个线程，每个线程对其加100次。</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable3</span>();<span class="hljs-comment">//2.乐观锁</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//AtomicInteger类源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">incrementAndGet</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//this就是这个原子类对象</span><br>    <span class="hljs-keyword">return</span> U.getAndAddInt(<span class="hljs-built_in">this</span>, VALUE, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object o, <span class="hljs-type">long</span> offset, <span class="hljs-type">int</span> delta)</span> &#123;<br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-keyword">do</span> &#123;<span class="hljs-type">vv</span><br>        <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> getIntVolatile(o, offset);<span class="hljs-comment">//从地址处offset处获得原子类对象的值v</span><br>    &#125; <span class="hljs-keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));<span class="hljs-comment">//若成功修改值v，则退出循环；否则继续尝试修改</span><br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br><span class="hljs-meta">@IntrinsicCandidate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">weakCompareAndSetInt</span><span class="hljs-params">(Object o, <span class="hljs-type">long</span> offset,</span><br><span class="hljs-params">                                          <span class="hljs-type">int</span> expected,</span><br><span class="hljs-params">                                          <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">return</span> compareAndSetInt(o, offset, expected, x);<span class="hljs-comment">//若v值未被修改，则进行修改</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>有100份礼品，小红，小明两人同时发送，当剩下的礼品小于10份的时候则不再送出，利用多线程模拟该过程并将线程的名称打印出来。并最后在控制台分别打印小红，小明各自送出多少分礼物。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; gift;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendThread</span><span class="hljs-params">(List&lt;String&gt; gift, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.gift = gift;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-comment">//小明、小红发礼物出去</span><br>        <span class="hljs-comment">//实现线程安全问题：锁必须唯一</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (gift) &#123;<span class="hljs-comment">//注意，这里不能用this作为锁，因为this是SendThread对象，小明和小红是两个不同的SendThread对象，不是唯一的</span><br>                <span class="hljs-keyword">if</span>(gift.size() &lt; <span class="hljs-number">10</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> gift.remove(r.nextInt(gift.size()));<br>                System.out.println(name + <span class="hljs-string">&quot;发出了：&quot;</span> + rs);<br>                count++;<span class="hljs-comment">//每个SendThread对象都有一个count，计算发出礼物的份数</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.拿100份礼物到程序中</span><br>        List&lt;String&gt; gift = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        String[] names = &#123;<span class="hljs-string">&quot;口红&quot;</span>, <span class="hljs-string">&quot;包包&quot;</span>, <span class="hljs-string">&quot;鲜花&quot;</span>, <span class="hljs-string">&quot;剃须刀&quot;</span>, <span class="hljs-string">&quot;皮带&quot;</span>, <span class="hljs-string">&quot;手表&quot;</span>&#125;;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            gift.add(names[r.nextInt(names.length)] + (i+<span class="hljs-number">1</span>));<br>        &#125;<br><br>        <span class="hljs-type">SendThread</span> <span class="hljs-variable">xm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendThread</span>(gift, <span class="hljs-string">&quot;小明&quot;</span>);<br>        xm.start();<br>        <span class="hljs-type">SendThread</span> <span class="hljs-variable">xh</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">SendThread</span>(gift, <span class="hljs-string">&quot;小红&quot;</span>);<br>        xh.start();<br><br>        xm.join();<br>        xh.join();<span class="hljs-comment">//两个线程结束后再统计count数</span><br><br>        System.out.println(xm.getCount());<br>        System.out.println(xh.getCount());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的File类和IO流</title>
    <link href="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/"/>
    <url>/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p><code>File</code>是<code>java.io.</code>包下的类， <code>File</code>类的对象，用于代表<strong>当前操作系统的文件（可以是文件、或文件夹）</strong>。</p><p>注意：<code>File</code>类只能对文件本身进行操作，<strong>不能读写文件里面存储的数据</strong>。</p><h4 id="File类创建对象"><a href="#File类创建对象" class="headerlink" title="File类创建对象"></a>File类创建对象</h4><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/%E5%88%9B%E5%BB%BAFile%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1.png"></p><p>注意：</p><p>1.<code>File</code>对象既可以代表文件、也可以代表文件夹。</p><p>2.<code>File</code>封装的对象仅仅是一个路径名，这个路径可以是存在的，也允许是不存在的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//下面3种方法都能创建File对象，第3种可以跨平台使用</span><br><span class="hljs-comment">//File f1 = new File(&quot;E:\\2_学习\\Java\\test.txt&quot;);</span><br><span class="hljs-comment">//File f1 = new File(&quot;E:/2_学习/Java/test.txt&quot;);</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:&quot;</span> + File.separator + <span class="hljs-string">&quot;2_学习&quot;</span> + File.separator + <span class="hljs-string">&quot;Java&quot;</span> + File.separator + <span class="hljs-string">&quot;test.txt&quot;</span>);<br>System.out.println(f1.length());<span class="hljs-comment">//文件的大小</span><br>System.out.println(f1.exists());<span class="hljs-comment">//文件是否存在</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/你好&quot;</span>);<span class="hljs-comment">//File可以指代不存在的文件路径</span><br><span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src/itheima.txt&quot;</span>);<span class="hljs-comment">//相对路径</span><br></code></pre></td></tr></table></figure><p>绝对路径：从盘符开始。</p><p>相对路径：不带盘符，默认直接到当前工程下的目录寻找文件。</p><h4 id="File类判断文件类型、获取文件信息"><a href="#File类判断文件类型、获取文件信息" class="headerlink" title="File类判断文件类型、获取文件信息"></a>File类判断文件类型、获取文件信息</h4><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/File%E7%B1%BB%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:&quot;</span> + File.separator + <span class="hljs-string">&quot;2_学习&quot;</span> + File.separator + <span class="hljs-string">&quot;Java&quot;</span> + File.separator + <span class="hljs-string">&quot;test.txt&quot;</span>);<br>System.out.println(f1.length());<span class="hljs-comment">//文件的大小</span><br>System.out.println(f1.exists());<span class="hljs-comment">//文件是否存在</span><br>System.out.println(f1.isFile());<span class="hljs-comment">//判断是否是文件</span><br>System.out.println(f1.isDirectory());<span class="hljs-comment">//判断是否是文件夹</span><br>System.out.println(f1.getName());<span class="hljs-comment">//获取文件名称（包含后缀）</span><br><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> f1.lastModified();<span class="hljs-comment">//获取文件的最后修改时间</span><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>System.out.println(sdf.format(time));<br><br><span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src/itheima.txt&quot;</span>);<span class="hljs-comment">//相对路径</span><br>System.out.println(f3.getPath());<span class="hljs-comment">//获取创建文件对象时，使用的路径：helloworld-app\src\itheima.txt</span><br>System.out.println(f3.getAbsolutePath());<span class="hljs-comment">//获取绝对路径：E:\2_学习\Java\code\javasepro\helloworld-app\src\itheima.txt</span><br></code></pre></td></tr></table></figure><h4 id="File类创建文件和删除文件"><a href="#File类创建文件和删除文件" class="headerlink" title="File类创建文件和删除文件"></a>File类创建文件和删除文件</h4><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/File%E7%B1%BB%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E5%92%8C%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6.png"></p><p>注意：<code>delete</code>方法默认只能删除<strong>文件和空文件夹</strong>，删除后的文件<strong>不会进入回收站</strong>。<code>delete</code>方法<strong>不能删除非空文件夹</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">File</span> <span class="hljs-variable">fi1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/hello.txt&quot;</span>);<br>System.out.println(fi1.createNewFile());<span class="hljs-comment">//必须抛出异常：throws IOException，因为有可能电脑中无E盘</span><br><br><span class="hljs-type">File</span> <span class="hljs-variable">fi2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/aaa&quot;</span>);<span class="hljs-comment">//只能创建一级文件夹</span><br>System.out.println(fi2.mkdir());<br><br><span class="hljs-type">File</span> <span class="hljs-variable">fi3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:/aaa/bbb/ccc&quot;</span>);<span class="hljs-comment">//可以创建多级文件夹</span><br>System.out.println(fi3.mkdirs());<br><br>System.out.println(fi2.delete());<span class="hljs-comment">//删除文件、空文件夹，不能删除非空文件夹</span><br></code></pre></td></tr></table></figure><h4 id="File类遍历文件夹"><a href="#File类遍历文件夹" class="headerlink" title="File类遍历文件夹"></a>File类遍历文件夹</h4><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/File%E7%B1%BB%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p><p>使用<code>listFiles</code>方法时的注意事项：</p><p>当主调是文件，或者路径不存在时，返回<code>null</code>。</p><p>当主调是空文件夹时，返回一个长度为0的数组。</p><p>当主调是一个有内容的文件夹时，将里面所有<strong>一级文件和文件夹的路径</strong>放在<code>File</code>数组中返回。</p><p>当主调是一个文件夹，且里面有隐藏文件时，将里面所有文件和文件夹的路径放在<code>File</code>数组中返回，<strong>包含隐藏文件</strong>。</p><p>当主调是一个文件夹，但是<strong>没有权限</strong>访问该文件夹时，返回<code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\2_学习\\Java&quot;</span>);<br>String[] names = file1.list();<span class="hljs-comment">//获取当前目录下的一级文件名称</span><br><span class="hljs-keyword">for</span> (String name : names) &#123;<br>    System.out.println(name);<br>&#125;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\2_学习\\Java&quot;</span>);<br>File[] files = file2.listFiles();<span class="hljs-comment">//获取当前目录下的一级文件对象</span><br><span class="hljs-keyword">for</span> (File file : files) &#123;<br>    System.out.println(file.getAbsolutePath());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="猴子吃桃问题（递归）"><a href="#猴子吃桃问题（递归）" class="headerlink" title="猴子吃桃问题（递归）"></a>猴子吃桃问题（递归）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">猴子第一天摘下若干桃子，当即吃了一半，觉得好不过瘾，于是又多吃了一个；</span><br><span class="hljs-comment">第二天又吃了前天剩余桃子数量的一半，觉得好不过瘾，于是又多吃了一个；</span><br><span class="hljs-comment">以后每天都是吃前天剩余桃子数量的一半，觉得好不过瘾，又多吃了一个；</span><br><span class="hljs-comment">等到第10天的时候发现桃子只有1个了。</span><br><span class="hljs-comment">需求：请问猴子第一天摘了多少个桃子？</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//f(x) - f(x)/2 - 1 = f(x+1)</span><br>        <span class="hljs-comment">//f(x) = 2f(x+1) + 2</span><br>        System.out.println(f(<span class="hljs-number">1</span>));<span class="hljs-comment">//1534</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">if</span>( i == <span class="hljs-number">10</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(i+<span class="hljs-number">1</span>) + <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//或throws Exception</span><br>        searchFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:&quot;</span>), <span class="hljs-string">&quot;ToDesk.exe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">searchFile</span><span class="hljs-params">(File dir, String fileName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 1、把非法的情况都拦截住</span><br>        <span class="hljs-keyword">if</span>(dir == <span class="hljs-literal">null</span> || !dir.exists() || dir.isFile())&#123;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 代表无法搜索</span><br>        &#125;<br><br>        <span class="hljs-comment">// 2、dir不是null，存在，且不是文件，一定是目录对象。</span><br>        <span class="hljs-comment">// 获取当前目录下的全部一级文件对象。</span><br>        File[] files = dir.listFiles();<br><br>        <span class="hljs-comment">// 3、判断当前目录下是否存在一级文件对象，以及是否可以拿到一级文件对象。</span><br>        <span class="hljs-keyword">if</span>(files != <span class="hljs-literal">null</span> &amp;&amp; files.length &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//判断是否有一级文件对象</span><br>            <span class="hljs-comment">// 4、遍历全部一级文件对象。</span><br>            <span class="hljs-keyword">for</span> (File f : files) &#123;<br>                <span class="hljs-comment">// 5、判断文件是否是文件,还是文件夹</span><br>                <span class="hljs-keyword">if</span>(f.isFile())&#123;<br>                    <span class="hljs-comment">// 是文件，判断这个文件名是否是我们要找的</span><br>                    <span class="hljs-keyword">if</span>(f.getName().contains(fileName))&#123;<br>                        System.out.println(<span class="hljs-string">&quot;找到了：&quot;</span> + f.getAbsolutePath());<br>                        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>                        runtime.exec(f.getAbsolutePath());<span class="hljs-comment">//可以启动该程序</span><br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 是文件夹，继续重复这个过程（递归）</span><br>                    searchFile(f, fileName);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="删除非空文件夹"><a href="#删除非空文件夹" class="headerlink" title="删除非空文件夹"></a>删除非空文件夹</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//或throws Exception</span><br>        deteteDir(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;E:\\aaa&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deteteDir</span><span class="hljs-params">(File dir)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dir==<span class="hljs-literal">null</span> || !dir.exists()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dir.isFile()) &#123;<br>            dir.delete();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 1.dir存在且是文件夹，拿出里面的一级文件对象</span><br>        File[] files = dir.listFiles();<br>        <span class="hljs-keyword">if</span> (files == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 2.有内容的文件夹，先删除内容，最后删除自己</span><br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-keyword">if</span> (file.isFile())&#123;<br>                file.delete();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                deteteDir(file);<br>            &#125;<br>        &#125;<br>        dir.delete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="啤酒问题"><a href="#啤酒问题" class="headerlink" title="啤酒问题"></a>啤酒问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//啤酒2元1瓶，4个盖子可以换一瓶，2个空瓶可以换一瓶。请问10元钱可以喝多少瓶酒，剩余多少空瓶和盖子。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> totalNumber;<span class="hljs-comment">//总酒数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> lastBottleNumber;<span class="hljs-comment">//上一次剩的瓶子数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> lastCoverNumber;<span class="hljs-comment">//上一次剩的盖子数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//啤酒2元1瓶，4个盖子可以换一瓶，2个空瓶可以换一瓶。10元钱可以喝多少瓶酒，剩余多少空瓶和盖子。</span><br>        buy(<span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;总数：&quot;</span> + totalNumber);<span class="hljs-comment">//总数：15</span><br>        System.out.println(<span class="hljs-string">&quot;剩余瓶子数：&quot;</span> + lastBottleNumber);<span class="hljs-comment">//剩余瓶子数：1</span><br>        System.out.println(<span class="hljs-string">&quot;剩余盖子数：&quot;</span> + lastCoverNumber);<span class="hljs-comment">//剩余盖子数：3</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">buyNumber</span> <span class="hljs-operator">=</span> money / <span class="hljs-number">2</span>;<br>        totalNumber += buyNumber;<br><br>        <span class="hljs-comment">//把盖子和瓶子换算成钱继续买</span><br>        <span class="hljs-comment">//计算本轮总的盖子和瓶子数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">allBottleNumber</span> <span class="hljs-operator">=</span> lastBottleNumber + buyNumber;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">allCoverNumber</span> <span class="hljs-operator">=</span> lastCoverNumber + buyNumber;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">allMoney</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//allMoney += money - buyNumber * 2; //代码里无这句，钱不能和酒瓶酒盖一起换</span><br>        allMoney += allBottleNumber / <span class="hljs-number">2</span> * <span class="hljs-number">2</span>;<br>        allMoney += allCoverNumber / <span class="hljs-number">4</span> * <span class="hljs-number">2</span>;<br><br>        lastBottleNumber = allBottleNumber % <span class="hljs-number">2</span>;<br>        lastCoverNumber = allCoverNumber % <span class="hljs-number">4</span>;<br><br>        <span class="hljs-keyword">if</span>(allMoney &gt;= <span class="hljs-number">2</span>)&#123;<br>            buy(allMoney);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><h5 id="标准ASCII字符集"><a href="#标准ASCII字符集" class="headerlink" title="标准ASCII字符集"></a>标准ASCII字符集</h5><p><code>ASCII</code>(American Standard Code for Information Interchange)： 美国信息交换标准代码，包括了英文、符号等。</p><p>标准<code>ASCII</code>使用<strong>1个字节存储一个字符</strong>，<strong>首位是0</strong>，总共可表示<strong>128个字符</strong>，对英语完全够用。</p><h5 id="GBK（汉字内码扩展规范，国标）"><a href="#GBK（汉字内码扩展规范，国标）" class="headerlink" title="GBK（汉字内码扩展规范，国标）"></a>GBK（汉字内码扩展规范，国标）</h5><p>汉字编码字符集，包含了<strong>2万多个汉字</strong>等字符，<code>GBK</code>中<strong>一个中文字符编码成两个字节</strong>的形式存储。</p><p>注意：</p><p>1.<code>GBK</code>兼容了<code>ASCII</code>字符集。在<code>GBK</code>中，<code>ASCII</code>字符同样用一个字节存储，首位是0。</p><p>2.<code>GBK</code>规定<strong>汉字的第一个字节的第一位必须是1</strong>。</p><p>3.<code>GBK</code>通过首位是0或者1判断是中文字符还是<code>ASCII</code>字符。</p><h5 id="Unicode字符集（统一码、万国码）"><a href="#Unicode字符集（统一码、万国码）" class="headerlink" title="Unicode字符集（统一码、万国码）"></a>Unicode字符集（统一码、万国码）</h5><p><code>Unicode</code>是国际组织制定的，可以容纳世界上所有文字、符号的字符集。</p><p><code>Unicode</code>提供了很多编码方案，其中<code>UTF-32</code>使用<strong>4个字节</strong>表示一个字符。但是这占用存储空间，通信效率变低。</p><h5 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h5><p><code>UTF-8</code>是<code>Unicode</code>字符集的一种编码方案，采取<strong>可变长编码</strong>方案，共分<strong>四个长度区</strong>：1个字节，2个字节，3个字节，4个字节。</p><p><strong>英文字符、数字等只占1个字节</strong>（兼容标准ASCII编码），<strong>汉字字符占用3个字节</strong>。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/UTF-8%E7%BC%96%E7%A0%81.png"></p><table><thead><tr><th>UTF-8编码方式(二进制)</th></tr></thead><tbody><tr><td><strong>0</strong>xxxxxxx （ASCII码）</td></tr><tr><td><strong>110</strong>xxxxx <strong>10</strong>xxxxxx</td></tr><tr><td><strong>1110</strong>xxxx <strong>10</strong>xxxxxx <strong>10</strong>xxxxxx</td></tr><tr><td><strong>11110</strong>xxx <strong>10</strong>xxxxxx <strong>10</strong>xxxxxx <strong>10</strong>xxxxxx</td></tr></tbody></table><p>总结：</p><ul><li><code>ASCII</code>字符集：只有英文、数字、符号等，占1个字节。</li><li><code>GBK</code>字符集：汉字占2个字节，英文、数字占1个字节。</li><li><code>UTF-8</code>字符集：汉字占3个字节，英文、数字占1个字节。</li></ul><p>注意：</p><p>1.字符编码时使用的字符集，和解码时使用的字符集必须一致，否则会出现乱码。</p><p>2.英文，数字一般不会乱码，因为很多字符集都兼容了ASCII编码。</p><h5 id="字符的编码和解码"><a href="#字符的编码和解码" class="headerlink" title="字符的编码和解码"></a>字符的编码和解码</h5><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//1.编码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a我b&quot;</span>;<br><span class="hljs-type">byte</span>[] byte1 = data.getBytes();<span class="hljs-comment">//按照平台默认字符集（UTF-8）编码</span><br>System.out.println(Arrays.toString(byte1));<br><br><span class="hljs-type">byte</span>[] byte2 = data.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br><span class="hljs-comment">//需要throws UnsupportedEncodingException，因为编码可能会写错</span><br>System.out.println(Arrays.toString(byte2));<br><br><span class="hljs-comment">//2.解码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byte1);<span class="hljs-comment">//按照平台默认字符集（UTF-8）解码</span><br>System.out.println(s1);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byte2, <span class="hljs-string">&quot;GBK&quot;</span>);<br>System.out.println(s2);<br></code></pre></td></tr></table></figure><h4 id="IO流的体系"><a href="#IO流的体系" class="headerlink" title="IO流的体系"></a>IO流的体系</h4><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/IO%E6%B5%81%E7%9A%84%E4%BD%93%E7%B3%BB.png"></p><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><h5 id="FileInputStream（文件字节输入流）"><a href="#FileInputStream（文件字节输入流）" class="headerlink" title="FileInputStream（文件字节输入流）"></a>FileInputStream（文件字节输入流）</h5><p>作用：以内存为基准，可以把磁盘文件中的数据以<strong>字节</strong>的形式<strong>读入到内存</strong>中去。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/FileInputStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><p>注意：</p><p>1.使用<code>FileInputStream</code>每次读取一个字节，读取性能较差，并且读取汉字输出会乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//两种方法都可以创建流，建议使用字符串</span><br><span class="hljs-comment">//InputStream is = new FileInputStream(new File(&quot;helloworld-app\\src\\itheima.txt&quot;));</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima.txt&quot;</span>);<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span>( ( b = is.read() ) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//每次读取一个字节，没有数据返回-1</span><br>    System.out.print((<span class="hljs-type">char</span>)b);<span class="hljs-comment">//不能解决汉字乱码</span><br>&#125;<br>is.close();<span class="hljs-comment">//关闭流</span><br></code></pre></td></tr></table></figure><p>2.使用<code>FileInputStream</code>每次读取多个字节，读取性能得到了提升，但读取汉字输出还是会乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima.txt&quot;</span>);<br><span class="hljs-comment">//文件内容：abc666</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    byte[] buffer = new byte[3];</span><br><span class="hljs-comment">    int len = is.read(buffer);</span><br><span class="hljs-comment">    System.out.println(new String(buffer) + &quot;, 读取字节长度：&quot; + len);</span><br><span class="hljs-comment">    //abc, 读取字节长度：3</span><br><span class="hljs-comment">    int len2 = is.read(buffer);</span><br><span class="hljs-comment">    System.out.println(new String(buffer) + &quot;, 读取字节长度：&quot; + len2);</span><br><span class="hljs-comment">    //66c, 读取字节长度：2</span><br><span class="hljs-comment">    //因为第二次只读取了2个字节就结束了，所以第三个字节c是上一次读取留下的。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span> ( (len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//每次读取多个字节，由buffer的大小确定</span><br>    System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len));<span class="hljs-comment">//不能解决汉字乱码</span><br>&#125;<br>is.close();<span class="hljs-comment">//关闭流</span><br></code></pre></td></tr></table></figure><p>3.使用<code>FileInputStream</code>读取中文，保证输出不乱码：定义一个与文件一样大的字节数组，一次性读取完文件的全部字节。直接把文件数据全部读取到一个字节数组可以避免乱码，但是如果文件过大，创建的字节数组也会过大，可能引起内存溢出。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/FileInputStream%E7%B1%BB%E4%B8%80%E6%AC%A1%E8%AF%BB%E5%8F%96%E5%85%A8%E9%83%A8%E5%AD%97%E8%8A%82.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima.txt&quot;</span>);<br><br><span class="hljs-comment">//方式1</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    File file = new File(&quot;helloworld-app\\\\src\\\\itheima.txt&quot;);</span><br><span class="hljs-comment">    long size = file.length();</span><br><span class="hljs-comment">    byte[] buffer = new byte[(int) size];//size是long类型，这里数组大小是int类型，需要强转;</span><br><span class="hljs-comment">    int len = is.read(buffer);</span><br><span class="hljs-comment">    System.out.println(new String(buffer));</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//方式2</span><br><span class="hljs-type">byte</span>[] buffer = is.readAllBytes();<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer));<br></code></pre></td></tr></table></figure><h5 id="FileOutputStream（文件字节输出流）"><a href="#FileOutputStream（文件字节输出流）" class="headerlink" title="FileOutputStream（文件字节输出流）"></a>FileOutputStream（文件字节输出流）</h5><p>作用：以内存为基准，把内存中的数据以<strong>字节</strong>的形式<strong>写出到文件</strong>中去。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/FileOutputStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//覆盖管道：每次覆盖之前的数据</span><br><span class="hljs-comment">//OutputStream os = new FileOutputStream(&quot;helloworld-app\\src\\itheima.txt&quot;);</span><br><span class="hljs-comment">//追加数据管道：</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima1.txt&quot;</span>, <span class="hljs-literal">true</span>);<br>os.write(<span class="hljs-number">97</span>);<span class="hljs-comment">//&#x27;a&#x27;</span><br>os.write(<span class="hljs-string">&#x27;b&#x27;</span>);<br>os.write(<span class="hljs-string">&#x27;苏&#x27;</span>);<span class="hljs-comment">//不会报错，但是只能写入一个字节，汉字有3个字节，会乱码</span><br><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-string">&quot;我爱你中国888&quot;</span>.getBytes();<br>os.write(buffer);<br>os.write(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>);<br>os.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<span class="hljs-comment">//&quot;\n&quot;只是Windows系统，使用&quot;\r\n&quot;兼容所有系统，代表换行</span><br><br>os.close();<span class="hljs-comment">//关闭流</span><br></code></pre></td></tr></table></figure><h5 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h5><p>任何文件的底层都是字节，字节流做复制，是一字不漏的转移完全部字节，只要复制后的文件格式一致就没问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">copy</span> &#123;<span class="hljs-comment">//复制什么类型的文件都可以</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/com/itheima/IO_/Test.java&quot;</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test.txt&quot;</span>);<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span>( (len = is.read(buffer)) &gt; <span class="hljs-number">0</span> ) &#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        os.close();<br>        is.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="释放资源的方式"><a href="#释放资源的方式" class="headerlink" title="释放资源的方式"></a>释放资源的方式</h4><h5 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h5><p><code>finally</code>代码区的特点：无论<code>try</code>中的程序是正常执行了，还是出现了异常，最后都一定会执行<code>finally</code>区，除非<code>JVM</code>终止。</p><p>作用：一般用于在程序执行完成后进行资源的释放操作（专业级做法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//try-catch-finally的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//return; //使用return跳出方法的执行，还会执行finally</span><br>            <span class="hljs-comment">//System.exit(0); //退出虚拟机，则不会执行finally</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;finally&quot;</span>);<br>        &#125;<br>        System.out.println(test(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>));<span class="hljs-comment">//111</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> a / b;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">111</span>;<span class="hljs-comment">//不能在finally中返回数据</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//InputStream和OutputStream使用try-catch-finally安全释放资源的方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br>        is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/com/itheima/IO_/Test.java&quot;</span>);<br>        os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test.txt&quot;</span>);<br>        System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span>( (len = is.read(buffer)) &gt; <span class="hljs-number">0</span> ) &#123;<br>            os.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        <br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (os != <span class="hljs-literal">null</span>) &#123; os.close(); &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123; is.close(); &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h5><p>JDK7开始提供了更简单的资源释放方案：<code>try-with-resource</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">try</span>(定义资源<span class="hljs-number">1</span>;定义资源<span class="hljs-number">2</span>;…)&#123;<span class="hljs-comment">//()中只能放置资源，否则报错。该资源使用完毕后，会自动调用其close()方法，完成对资源的释放。</span><br>可能出现异常的代码;<br>&#125;<span class="hljs-keyword">catch</span>(异常类名 变量名)&#123;<br>异常的处理代码;<br>&#125; <br></code></pre></td></tr></table></figure><p>资源一般指的是最终实现了<code>AutoCloseable</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStream</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Closeable</span>&#123; &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputStream</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Closeable</span>, Flushable &#123; &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Closeable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AutoCloseable</span> &#123; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<span class="hljs-comment">//自定义资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;释放了与某个硬件的链接资源&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/com/itheima/IO_/Test.java&quot;</span>);<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test.txt&quot;</span>);<br>                <span class="hljs-comment">// 注意：这里只能放置资源对象（流对象）</span><br>                <span class="hljs-comment">// int age = 12;//不能放置</span><br>                <span class="hljs-comment">// 资源都是会实现AutoCloseable接口的。资源都有close方法，并且资源放到这里后，使用完之后，会被自动调用其close方法完成资源的释放操作</span><br>                <span class="hljs-type">MyConnection</span>  <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyConnection</span>();<span class="hljs-comment">//使用自定义资源</span><br>             )&#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span>( (len = is.read(buffer)) &gt; <span class="hljs-number">0</span> ) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, len);<br>            &#125;<br>            System.out.println(conn);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><h5 id="FileReader（文件字符输入流）"><a href="#FileReader（文件字符输入流）" class="headerlink" title="FileReader（文件字符输入流）"></a>FileReader（文件字符输入流）</h5><p>作用：以内存为基准，可以把文件中的数据以<strong>字符</strong>的形式<strong>读入到内存</strong>中去。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/FileReader%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span>(<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima1.txt&quot;</span>);<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima1.txt&quot;</span>);<br>    )&#123;<br>        <span class="hljs-comment">//方式1：一次读取一个字符</span><br>        <span class="hljs-type">int</span> c;<br>        <span class="hljs-keyword">while</span>((c = fr1.read()) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print( (<span class="hljs-type">char</span>)c );<br>        &#125;<br>        <span class="hljs-comment">//方式2：一次读取多个字符</span><br>        <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span>((len = fr2.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len));<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="FileWriter（文件字符输出流）"><a href="#FileWriter（文件字符输出流）" class="headerlink" title="FileWriter（文件字符输出流）"></a>FileWriter（文件字符输出流）</h5><p>作用：以内存为基准，把内存中的数据以<strong>字符</strong>的形式<strong>写出到文件</strong>中去。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/FileWriter%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test1.txt&quot;</span>)<br>    ) &#123;<br>        fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        fw.write(<span class="hljs-number">98</span>);<br>        fw.write(<span class="hljs-string">&#x27;苏&#x27;</span>);<br>        fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<span class="hljs-comment">//换行</span><br>        fw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<br>        fw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">5</span>);<br>        <span class="hljs-type">char</span>[] buffer = &#123;<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>, <span class="hljs-string">&#x27;学&#x27;</span>, <span class="hljs-string">&#x27;习&#x27;</span>&#125;;<br>        fw.write(buffer);<br>        fw.write(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：字符输出流写出数据后，必须<strong>刷新流</strong>，或者<strong>关闭流</strong>，写出去的数据才能生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<span class="hljs-comment">//刷新流，就是将内存中缓存的数据立即写到文件中去生效！</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException<span class="hljs-comment">//关闭流的操作，包含了刷新！</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test2.txt&quot;</span>);<br><br>    fw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    fw.write(<span class="hljs-number">98</span>);<br>    fw.write(<span class="hljs-string">&#x27;苏&#x27;</span>);<br>    fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<span class="hljs-comment">//换行</span><br>    fw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<br>    fw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">5</span>);<br>    <span class="hljs-type">char</span>[] buffer = &#123;<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;喜&#x27;</span>, <span class="hljs-string">&#x27;欢&#x27;</span>, <span class="hljs-string">&#x27;学&#x27;</span>, <span class="hljs-string">&#x27;习&#x27;</span>&#125;;<br>    fw.write(buffer);<br>    fw.write(buffer, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br><br>    fw.flush();<span class="hljs-comment">//刷新流</span><br>    fw.close();<span class="hljs-comment">//关闭流，关闭流包含刷新操作。</span><br>    <span class="hljs-comment">//注意：如果不进行flush或者close操作，则无法写入文件，因为此时字符还在缓冲区中，必须得通过刷新才能够写入文件。</span><br>    <span class="hljs-comment">//上述使用了try-with-resource方法没有直接调用flush或close方法，是因为try-with-resource已经自动调用close方法，所以能写入成功。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>字节流、字符流的使用场景小结：</p><p><strong>字节流</strong>适合做<strong>一切文件</strong>数据的拷贝（音视频，文本）；字节流不适合读取中文内容输出。</p><p><strong>字符流</strong>适合做<strong>文本文件</strong>的操作（读，写）。</p><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><h5 id="BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）"><a href="#BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）" class="headerlink" title="BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）"></a>BufferedInputStream（字节缓冲输入流）、BufferedOutputStream（字节缓冲输出流）</h5><p>原理：<strong>字节缓冲输入流</strong>自带了<strong>8KB缓冲池</strong>；<strong>字节缓冲输出流</strong>也自带了<strong>8KB缓冲池</strong>。提高字节流读写的性能。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/com/itheima/IO_/Test.java&quot;</span>);<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is, <span class="hljs-number">8192</span>*<span class="hljs-number">2</span>);<span class="hljs-comment">//字节缓冲输入流，可以设置缓冲池大小</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test.txt&quot;</span>);<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os, <span class="hljs-number">8192</span>);<span class="hljs-comment">//字节缓冲输出流，可以设置缓冲池大小</span><br>    ) &#123;<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = bis.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>            bos.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="BufferedReader（字符缓冲输入流）、BufferedWriter（字符缓冲输出流）"><a href="#BufferedReader（字符缓冲输入流）、BufferedWriter（字符缓冲输出流）" class="headerlink" title="BufferedReader（字符缓冲输入流）、BufferedWriter（字符缓冲输出流）"></a>BufferedReader（字符缓冲输入流）、BufferedWriter（字符缓冲输出流）</h5><p>作用：字符缓冲输入流和字符缓冲输出流都自带<strong>8K（8192）的字符缓冲池</strong>，可以提高字符流读写的性能。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/BufferedReader%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span>(<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;helloworld-app\\src\\itheima1.txt&quot;</span>);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>    )&#123;<br>        String line;<br>        <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//一次读取一行</span><br>            System.out.println(line);<br>        &#125;<br>        <span class="hljs-comment">//也可以使用字符输入流的另外两种方式：一个字符或者多个字符进行读取</span><br>    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/BufferedWriter%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;helloworld-app\\src\\Test1.txt&quot;</span>);<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br>    ) &#123;<br>        bw.write(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        bw.write(<span class="hljs-number">98</span>);<br>        bw.write(<span class="hljs-string">&#x27;苏&#x27;</span>);<br>        bw.newLine();<span class="hljs-comment">//换行</span><br>        bw.write(<span class="hljs-string">&quot;我爱你中国abc&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>提高字节流读写数据的性能：建议使用<strong>字节缓冲输入流</strong>、<strong>字节缓冲输出流</strong>，结合<strong>字节数组</strong>的方式，目前来看是性能最优的组合。</p><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p>注意：</p><ul><li>如果代码编码和被读取的文本文件的编码是<strong>一致</strong>的，使用字符流读取文本文件时<strong>不会出现乱码</strong>。</li><li>如果代码编码和被读取的文本文件的编码是<strong>不一致</strong>的，使用字符流读取文本文件时就会<strong>出现乱码</strong>。</li></ul><h5 id="InputStreamReader（字符输入转换流）"><a href="#InputStreamReader（字符输入转换流）" class="headerlink" title="InputStreamReader（字符输入转换流）"></a>InputStreamReader（字符输入转换流）</h5><p><code>InputStreamReader</code>解决不同编码时，字符流读取文本内容乱码的问题。</p><p>解决思路：先获取文件的<strong>原始字节流</strong>，再将其按真实的字符集编码转成<strong>字符输入流</strong>，这样字符输入流中的字符就不乱码了。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/InputStreamReader%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//字符输入转换流InputStreamReader</span><br><span class="hljs-keyword">try</span> (<br>    <span class="hljs-comment">//1.得到文件的原始字节流（GBK字节流）</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/file_GBK.txt&quot;</span>);<br>    <span class="hljs-comment">//2.把原始字节输入流按照指定的字符集编码（GBK）转换成字符输入流</span><br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is, <span class="hljs-string">&quot;GBK&quot;</span>);<br>    <span class="hljs-comment">//3.把字符输入流包装成字符缓冲输入流</span><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>)&#123;<br>    String line;<br>    <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>        System.out.println(line);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="OutputStreamWriter（字符输出转换流）"><a href="#OutputStreamWriter（字符输出转换流）" class="headerlink" title="OutputStreamWriter（字符输出转换流）"></a>OutputStreamWriter（字符输出转换流）</h5><p>控制写出的字符使用指定的字符集编码：</p><p>1.调用<code>String</code>提供的<code>getBytes</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我爱你中国abc&quot;</span>;<br><span class="hljs-type">byte</span>[] bytes = data.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<span class="hljs-comment">//throws UnsupportedEncodingException</span><br></code></pre></td></tr></table></figure><p>2.<code>OutputStreamWriter</code>可以控制写出去的字符使用什么字符集编码。 </p><p>解决思路：获取字节输出流，再按照指定的字符集编码将其转换成字符输出流，以后写出去的字符就会用该字符集编码了。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/OutputStreamWriter%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//字符输出转换流OutputStreamWriter</span><br><span class="hljs-keyword">try</span> (<br>    <span class="hljs-comment">//1.创建文件字节输出流</span><br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/file_GBK_w.txt&quot;</span>);<br>    <span class="hljs-comment">//2.把原始的字节输出流按照指定的字符集编码（GBK）转换成字符输出转换流</span><br>    <span class="hljs-type">Writer</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(os, <span class="hljs-string">&quot;GBK&quot;</span>);<br>    <span class="hljs-comment">//3.把字符输出流包装成字符缓冲输出流</span><br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(osw);<br>)&#123;<br>    bw.write(<span class="hljs-string">&quot;我是中国人srr&quot;</span>);<br>    bw.write(<span class="hljs-string">&quot;我爱你中国999&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><p><code>PrintStream</code>和<code>PrintWriter</code>都是打印流，打印流可以实现更方便、更高效的打印数据出去，能实现<strong>打印啥出去就是啥出去</strong>。</p><h5 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h5><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/PrintStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//打印流PrintStream</span><br><span class="hljs-keyword">try</span> (<br>    <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;helloworld-app/src/PrintStream.txt&quot;</span>, Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>));<br>    <span class="hljs-comment">//PrintStream内部包装了BufferedWriter，自带缓冲池</span><br>)&#123;<br>    ps.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    ps.println(<span class="hljs-string">&quot;我爱你中国&quot;</span>);<br>    ps.println(<span class="hljs-literal">true</span>);<br>    ps.println(<span class="hljs-number">99.8</span>);<br>    ps.println(<span class="hljs-number">97</span>);<span class="hljs-comment">//print打印什么就是什么，这里就是97</span><br><br>    ps.write(<span class="hljs-number">97</span>);<span class="hljs-comment">//write的时候这里就是&#x27;a&#x27;</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h5><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/PrintWriter%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//打印流PrintWriter</span><br><span class="hljs-keyword">try</span> (<br>    <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/PrintWriter.txt&quot;</span>, <span class="hljs-literal">true</span>));<br>    <span class="hljs-comment">//PrintWriter是高级流，不能构造时加true代表追加文件，需要通向低级流管道，在低级流里面加true代表追加文件</span><br>)&#123;<br>    pw.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    pw.println(<span class="hljs-string">&quot;我爱你中国&quot;</span>);<br>    pw.println(<span class="hljs-literal">true</span>);<br>    pw.println(<span class="hljs-number">99.8</span>);<br>    pw.println(<span class="hljs-number">97</span>);<span class="hljs-comment">//print打印什么就是什么，这里就是97</span><br><br>    pw.write(<span class="hljs-number">97</span>);<span class="hljs-comment">//write的时候这里就是&#x27;a&#x27;</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="PrintStream和PrintWriter的区别"><a href="#PrintStream和PrintWriter的区别" class="headerlink" title="PrintStream和PrintWriter的区别"></a>PrintStream和PrintWriter的区别</h5><p>1.打印数据的功能上是一模一样的：都是使用方便，性能高效（核心优势）。</p><p>2.<code>PrintStream</code>继承自字节输出流<code>OutputStream</code>，因此支持<strong>写字节数据</strong>的方法。</p><p>3.<code>PrintWriter</code>继承自字符输出流<code>Writer</code>，因此支持<strong>写字符数据</strong>出去。</p><h5 id="打印流的应用：输出语句的重定向"><a href="#打印流的应用：输出语句的重定向" class="headerlink" title="打印流的应用：输出语句的重定向"></a>打印流的应用：输出语句的重定向</h5><p>打印流可以把输出语句的打印位置改到某个文件中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//out是PrintStream的打印流对象，默认创造的打印流对象是通向控制台的</span><br>System.out.println(<span class="hljs-string">&quot;第一行&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;第二行&quot;</span>);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">PrintStream</span> <span class="hljs-variable">printStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;helloworld-app/src/PrintStream2.txt&quot;</span>);)&#123;<br>    System.setOut(printStream);<span class="hljs-comment">//把系统默认的打印流对象改成自己设置的打印流</span><br>    System.out.println(<span class="hljs-string">&quot;第三行&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;第四行&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><h5 id="DataOutputStream（数据输出流）"><a href="#DataOutputStream（数据输出流）" class="headerlink" title="DataOutputStream（数据输出流）"></a>DataOutputStream（数据输出流）</h5><p>允许把数据和其类型一并写出去。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/DataOutputStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//数据输出流DataOutputStream</span><br><span class="hljs-keyword">try</span> (   <span class="hljs-comment">//创建一个数据输出流包装低级的字节输出流</span><br>    <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/DataOutputStream.txt&quot;</span>));)&#123;<br>    dos.writeInt(<span class="hljs-number">97</span>);<br>    dos.writeChar(<span class="hljs-string">&#x27;R&#x27;</span>);<br>    dos.writeDouble(<span class="hljs-number">888.888</span>);<br>    dos.writeBoolean(<span class="hljs-literal">true</span>);<br>    dos.writeUTF(<span class="hljs-string">&quot;你好我是中国人&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="DataInputStream（数据输入流）"><a href="#DataInputStream（数据输入流）" class="headerlink" title="DataInputStream（数据输入流）"></a>DataInputStream（数据输入流）</h5><p>用于读取数据输出流写出去的数据。 </p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/DataInputStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//数据输入流DataInputStream</span><br><span class="hljs-keyword">try</span> (<br>    <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/DataOutputStream.txt&quot;</span>));<br>)&#123;<br>    <span class="hljs-comment">//读的时候要和写的时候一一对应，写的是什么类型，读的时候就是什么类型，否则会出错</span><br>    System.out.println(dis.readInt());<br>    System.out.println(dis.readChar());<br>    System.out.println(dis.readDouble());<br>    System.out.println(dis.readBoolean());<br>    System.out.println(dis.readUTF());<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="序列号流"><a href="#序列号流" class="headerlink" title="序列号流"></a>序列号流</h4><h5 id="ObjectOutputStream（对象字节输出流）"><a href="#ObjectOutputStream（对象字节输出流）" class="headerlink" title="ObjectOutputStream（对象字节输出流）"></a>ObjectOutputStream（对象字节输出流）</h5><p>可以把Java对象进行序列化：把Java对象存入到文件中去。</p><p>注意：</p><p>1.对象如果要参与序列化，必须实现序列化接口<code>java.io.Serializable</code>。使用<code>transient</code>修饰成员变量，表示这个成员变量<strong>不参与序列化</strong>。</p><p>2.<code>ArrayList</code>集合已经实现了序列化接口。若一次性序列化多个对象，用一个<code>ArrayList</code>集合存储多个对象，然后直接对集合进行序列化即可。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/ObjectOutputStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//User类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<span class="hljs-comment">//对象序列化必须要实现Serializable序列化接口</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String password;<span class="hljs-comment">//transient表示这个成员变量不参与序列化</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//对象字节输出流ObjectOutputStream</span><br><span class="hljs-keyword">try</span> (   <span class="hljs-comment">//创建对象字节输出流包装原始的字节输出流</span><br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/ObjectOutputStream.txt&quot;</span>));<br>)&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;888888&quot;</span>);<br>    oos.writeObject(u);<span class="hljs-comment">//序列化对象到文件中去</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ObjectInputStream（对象字节输入流）"><a href="#ObjectInputStream（对象字节输入流）" class="headerlink" title="ObjectInputStream（对象字节输入流）"></a>ObjectInputStream（对象字节输入流）</h5><p>可以把Java对象进行反序列化：把存储在文件中的Java对象读入到内存中来。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/ObjectInputStream%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//对象字节输入流ObjectInputStream</span><br><span class="hljs-keyword">try</span> (   <span class="hljs-comment">//创建对象字节输入流管道，包装低级字节输入流与源文件接通</span><br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;helloworld-app/src/ObjectOutputStream.txt&quot;</span>));<br>)&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> (User) ois.readObject();<span class="hljs-comment">//返回Object类型，需要强转</span><br>    System.out.println(u);<br>    <span class="hljs-comment">//User&#123;name=&#x27;admin&#x27;, age=18, password=&#x27;888888&#x27;&#125; （password参与序列化）</span><br>    <span class="hljs-comment">//User&#123;name=&#x27;admin&#x27;, age=18, password=&#x27;null&#x27;&#125; （password不参与序列化）</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h4><p>框架：解决某类问题，编写的一套类、接口等，可以理解成一个半成品，大多框架都是第三方研发的。</p><p>好处：在框架的基础上开发，可以得到优秀的软件架构，并能提高开发效率。</p><p>框架的形式：一般是把类、接口等编译成<code>class</code>形式，再压缩成一个<code>.jar</code>结尾的文件发行出去。</p><p><code>IO框架</code>：封装了Java提供的对文件、数据进行操作的代码，对外提供了更简单的方式来对文件进行操作，对数据进行读写等。</p><p>导入<code>commons-io-2.11.0.jar</code>框架到项目中去：</p><ol><li>官网：<a href="https://commons.apache.org/io/download_io.cgi">Commons IO – Download Apache Commons IO</a>，下载<code>Apache Commons IO 2.17.0 (requires Java 8)</code>-&gt;<code>Binaries</code>-&gt;<code>commons-io-2.17.0-bin.zip</code>。</li><li>在项目中创建一个文件夹：<code>lib</code>。</li><li>将<code>commons-io-2.6.jar</code>文件复制到lib文件夹。</li><li>在<code>jar</code>文件上点右键，选择 <code>Add as Library </code> -&gt;点击<code>OK。</code></li><li>在类中导包使用。</li></ol><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/Commons-io%E6%A1%86%E6%9E%B6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//IO框架</span><br>    FileUtils.copyFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src/Test.txt&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src/a.txt&quot;</span>));<span class="hljs-comment">//复制文件</span><br>    FileUtils.copyDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src2&quot;</span>));<span class="hljs-comment">//复制文件夹</span><br>    FileUtils.deleteDirectory(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloworld-app/src2&quot;</span>));<span class="hljs-comment">//删除文件夹</span><br><br>    <span class="hljs-comment">//Java提供的原生的一行代码搞定很多事情</span><br>    Files.copy(Path.of(<span class="hljs-string">&quot;helloworld-app/src/Test2.txt&quot;</span>), Path.of(<span class="hljs-string">&quot;helloworld-app/src/b.txt&quot;</span>));<span class="hljs-comment">//复制文件</span><br>    System.out.println(Files.readString(Path.of(<span class="hljs-string">&quot;helloworld-app/src/Test.txt&quot;</span>)));<span class="hljs-comment">//读取文件</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h4><h5 id="Properties属性文件"><a href="#Properties属性文件" class="headerlink" title="Properties属性文件"></a>Properties属性文件</h5><p><code>Properties</code>是一个<code>Map</code>集合（键值对集合），但是一般不会当集合使用。</p><p>核心作用：<code>Properties</code>是用来代表属性文件的，通过<code>Properties</code>可以读写属性文件里的内容。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/Properties%E8%AF%BB%E5%8F%96%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># users.properties</span><br><span class="hljs-comment"># 以下内容都是用户名和密码。</span><br><span class="hljs-attr">admin</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">张无忌</span>=<span class="hljs-string">minmin</span><br><span class="hljs-attr">周芷若</span>=<span class="hljs-string">wuji</span><br><span class="hljs-attr">赵敏</span>=<span class="hljs-string">wuji</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1、创建一个Properties的对象出来（键值对集合，空容器）</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-comment">// 2、开始加载属性文件中的键值对数据到properties对象中去</span><br>    properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;helloworld-app/src/users.properties&quot;</span>));<br>    System.out.println(properties);<span class="hljs-comment">//&#123;admin=123456, 周芷若=wuji, 赵敏=wuji, 张无忌=minmin&#125;</span><br><br>    <span class="hljs-comment">// 3、根据键取值</span><br>    System.out.println(properties.getProperty(<span class="hljs-string">&quot;赵敏&quot;</span>));<br>    System.out.println(properties.getProperty(<span class="hljs-string">&quot;张无忌&quot;</span>));<br><br>    <span class="hljs-comment">// 4、遍历全部的键和值。</span><br>    Set&lt;String&gt; keys = properties.stringPropertyNames();<br>    <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> properties.getProperty(key);<br>        System.out.println(key + <span class="hljs-string">&quot;----&gt;&quot;</span> + value);<br>    &#125;<br><br>    properties.forEach((k, v) -&gt; &#123;<span class="hljs-comment">//Lambda表达式遍历全部的键和值</span><br>        System.out.println(k + <span class="hljs-string">&quot;----&gt;&quot;</span> + v);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/Properties%E5%86%99%E5%87%BA%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1、创建Properties对象出来，先用它存储一些键值对数据</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.setProperty(<span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;minmin&quot;</span>);<br>    properties.setProperty(<span class="hljs-string">&quot;殷素素&quot;</span>, <span class="hljs-string">&quot;cuishan&quot;</span>);<br>    properties.setProperty(<span class="hljs-string">&quot;张翠山&quot;</span>, <span class="hljs-string">&quot;susu&quot;</span>);<br><br>    <span class="hljs-comment">// 2、把properties对象中的键值对数据存入到属性文件中去</span><br>    properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;helloworld-app/src/users2.properties&quot;</span>)<br>                     , <span class="hljs-string">&quot;i saved many users!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h5><p><code>XML</code>（ 全称<code>EXtensible Markup Language</code>， 可扩展标记语言 ）。本质是一种数据的格式，可以用来存储复杂的数据结构，和数据关系。</p><p>应用场景：经常用来做为系统的配置文件；或者作为一种特殊的数据结构，在网络中进行传输。</p><p><code>XML</code>的特点：</p><ol><li><code>XML</code>中的<code>&lt;标签名&gt;</code> 称为一个标签或一个元素，一般是成对出现的。</li><li><code>XML</code>中的标签名可以自己定义（可扩展），但必须要正确的嵌套。</li><li><code>XML</code>中只能有<strong>一个根标签</strong>。</li><li><code>XML</code>中的标签可以有属性。</li><li>如果一个文件中放置的是<code>XML</code>格式的数据，这个文件就是<code>XML</code>文件，后缀一般要写成<code>.xml</code>。</li></ol><p><code>XML</code>的语法规则：</p><p>1.<code>XML</code>文件的后缀名为：<code>xml</code>，文档声明必须是第一行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>version：XML默认的版本号码、该属性是必须存在的<br>encoding：本XML文件的编码<br></code></pre></td></tr></table></figure><p>2.XML中可以定义注释信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--- 注释内容 --&gt;</span><br></code></pre></td></tr></table></figure><p>3.XML中书写”&lt;”、“&amp;”等，可能会出现冲突，导致报错，此时可以用如下特殊字符替代。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-symbol">&amp;lt;</span>    &lt;  小于<br><span class="hljs-symbol">&amp;gt;</span>    &gt;  大于<br><span class="hljs-symbol">&amp;amp;</span>   &amp;  和号<br><span class="hljs-symbol">&amp;apos;</span>  &#x27;  单引号<br><span class="hljs-symbol">&amp;quot;</span>  &quot;  引号<br></code></pre></td></tr></table></figure><p>4.<code>XML</code>中可以写一个叫<code>CDATA</code>的数据区：<code>&lt;![CDATA[   …内容…  ]]&gt;</code>，里面的内容可以随便写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- 注释：以上抬头声明必须放在第一行，必须有 --&gt;</span><br><span class="hljs-comment">&lt;!--  根标签只能有一个 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">desc</span>=<span class="hljs-string">&quot;第一个用户&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张无忌<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">地址</span>&gt;</span>光明顶<span class="hljs-tag">&lt;/<span class="hljs-name">地址</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>minmin<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span> 3 <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> 5 &gt; 4 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data1</span>&gt;</span><br>            &lt;![CDATA[<br>                3 &lt; 2 &amp;&amp; 5 &gt; 4<br>            ]]&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">data1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">people</span>&gt;</span>很多人<span class="hljs-tag">&lt;/<span class="hljs-name">people</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>敏敏<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">地址</span>&gt;</span>光明顶<span class="hljs-tag">&lt;/<span class="hljs-name">地址</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>wuji<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span> 3 <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> 5 &gt; 4 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data1</span>&gt;</span><br>            &lt;![CDATA[<br>                3 &lt; 2 &amp;&amp; 5 &gt; 4<br>            ]]&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">data1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="使用Dom4J解析XML文件"><a href="#使用Dom4J解析XML文件" class="headerlink" title="使用Dom4J解析XML文件"></a>使用Dom4J解析XML文件</h6><p><code>DOM4J</code>解析<code>XML</code>文件的思想：<strong>文档对象模型</strong>。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/DOM4J%E8%A7%A3%E6%9E%90XML%E6%96%87%E4%BB%B6%E7%9A%84%E6%80%9D%E6%83%B3.png"></p><p><code>Dom4j</code>解析<code>XML</code>得到<code>Document</code>对象。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/Dom4j%E8%A7%A3%E6%9E%90XML%E5%BE%97%E5%88%B0Document%E5%AF%B9%E8%B1%A1.png"></p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/Element%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1、创建一个Dom4J框架提供的解析器对象</span><br>    <span class="hljs-type">SAXReader</span> <span class="hljs-variable">saxReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br><br>    <span class="hljs-comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span><br>    <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span><br>        saxReader.read(<span class="hljs-string">&quot;helloworld-app/src/helloworld.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 3、从文档对象中解析XML文件的全部数据了</span><br>    <span class="hljs-type">Element</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> document.getRootElement();<br>    System.out.println(root.getName());<br><br>    <span class="hljs-comment">// 4、获取根元素下的全部一级子元素。</span><br>    <span class="hljs-comment">// List&lt;Element&gt; elements = root.elements();</span><br>    List&lt;Element&gt; elements = root.elements(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>        System.out.println(element.getName());<br>    &#125;<br><br>    <span class="hljs-comment">// 5、获取当前元素下的某个子元素。</span><br>    <span class="hljs-type">Element</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> root.element(<span class="hljs-string">&quot;people&quot;</span>);<br>    System.out.println(people.getText());<br><br>    <span class="hljs-comment">// 如果下面有很多子元素user，默认获取第一个。</span><br>    <span class="hljs-type">Element</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> root.element(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(user.elementText(<span class="hljs-string">&quot;name&quot;</span>));<br><br>    <span class="hljs-comment">// 6、获取元素的属性信息</span><br>    System.out.println(user.attributeValue(<span class="hljs-string">&quot;id&quot;</span>));<br>    <span class="hljs-type">Attribute</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> user.attribute(<span class="hljs-string">&quot;id&quot;</span>);<br>    System.out.println(id.getName());<br>    System.out.println(id.getValue());<br><br>    List&lt;Attribute&gt; attributes = user.attributes();<br>    <span class="hljs-keyword">for</span> (Attribute attribute : attributes) &#123;<br>        System.out.println(attribute.getName() + <span class="hljs-string">&quot;=&quot;</span> + attribute.getValue());<br>    &#125;<br><br>    <span class="hljs-comment">// 7、如何获取全部的文本内容:获取当前元素下的子元素文本值</span><br>    System.out.println(user.elementText(<span class="hljs-string">&quot;name&quot;</span>));<br>    System.out.println(user.elementText(<span class="hljs-string">&quot;地址&quot;</span>));<br>    System.out.println(user.elementTextTrim(<span class="hljs-string">&quot;地址&quot;</span>)); <span class="hljs-comment">// 取出文本去除前后空格</span><br>    System.out.println(user.elementText(<span class="hljs-string">&quot;password&quot;</span>));<br><br>    <span class="hljs-type">Element</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> user.element(<span class="hljs-string">&quot;data&quot;</span>);<br>    System.out.println(data.getText());<br>    System.out.println(data.getTextTrim()); <span class="hljs-comment">// 取出文本去除前后空格</span><br>&#125;<br></code></pre></td></tr></table></figure><p>把数据写出到<code>XML</code>文件：不建议用<code>Dom4J</code>做，直接把数据拼写成<code>XML</code>格式，然后用<code>IO</code>流写出去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 1、使用一个StringBuilder对象来拼接XML格式的数据。</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    sb.append(<span class="hljs-string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; ?&gt;\r\n&quot;</span>);<br>    sb.append(<span class="hljs-string">&quot;&lt;book&gt;\r\n&quot;</span>);<br>    sb.append(<span class="hljs-string">&quot;\t&lt;name&gt;&quot;</span>).append(<span class="hljs-string">&quot;从入门到跑路&quot;</span>).append(<span class="hljs-string">&quot;&lt;/name&gt;\r\n&quot;</span>);<br>    sb.append(<span class="hljs-string">&quot;\t&lt;author&gt;&quot;</span>).append(<span class="hljs-string">&quot;dlei&quot;</span>).append(<span class="hljs-string">&quot;&lt;/author&gt;\r\n&quot;</span>);<br>    sb.append(<span class="hljs-string">&quot;\t&lt;price&gt;&quot;</span>).append(<span class="hljs-number">999.99</span>).append(<span class="hljs-string">&quot;&lt;/price&gt;\r\n&quot;</span>);<br>    sb.append(<span class="hljs-string">&quot;&lt;/book&gt;&quot;</span>);<br>    <span class="hljs-keyword">try</span> (<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;helloworld-app/src/book.xml&quot;</span>));<br>    )&#123;<br>        bw.write(sb.toString());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="约束XML文件的书写"><a href="#约束XML文件的书写" class="headerlink" title="约束XML文件的书写"></a>约束XML文件的书写</h6><p>约束文档：专门用来限制<code>xml</code>书写格式的文档，比如：限制标签、属性应该怎么写。</p><p>约束文档的分类：</p><p>1.<code>DTD</code>文档</p><ul><li><code>DTD</code>约束文档，后缀必须是<code>.dtd</code>。</li><li>在需要编写的XML文件中导入该<code>DTD</code>约束文档。</li><li>然后<code>XML</code>文件，就必须按照<code>DTD</code>约束文档指定的格式进行编写，否则报错。</li><li><code>DTD</code>可以约束<code>XML</code>文件的编写，但是<strong>不能约束具体的数据类型</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ELEMENT 书架 (书+)&gt;<br>&lt;!ELEMENT 书 (书名,作者,售价)&gt;<br>&lt;!ELEMENT 书名 (#PCDATA)&gt;<br>&lt;!ELEMENT 作者 (#PCDATA)&gt;<br>&lt;!ELEMENT 售价 (#PCDATA)&gt;<br><br>&lt;!--    &lt;!ELEMENT 书架(书+)&gt;   表示根标签是&lt;书架&gt;，并且书架中有子标签&lt;书&gt; --&gt;<br>&lt;!--    &lt;!ELEMENT 书(书名、作者、售价)&gt; 表示书是一个标签，且书中有子标签&lt;书名&gt;、&lt;作者&gt;、&lt;售价&gt;   --&gt;<br>&lt;!--    &lt;!ELEMENT 书名(#PCDATA)&gt;表示&lt;书名&gt;是一个标签，且&lt;书名&gt;里面是普通文本    --&gt;<br>&lt;!--    &lt;!ELEMENT 作者(#PCDATA)&gt;表示&lt;作者&gt;是一个标签，且&lt;作者&gt;里面是普通文本    --&gt;<br>&lt;!--    &lt;!ELEMENT 售价(#PCDATA)&gt;表示&lt;售价&gt;是一个标签，且&lt;售价&gt;里面是普通文本    --&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE 书架 <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;data.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">书架</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">书</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>从入门到删库<span class="hljs-tag">&lt;/<span class="hljs-name">书名</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>小猫<span class="hljs-tag">&lt;/<span class="hljs-name">作者</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>很便宜<span class="hljs-tag">&lt;/<span class="hljs-name">售价</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">书</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">书</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>从入门到删库<span class="hljs-tag">&lt;/<span class="hljs-name">书名</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>小猫<span class="hljs-tag">&lt;/<span class="hljs-name">作者</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">售价</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">书</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">书</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>从入门到删库<span class="hljs-tag">&lt;/<span class="hljs-name">书名</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>小猫<span class="hljs-tag">&lt;/<span class="hljs-name">作者</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">售价</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">书</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">书架</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.<code>Schema</code>文档</p><ul><li>编写<code>schema</code>约束文档，后缀必须是<code>.xsd</code>。</li><li>在需要编写的<code>XML</code>文件中导入该<code>schema</code>约束文档。</li><li>按照约束内容编写<code>XML</code>文件的标签。</li></ul><figure class="highlight xsd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xsd"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">targetNamespace</span>=<span class="hljs-string">&quot;http://www.itcast.cn&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">elementFormDefault</span>=<span class="hljs-string">&quot;qualified&quot;</span> &gt;</span><br>    <span class="hljs-comment">&lt;!-- targetNamespace:申明约束文档的地址（命名空间）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;书架&#x27;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 写子元素 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">complexType</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- maxOccurs=&#x27;unbounded&#x27;: 书架下的子元素可以有任意多个！--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">sequence</span> <span class="hljs-attr">maxOccurs</span>=<span class="hljs-string">&#x27;unbounded&#x27;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;书&#x27;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 写子元素 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">complexType</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">sequence</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;书名&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;作者&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">element</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;售价&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;double&#x27;</span>/&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">sequence</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">complexType</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">element</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">sequence</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">complexType</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">element</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">书架</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.itcast.cn&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.itcast.cn data.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- xmlns=&quot;http://www.itcast.cn&quot;  基本位置</span><br><span class="hljs-comment">         xsi:schemaLocation=&quot;http://www.itcast.cn books02.xsd&quot; 具体的位置 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">书</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>从入门到删除<span class="hljs-tag">&lt;/<span class="hljs-name">书名</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>dlei<span class="hljs-tag">&lt;/<span class="hljs-name">作者</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">售价</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">书</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">书</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">书名</span>&gt;</span>从入门到删除<span class="hljs-tag">&lt;/<span class="hljs-name">书名</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">作者</span>&gt;</span>dlei<span class="hljs-tag">&lt;/<span class="hljs-name">作者</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">售价</span>&gt;</span>0.9<span class="hljs-tag">&lt;/<span class="hljs-name">售价</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">书</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">书架</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h4><p>日志技术可以将系统执行的信息，方便的记录到指定的位置（控制台、文件中、数据库中）。</p><p>日志技术可以随时以开关的形式控制日志的启停，无需侵入到源代码中去进行修改。</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/%E6%97%A5%E5%BF%97%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png"></p><p>日志框架：牛人或者第三方公司已经做好的实现代码，后来者直接可以拿去使用。</p><p>日志接口：设计日志框架的一套标准，日志框架需要实现这些接口。</p><p>注意：</p><p>1.因为对<code>Commons Logging</code>接口不满意，有人就搞了<code>SLF4J</code>；因为对<code>Log4j</code>的性能不满意，有人就搞了<code>Logback</code>。</p><p>2.<code>Logback</code>是基于<code>slf4j</code>的日志规范实现的框架。</p><h5 id="Logback日志框架"><a href="#Logback日志框架" class="headerlink" title="Logback日志框架"></a>Logback日志框架</h5><p>官方网站：<code>https://logback.qos.ch/index.html </code></p><p>Logback日志框架有以下模块：</p><p>1.<code>logback-core</code>：基础模块，是其他两个模块依赖的基础（必须有）。</p><p>2.<code>logback-classic</code>：完整实现了<code>slf4j</code>API的模块（必须有）。</p><p>3.<code>logback-access</code>：与 <code>Tomcat</code>和<code>Jetty</code>等<code>Servlet</code>容器集成，以提供<code>HTTP</code>访问日志的功能（可选，以后再接触）。</p><p>想使用Logback日志框架，至少需要在项目中整合如下三个模块：</p><p>1.<code>slf4j-api</code>：日志接口。</p><p>2.<code>logback-core</code>：基础模块。</p><p>3.<code>logback-classic</code>：功能模块，它完整实现了<code>slf4j</code>API。</p><h5 id="使用Logback日志框架"><a href="#使用Logback日志框架" class="headerlink" title="使用Logback日志框架"></a>使用Logback日志框架</h5><p>1.导入<code>Logback</code>框架到项目中去：<code>slf4j-api</code>、<code>logback-core</code>、<code>logback-classic</code>。</p><p>2.将<code>Logback</code>框架的核心配置文件<code>logback.xml</code>直接拷贝到<code>src</code>目录下（必须是<code>src</code>下）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.out<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span><br><span class="hljs-comment">                %msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level]  %c [%thread] : %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- File是输出的方向通向文件的 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>E:/2_学习/Java/code/log/itheima-data.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span></span><br><span class="hljs-tag">                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式：当日志文件大小超过1MB时，就压缩文件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>E:/2_学习/Java/code/log/itheima-data-%i-%d&#123;yyyy-MM-dd&#125;-.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件拆分大小--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>1MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        1、控制日志的输出情况：如，开启日志level=&quot;ALL&quot;，取消日志level=&quot;OFF&quot;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.创建<code>Logback</code>框架提供的<code>Logger</code>对象，然后用<code>Logger</code>对象调用其提供的方法就可以记录系统的日志信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogBackTest</span> &#123;<br>    <span class="hljs-comment">// 创建一个Logger日志对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-string">&quot;LogBackTest&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//while (true) &#123;</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                LOGGER.info(<span class="hljs-string">&quot;chu法方法开始执行~~~&quot;</span>);<br>                chu(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>);<br>                LOGGER.info(<span class="hljs-string">&quot;chu法方法执行成功~~~&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                LOGGER.error(<span class="hljs-string">&quot;chu法方法执行失败了，出现了bug~~~&quot;</span>);<br>            &#125;<br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chu</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;参数a:&quot;</span> + a);<br>        LOGGER.debug(<span class="hljs-string">&quot;参数b:&quot;</span> + b);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a / b;<br>        LOGGER.info(<span class="hljs-string">&quot;结果是：&quot;</span> + c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h5><p>日志级别指的是日志信息的类型，日志都会分级别，常见的日志级别如下（<strong>优先级依次升高</strong>）：</p><p><img src="/2024/09/28/Java%E7%9A%84File%E7%B1%BB%E5%92%8CIO%E6%B5%81/%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB.png"></p><p>只有日志的级别是<strong>大于或等于核心配置文件配置的日志级别</strong>，才会<strong>被记录</strong>，否则不记录。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 只有info以上才会被记录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><code>ALL</code>和<code> OFF</code>分别是打开全部日志和关闭全部日志。</li><li>级别程度依次是：<code>TRACE</code>&lt; <code>DEBUG</code>&lt; <code>INFO</code>&lt;<code>WARN</code>&lt;<code>ERROR</code>。</li><li>默认级别是<code>debug</code>（忽略大小写），只输出当前级别及高于该级别的日志。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合</title>
    <link href="/2024/09/25/Java%E9%9B%86%E5%90%88/"/>
    <url>/2024/09/25/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="集合（Collection和Map两种）"><a href="#集合（Collection和Map两种）" class="headerlink" title="集合（Collection和Map两种）"></a>集合（Collection和Map两种）</h3><p>集合体系结构：</p><p><code>Collection</code>代表<strong>单列</strong>集合，每个元素（数据）只包含一个值。</p><p><code>Map</code>代表<strong>双列</strong>集合，每个元素包含两个值（键值对）。</p><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Collection%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB.png"></p><p><code>List</code>系列集合：添加的元素是<strong>有序</strong>、<strong>可重复</strong>、<strong>有索引</strong>。</p><ul><li><code>ArrayList</code>、<code>LinekdList</code>：<strong>有序</strong>、<strong>可重复</strong>、<strong>有索引</strong>。</li></ul><p><code>Set</code>系列集合：添加的元素是<strong>无序</strong>（添加数据的顺序和获取出的数据顺序不一致）、<strong>不重复</strong>、<strong>无索引</strong>（不支持通过索引操作数据）。</p><ul><li><code>HashSet</code>：<strong>无序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</li><li><code>LinkedHashSet</code>：<strong>有序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</li><li><code>TreeSet</code>：<strong>按照大小默认升序排序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</li></ul><h5 id="Collection的常用方法"><a href="#Collection的常用方法" class="headerlink" title="Collection的常用方法"></a>Collection的常用方法</h5><p><code>Collection</code>是单列集合的祖宗，它规定的方法（功能）是全部单列集合都会继承的。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Collection%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>c.add(<span class="hljs-string">&quot;A&quot;</span>);<br>c.add(<span class="hljs-string">&quot;B&quot;</span>);<br>System.out.println(c);<span class="hljs-comment">//[A, B]</span><br><br>System.out.println(c.size());<span class="hljs-comment">//2</span><br>System.out.println(c.isEmpty());<span class="hljs-comment">//false</span><br>c.remove(<span class="hljs-string">&quot;B&quot;</span>);<span class="hljs-comment">//[A]</span><br>System.out.println(c.contains(<span class="hljs-string">&quot;A&quot;</span>));<span class="hljs-comment">//true</span><br><br>Object[] arr = c.toArray();<span class="hljs-comment">//把集合转换成数组</span><br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[A]</span><br><br>c.clear();<span class="hljs-comment">//[] 清空集合</span><br><br>Collection&lt;String&gt; c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c1.add(<span class="hljs-string">&quot;A&quot;</span>);<br>c1.add(<span class="hljs-string">&quot;srr&quot;</span>);<br>c.addAll(c1);<span class="hljs-comment">//把c1数据全部加入c中</span><br>System.out.println(c.toString() + c1);<span class="hljs-comment">//[A, srr][A, srr]</span><br></code></pre></td></tr></table></figure><p><code>Collection</code>没有规定集合的索引，<code>Collection</code>不支持使用<code>for</code>循环进行遍历。</p><h5 id="Collection的遍历方式"><a href="#Collection的遍历方式" class="headerlink" title="Collection的遍历方式"></a>Collection的遍历方式</h5><p>1.<strong>迭代器</strong>是用来遍历集合的专用方式（数组没有迭代器），在Java中迭代器的代表是<code>Iterator</code>。</p><p>通过迭代器获取集合的元素，如果取元素越界会出现<code>NoSuchElementException</code>异常。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Iterator%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java">Collection&lt;String&gt; c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c2.add(<span class="hljs-string">&quot;AAA&quot;</span>);<br>c2.add(<span class="hljs-string">&quot;BBB&quot;</span>);<br><br>Iterator&lt;String&gt; it = c2.iterator();<span class="hljs-comment">//1.从集合对象获取迭代器对象</span><br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<span class="hljs-comment">//使用循环和迭代器遍历集合</span><br>    System.out.println(it.next());<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<strong>增强for循环</strong></p><p>增强for可以用来<strong>遍历集合或者数组</strong>。增强for遍历集合，本质就是<strong>迭代器遍历集合的简化写法</strong>。</p><p>注意：修改增强for中的变量值不会影响到集合中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>(String ele: c2)&#123;<span class="hljs-comment">//2.增强for遍历集合</span><br>    System.out.println(ele);<br>    ele = <span class="hljs-string">&quot;aaa&quot;</span>;<span class="hljs-comment">//修改增强for中的变量值不会影响到集合中的元素</span><br>&#125;<br>System.out.println(c2);<span class="hljs-comment">//上述for循环中并没有通过ele修改集合的值</span><br></code></pre></td></tr></table></figure><p>3.<strong>Lambda表达式</strong>遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span> <span class="hljs-comment">//结合lambda遍历集合</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java">c2.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;() &#123;<span class="hljs-comment">//3.结合Lambda表达式遍历集合</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//简化版本：</span><br>c2.forEach(s-&gt; System.out.println(s));<br>c2.forEach(System.out::println);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//forEach方法的源码：</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span> &#123;<br>    Objects.requireNonNull(action);<br>    <span class="hljs-keyword">for</span> (T t : <span class="hljs-built_in">this</span>) &#123;<span class="hljs-comment">//底层使用了增强for循环实现</span><br>        action.accept(t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E7%90%86.png"></p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/List%E7%9A%84%E7%89%B9%E6%9C%89%E6%96%B9%E6%B3%95.png"></p><p>List集合支持的遍历方式：<strong>for循环</strong>（因为<strong>List集合有索引</strong>）、迭代器 、增强for循环、Lambda表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list1.add(<span class="hljs-string">&quot;srr&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;18&quot;</span>);<br><br>list1.add(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;888&quot;</span>);<span class="hljs-comment">//在某个索引处插入元素</span><br>System.out.println(list1.remove(<span class="hljs-number">1</span>));<span class="hljs-comment">//删除某个索引处元素</span><br>System.out.println(list1.get(<span class="hljs-number">0</span>));<span class="hljs-comment">//只能用get方法访问，不能用[]</span><br>System.out.println(list1.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;666&quot;</span>));<span class="hljs-comment">//修改索引处元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list1.size(); i++) &#123;<br>    System.out.println(list1.get(i));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ArrayList的底层原理：基于数组实现"><a href="#ArrayList的底层原理：基于数组实现" class="headerlink" title="ArrayList的底层原理：基于数组实现"></a>ArrayList的底层原理：基于数组实现</h5><p>特点：查询快，增删慢。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.利用无参构造器创建的集合，会在底层创建一个默认长度为<span class="hljs-number">0</span>的数组。<br><span class="hljs-attribute">2</span>.添加第一个元素时，底层会创建一个新的长度为<span class="hljs-number">10</span>的数组。<br><span class="hljs-attribute">3</span>.存满时，会扩容<span class="hljs-number">1</span>.<span class="hljs-number">5</span>倍。<br><span class="hljs-attribute">4</span>.如果一次添加多个元素，<span class="hljs-number">1</span>.<span class="hljs-number">5</span>倍还放不下，则新创建数组的长度以实际为准。<br></code></pre></td></tr></table></figure><h5 id="LinkedList的底层原理：基于双链表实现"><a href="#LinkedList的底层原理：基于双链表实现" class="headerlink" title="LinkedList的底层原理：基于双链表实现"></a>LinkedList的底层原理：基于双链表实现</h5><p>特点：查询慢，增删相对较快，但对首尾元素进行增删改查的速度是极快的。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/LinkedList%E7%9A%84%E7%89%B9%E6%9C%89%E6%96%B9%E6%B3%95.png"></p><p><code>LinkedList</code>的应用场景：</p><p>1.设计队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java">LinkedList&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//入队</span><br>queue.addLast(<span class="hljs-string">&quot;1&quot;</span>);<br>queue.addLast(<span class="hljs-string">&quot;2&quot;</span>);<br>System.out.println(queue);<br><span class="hljs-comment">//出队</span><br>queue.removeFirst();<br>System.out.println(queue);<br></code></pre></td></tr></table></figure><p>2.设计栈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java">LinkedList&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><span class="hljs-comment">//入栈</span><br>stack.addFirst(<span class="hljs-string">&quot;1&quot;</span>);<br>stack.addFirst(<span class="hljs-string">&quot;2&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;3&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;4&quot;</span>);<br>System.out.println(stack);<br><span class="hljs-comment">//出栈</span><br>stack.removeFirst();<br>stack.pop();<br>System.out.println(stack);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//push方法源码：和使用addFirst一样</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(E e)</span> &#123;<br>addFirst(e);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//pop方法源码：和使用removeFirst一样</span><br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> removeFirst();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Set</code>系列集合：添加的元素是<strong>无序</strong>（添加数据的顺序和获取出的数据顺序不一致）、<strong>不重复</strong>、<strong>无索引</strong>（不支持通过索引操作数据）。</p><ul><li><code>HashSet</code>: <strong>无序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</li><li><code>LinkedHashSet</code>: <strong>有序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</li><li><code>TreeSet</code>：<strong>按照大小默认升序排序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</li></ul><p>注意：Set要用到的常用方法，基本上就是Collection提供的。自己几乎没有额外新增一些常用功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Set&lt;String&gt; set = new HashSet&lt;&gt;();//[222, 18, 888]</span><br><span class="hljs-comment">//Set&lt;String&gt; set = new LinkedHashSet&lt;&gt;();//[18, 222, 888]</span><br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<span class="hljs-comment">//[18, 222, 888]</span><br>set.add(<span class="hljs-string">&quot;18&quot;</span>);<br>set.add(<span class="hljs-string">&quot;222&quot;</span>);<br>set.add(<span class="hljs-string">&quot;222&quot;</span>);<br>set.add(<span class="hljs-string">&quot;888&quot;</span>);<br>System.out.println(set);<br></code></pre></td></tr></table></figure><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p><code>HashSet</code>：<strong>无序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</p><p>哈希值：是一个<code>int</code>类型的数值，Java中每个对象都有一个哈希值。</p><p>Java中的所有对象，都可以调用<code>Obejct</code>类提供的<code>hashCode</code>方法，返回该对象自己的哈希值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回对象的哈希码值。 </span><br></code></pre></td></tr></table></figure><p>同一个对象多次调用hashCode()方法返回的哈希值是相同的。</p><p>不同的对象，它们的哈希值一般不相同，但也有可能会相同(哈希碰撞)。</p><p><strong>HashSet集合的底层原理</strong>：基于<strong>哈希表</strong>实现。</p><p>哈希表：</p><ul><li>JDK8之前，哈希表 &#x3D; 数组+链表</li><li>JDK8开始，哈希表 &#x3D; 数组+链表+红黑树</li></ul><p><strong>JDK8之前HashSet集合的底层原理，基于哈希表：数组+链表</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.创建一个默认长度16的数组，默认加载因子为0.75，数组名table<br>2.使用元素的哈希值对数组的长度求余计算出应存入的位置<br>3.判断当前位置是否为<span class="hljs-literal">null</span>，如果是<span class="hljs-literal">null</span>直接存入<br>4.如果不为<span class="hljs-literal">null</span>，表示有元素，则调用equals方法比较<br>         比较相等，则不存；不相等，则存入数组<br>5.JDK8之前，新元素存入数组，占老元素位置，老元素挂下面<br>6.JDK8开始之后，新元素直接挂在老元素下面<br>如果链表过长，则进行扩容：<br>当数组存满到16<span class="hljs-number">*0</span>.<span class="hljs-attribute">75</span>=12时，就自动扩容，每次扩容原先的两倍。<br></code></pre></td></tr></table></figure><p><strong>JDK8开始HashSet集合的底层原理，基于哈希表：数组 + 链表 + 红黑树</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">JDK8开始，当链表长度超过<span class="hljs-number">8</span>，且数组长度&gt;<span class="hljs-operator">=</span><span class="hljs-number">64</span>时，自动将链表转成红黑树<br>红黑树是有排序的，通过哈希值确定元素的大小，小的哈希值是左子树，大的哈希值是右子树。<br></code></pre></td></tr></table></figure><p>注意：<strong>HashSet集合默认不能对内容一样的两个不同对象去重复</strong>。比如内容一样的两个学生对象存入到HashSet集合中去 , HashSet集合是不能去重复的。</p><p>解决办法：如果希望<code>Set</code>集合认为2个内容一样的对象是重复的，必须重写对象的<code>hashCode</code>和<code>equals</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><span class="hljs-comment">//重写equals方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br><span class="hljs-comment">//重写hashCode方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">Set&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>));<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">222</span>));<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">222</span>));<br>System.out.println(students);<span class="hljs-comment">//[Student&#123;name=&#x27;srr&#x27;, age=18&#125;, Student&#123;name=&#x27;scb&#x27;, age=222&#125;]</span><br><span class="hljs-comment">//若不重写hashCode方法和equals方法，则会出现重复的scb：[Student&#123;name=&#x27;srr&#x27;, age=18&#125;, Student&#123;name=&#x27;scb&#x27;, age=222&#125;, Student&#123;name=&#x27;scb&#x27;, age=222&#125;]</span><br></code></pre></td></tr></table></figure><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p><code>LinkedHashSet</code>：<strong>有序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。</p><p><strong>LinkedHashSet的底层原理</strong>：基于<strong>哈希表（数组、链表、红黑树）</strong>实现。但是，它的每个元素都额外的多了一个<strong>双链表的机制记录它前后元素的位置</strong>。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/ListedHashSet%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.png"></p><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p><code>TreeSet</code>：<strong>按照大小默认升序排序</strong>、<strong>不重复</strong>、<strong>无索引</strong>。底层是基于<strong>红黑树实现的排序</strong>。</p><p>注意：</p><p>1.对于数值类型：<code>Integer</code> , <code>Double</code>，默认按照数值本身的大小进行升序排序。</p><p>2.对于字符串类型：默认按照首字符的编号升序排序。</p><p>3.对于自定义类型如Student对象，<code>TreeSet</code>默认是无法直接排序的。</p><p>解决方法：<code>TreeSet</code>集合<strong>存储自定义类型的对象时，必须指定排序规则</strong>，支持如下两种方式来指定比较规则。</p><p>1.让自定义的类（如学生类）实现<code>Comparable</code>接口，重写里面的<code>compareTo</code>方法来指定比较规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <br>    <span class="hljs-comment">//重写compareTo方法来指定比较规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<span class="hljs-comment">//注意：若两个对象的age则相等返回0，即使name和score不一样，也会被认定为相同被去重</span><br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java">Set&lt;Student&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>set1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;sll&quot;</span>, <span class="hljs-number">48</span>, <span class="hljs-number">88.8</span>));<br>set1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">99.8</span>));<br>set1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">96.8</span>));<br>System.out.println(set1);<br><span class="hljs-comment">//[Student&#123;name=&#x27;srr&#x27;, age=18, score=99.8&#125;, Student&#123;name=&#x27;sll&#x27;, age=48, score=88.8&#125;]</span><br><span class="hljs-comment">//注意：因为compareTo规定age相等返回0，此时Treeset集合只会保留一个元素，认为两者重复。所以后加入的scb即使name和score和srr不一样，但是两者age一样，所以scb会被去重。</span><br></code></pre></td></tr></table></figure><p>2.通过调用<code>TreeSet</code>集合有参数构造器，可以设置<code>Comparator</code>对象（比较器对象），用于指定比较规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TreeSet</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span><br></code></pre></td></tr></table></figure><p>注意：如果类本身有实现<code>Comparable</code>接口，<code>TreeSet</code>集合同时也自带比较器，<strong>默认使用集合自带的比较器排序</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java">Set&lt;Student&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getScore(), o2.getScore());<span class="hljs-comment">//按照score大小升序排序</span><br>    &#125;<br>&#125;);<br><span class="hljs-comment">//简化格式：</span><br><span class="hljs-comment">//Set&lt;Student&gt; set2 = new TreeSet&lt;&gt;((o1, o2) -&gt; Double.compare(o1.getScore(), o2.getScore()));</span><br>set2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;sll&quot;</span>, <span class="hljs-number">48</span>, <span class="hljs-number">88.8</span>));<br>set2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">99.8</span>));<br>set2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">96.8</span>));<br>System.out.println(set2);<br><span class="hljs-comment">//[Student&#123;name=&#x27;sll&#x27;, age=48, score=88.8&#125;, Student&#123;name=&#x27;scb&#x27;, age=18, score=96.8&#125;, Student&#123;name=&#x27;srr&#x27;, age=18, score=99.8&#125;]</span><br></code></pre></td></tr></table></figure><h4 id="集合的并发修改异常"><a href="#集合的并发修改异常" class="headerlink" title="集合的并发修改异常"></a>集合的并发修改异常</h4><p>1.使用<strong>迭代器遍历集合</strong>时，又<strong>同时在删除集合中的数据</strong>，程序就会出现并发修改异常的错误。</p><p>2.由于增强for循环遍历集合就是迭代器遍历集合的简化写法，因此，使用<strong>增强for循环遍历集合</strong>，又在<strong>同时删除集合中的数据</strong>时，程序也会出现并发修改异常的错误。</p><p>集合的并发修改异常报错：<code>java.util.ConcurrentModificationException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list2.add(<span class="hljs-string">&quot;srr&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;小李子&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;李爱花&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;张三&quot;</span>);<br>list2.add(<span class="hljs-string">&quot;李玉刚&quot;</span>);<br>System.out.println(list2);<br><br><span class="hljs-comment">//使用for循环删除带&quot;李&quot;的名字</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">for (int i = 0; i &lt; list2.size(); i++) &#123;</span><br><span class="hljs-comment">    String name = list2.get(i);</span><br><span class="hljs-comment">    if(name.contains(&quot;李&quot;))&#123;</span><br><span class="hljs-comment">        list2.remove(name);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">System.out.println(list2);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//使用迭代器删除带&quot;李&quot;的名字，这和使用for循环的原理是一样的，但是使用迭代器删除会报错，这是因为会遇到删除不全的情况</span><br>Iterator&lt;String&gt; it2 = list2.iterator();<br><span class="hljs-keyword">while</span>(it2.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> it2.next();<br>    <span class="hljs-keyword">if</span>(name.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>        list2.remove(name);<span class="hljs-comment">//只要使用集合的remove方法删除集合元素，就会报错java.util.ConcurrentModificationException</span><br>    &#125;<br>&#125;<br>System.out.println(list2);<br></code></pre></td></tr></table></figure><p>保证遍历集合同时删除数据时不出bug：</p><p>1.使用迭代器遍历集合，但用<strong>迭代器自己的删除方法删除数据</strong>即可。<strong>不要使用集合的删除方法删除数据</strong>。使用迭代器的<code>remove</code>方法删除数据当前遍历到的数据，每删除一个数据后，相当于在底层做了<code>i--</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java">Iterator&lt;String&gt; it2 = list2.iterator();<br><span class="hljs-keyword">while</span>(it2.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> it2.next();<br>    <span class="hljs-keyword">if</span>(name.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>        it2.remove();<span class="hljs-comment">//删除迭代器当前遍历到的数据，每删除一个数据后，相当于在底层做了i--</span><br>    &#125;<br>&#125;<br>System.out.println(list2);<br></code></pre></td></tr></table></figure><p>2.如果能用<code>for</code>循环遍历时：可以倒着遍历并删除；或者从前往后遍历，但删除元素后做<code>i--</code>操作。</p><p>3.使用<strong>增强for循环</strong>或<strong>forEach的Lambda表达式</strong>（底层是使用增强for循环实现的）遍历集合并删除数据，<strong>没有办法解决并发修改异常</strong>。</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数是一种<strong>特殊形参</strong>，定义在方法、构造器的形参列表里，格式是：<code>数据类型...参数名称</code>。</p><p>可变参数可以不传数据给它；可以传一个或者同时传多个数据给它；也可以传一个数组给它。可变参数常常用来灵活的接收数据。</p><p>注意：</p><p>1.可变参数在方法内部就是一个<strong>数组</strong>。</p><p>2.一个形参列表中<strong>可变参数只能有一个</strong>。</p><p>3.可变参数必须放在<strong>形参列表的最后面</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        test(<span class="hljs-number">10</span>);<span class="hljs-comment">//不传数据给可变形参</span><br>        test(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//传一个数据</span><br>        test(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//传多个数据</span><br>        test(<span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;);<span class="hljs-comment">//传一个数组</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> age, <span class="hljs-type">int</span>...nums)</span>&#123;<br>        System.out.println(nums.length);<br>        System.out.println(Arrays.toString(nums));<br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><p><code>Collections</code>是一个用来<strong>操作集合</strong>的工具类。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Collections%E7%9A%84%E5%B8%B8%E7%94%A8%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(names, <span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-string">&quot;sll&quot;</span>, <span class="hljs-string">&quot;szz&quot;</span>);<span class="hljs-comment">//批量添加</span><br>Collections.shuffle(names);<span class="hljs-comment">//打乱</span><br>Collections.sort(names);<span class="hljs-comment">//排序：[scb, sll, srr, szz]</span><br></code></pre></td></tr></table></figure><p>注意：<code>Collections</code>只能支持对<strong>List集合</strong>进行排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//排序方式1：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(List&lt;T&gt; list)</span><span class="hljs-comment">//对List集合中元素按照默认规则排序</span><br><span class="hljs-comment">//本方法可以直接对自定义类型的List集合排序，但自定义类型必须实现了Comparable接口，指定了比较规则才可以。</span><br><br><span class="hljs-comment">//排序方式2：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(List&lt;T&gt; list，Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span><span class="hljs-comment">//对List集合中元素，按照比较器对象指定的规则进行排序</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类使用上述set-&gt;TreeSet中定义的Student类</span><br>List&lt;Student&gt; list3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">99.3</span>));<br>list3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">96.3</span>));<br>list3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;sll&quot;</span>, <span class="hljs-number">48</span>, <span class="hljs-number">92.3</span>));<br><br><span class="hljs-comment">//方式1：实现Comparable接口按照年龄排序</span><br>Collections.sort(list3);<br><span class="hljs-comment">//[Student&#123;name=&#x27;scb&#x27;, age=16, score=96.3&#125;, Student&#123;name=&#x27;srr&#x27;, age=18, score=99.3&#125;, Student&#123;name=&#x27;sll&#x27;, age=48, score=92.3&#125;]</span><br><br><span class="hljs-comment">//方式2：按照比较器对象指定的规则（按照成绩）进行排序</span><br>Collections.sort(list3, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getScore(), o2.getScore());<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//简化写法：</span><br>Collections.sort(list3, (o1, o2) -&gt; Double.compare(o1.getScore(), o2.getScore()));<br><span class="hljs-comment">//[Student&#123;name=&#x27;sll&#x27;, age=48, score=92.3&#125;, Student&#123;name=&#x27;scb&#x27;, age=16, score=96.3&#125;, Student&#123;name=&#x27;srr&#x27;, age=18, score=99.3&#125;]</span><br></code></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>Map</code>集合称为<strong>双列集合</strong>，格式：<code>&#123;key1=value1 , key2=value2 , key3=value3 , ...&#125;</code>， 一次需要存一对数据做为一个元素。</p><p><code>Map</code>集合的每个元素<code>key=value</code>称为一个键值对&#x2F;键值对对象&#x2F;一个<code>Entry</code>对象，<code>Map</code>集合也被叫做<strong>键值对集合</strong>。</p><p><code>Map</code>集合的所有<strong>键是不允许重复</strong>的，但值可以重复，键和值是一一对应的，每一个键只能找到自己对应的值。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Map%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB.png"></p><p>注意：Map系列集合的特点都是由<strong>键决定</strong>的，值只是一个附属品，值是不做要求的。</p><ul><li><code>HashMap</code>（由键决定特点）：无序、不重复、无索引。</li><li><code>LinkedHashMap</code>（由键决定特点）：由键决定的特点：有序、不重复、无索引。</li><li><code>TreeMap</code>（由键决定特点）：按照大小默认升序排序、不重复、无索引。</li></ul><h5 id="Map的常用方法"><a href="#Map的常用方法" class="headerlink" title="Map的常用方法"></a>Map的常用方法</h5><p><code>Map</code>是双列集合的祖宗，它的功能是全部双列集合都可以继承过来使用的。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Map%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">180</span>);<br>map.put(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">200</span>);<span class="hljs-comment">//重复时，后面的值会替换前面的值</span><br>map.put(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">200</span>);<br>map.put(<span class="hljs-string">&quot;sll&quot;</span>, <span class="hljs-number">100</span>);<br>map.put(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>System.out.println(map);<span class="hljs-comment">//&#123;null=null, srr=200, sll=100, scb=200&#125;</span><br><br>System.out.println(map.size());<span class="hljs-comment">//集合的大小</span><br>System.out.println(map.isEmpty());<span class="hljs-comment">//判断集合是否为空</span><br>System.out.println(map.get(<span class="hljs-string">&quot;srr&quot;</span>));<span class="hljs-comment">//根据键获取对应值</span><br>System.out.println(map.remove(<span class="hljs-string">&quot;sll&quot;</span>));<span class="hljs-comment">//根据键删除元素，返回键值</span><br>System.out.println(map.containsKey(<span class="hljs-string">&quot;srr&quot;</span>));<span class="hljs-comment">//判断是否包含某个键，分大小写严格匹配</span><br>System.out.println(map.containsValue(<span class="hljs-number">100</span>));<span class="hljs-comment">//判断是否保号某个值</span><br><br>Set&lt;String&gt; key = map.keySet();<span class="hljs-comment">//获取所有键</span><br>System.out.println(key);<span class="hljs-comment">//[null, srr, scb]</span><br><br>Collection&lt;Integer&gt; value = map.values();<span class="hljs-comment">//获取所有值</span><br>System.out.println(value);<span class="hljs-comment">//[null, 200, 200] 相同的值也会重复显示</span><br><br>Map&lt;String, Integer&gt; map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map1.put(<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-number">1</span>);<br>map1.put(<span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-number">2</span>);<br>map1.put(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">888</span>);<br>map.putAll(map1);<span class="hljs-comment">//将map1的元素全部放入map中，map1中的srr和map重复，map1中的srr的值会替换掉map中的</span><br>System.out.println(map);<span class="hljs-comment">//&#123;null=null, srr=888, python=2, scb=200, java=1&#125;</span><br>System.out.println(map1);<span class="hljs-comment">//&#123;python=2, srr=888, java=1&#125;</span><br><br>map.clear();<span class="hljs-comment">//清空集合</span><br>System.out.println(map);<span class="hljs-comment">//&#123;&#125;</span><br></code></pre></td></tr></table></figure><h5 id="Map的遍历方式"><a href="#Map的遍历方式" class="headerlink" title="Map的遍历方式"></a>Map的遍历方式</h5><p>1.<strong>键找值</strong>：先获取Map集合全部的键，再通过遍历键来找值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title function_">keySet</span><span class="hljs-params">()</span><span class="hljs-comment">//获取所有键的集合</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span><span class="hljs-comment">//根据键获取其对应的值</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;String, Double&gt; mymap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>mymap.put(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">100.8</span>);<br>mymap.put(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">99.9</span>);<br>mymap.put(<span class="hljs-string">&quot;sll&quot;</span>, <span class="hljs-number">80.8</span>);<br><br>Set&lt;String&gt; mykey = mymap.keySet();<span class="hljs-comment">//1.键找值</span><br><span class="hljs-keyword">for</span> (String k : mykey) &#123;<br>    System.out.println(k + <span class="hljs-string">&quot;-&gt;&quot;</span> + mymap.get(k));<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<strong>键值对</strong>：把键值对看成一个整体<code>Map.Entry&lt;K, V&gt;</code>进行遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = mymap.entrySet();<span class="hljs-comment">//2.键值对</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : entries) &#123;<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot;-&gt;&quot;</span> + entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><p>3.<strong>Lambda表达式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span><span class="hljs-params">(BiConsumer&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V&gt; action)</span><span class="hljs-comment">//结合lambda遍历Map集合</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java">mymap.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BiConsumer</span>&lt;String, Double&gt;() &#123;<span class="hljs-comment">//3.Lambda表达式</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s, Double d)</span> &#123;<br>        System.out.println(s + <span class="hljs-string">&quot;-&gt;&quot;</span> + d);<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//简化写法：</span><br>mymap.forEach((k, v) -&gt; System.out.println(k + <span class="hljs-string">&quot;-&gt;&quot;</span> + v));<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//forEach方法的源码：顶层就是使用了第2种方法把键值对看成一个整体Map.Entry&lt;K, V&gt;进行遍历</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span><span class="hljs-params">(BiConsumer&lt;? <span class="hljs-built_in">super</span> K, ? <span class="hljs-built_in">super</span> V&gt; action)</span> &#123;<br>    Objects.requireNonNull(action);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;K, V&gt; entry : entrySet()) &#123;<br>        K k;<br>        V v;<br>        <span class="hljs-keyword">try</span> &#123;<br>            k = entry.getKey();<br>            v = entry.getValue();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalStateException ise) &#123;<br>            <span class="hljs-comment">// this usually means the entry is no longer in the map.</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>(ise);<br>        &#125;<br>        action.accept(k, v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p><code>HashMap</code>（由键决定特点）：无序、不重复、无索引。</p><p><strong>HashMap集合的底层原理</strong>：<code>HashMap</code>跟<code>HashSet</code>的底层原理一模一样，都是基于<strong>哈希表</strong>实现的。<strong>HashSet的底层原理就是HashMap</strong>。</p><p>注意：<strong>Set系列集合的底层就是基于Map实现的</strong>，只是<code>Set</code>集合中的元素只要键数据，不要值数据而已。</p><p><code>HashMap</code>在存储时，会把键值对封装成<code>Entry</code>对象，然后利用<strong>键计算哈希值</strong>，跟值无关。其余存储的流程<code>HashSet</code>一模一样。</p><p>注意：</p><p>1.<code>HashMap</code>的键依赖<code>hashCode</code>方法和<code>equals</code>方法保证键的唯一。</p><p>2.如果键存储的是<strong>自定义类型的对象</strong>，可以通过重写<code>hashCode</code>和<code>equals</code>方法，这样可以保证多个对象内容一样时，HashMap集合就能认为是重复的。这一点和<code>HashSet</code>类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Double.compare(score, student.score) == <span class="hljs-number">0</span> &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age, score);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;Student, String&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map2.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;szu&quot;</span>);<br>map2.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>map2.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>System.out.println(map2);<span class="hljs-comment">//&#123;Student&#123;name=&#x27;srr&#x27;, age=18, score=100.0&#125;=szu, Student&#123;name=&#x27;scb&#x27;, age=16, score=99.8&#125;=gzu&#125;</span><br><span class="hljs-comment">//若不重写hashCode方法和equals方法，则会出现重复的scb：&#123;Student&#123;name=&#x27;srr&#x27;, age=18, score=100.0&#125;=szu, Student&#123;name=&#x27;scb&#x27;, age=16, score=99.8&#125;=gzu, Student&#123;name=&#x27;scb&#x27;, age=16, score=99.8&#125;=gzu&#125;</span><br></code></pre></td></tr></table></figure><h5 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h5><p><code>LinkedHashMap</code>（由键决定特点）：由键决定的特点：有序、不重复、无索引。</p><p><strong>LinkedHashMap集合的底层原理</strong>：基于<strong>哈希表</strong>实现，只是每个键值对元素又额外的多了一个<strong>双链表</strong>的机制记录元素顺序（保证有序）。<strong>LinkedHashSet集合的底层原理就是LinkedHashMap</strong>。</p><p><code>LinkedHashMap</code>在存储时，会把键值对封装成<code>Entry</code>对象，然后利用<strong>键计算哈希值</strong>，跟值无关。其余存储的流程<code>LinkedHashSet</code>一模一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;Student, String&gt; map3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<span class="hljs-comment">//和HashMap的创建类似，区别是LinkedHashMap有序</span><br>map3.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;szu&quot;</span>);<br>map3.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>map3.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>System.out.println(map3);<span class="hljs-comment">//&#123;Student&#123;name=&#x27;srr&#x27;, age=18, score=100.0&#125;=szu, Student&#123;name=&#x27;scb&#x27;, age=16, score=99.8&#125;=gzu&#125;</span><br></code></pre></td></tr></table></figure><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p><code>TreeMap</code>（由键决定特点）：按照大小默认升序排序、不重复、无索引。</p><p><strong>TreeMap集合的底层原理</strong>：<code>TreeMap</code>跟<code>TreeSet</code>集合的底层原理是一样的，都是基于<strong>红黑树</strong>实现的排序。<strong>TreeSet的底层原理就是TreeMap</strong>。</p><p><code>TreeMap</code>集合同样也支持两种方式来指定排序规则：（否则<code>put</code>时会报错：<code>java.lang.ClassCastException</code>）</p><p>1.让类实现<code>Comparable</code>接口，重写比较规则。</p><p>2.<code>TreeMap</code>集合有一个有参数构造器，支持创建<code>Comparator</code>比较器对象，以便用来指定比较规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.Map_;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> + <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, score=&quot;</span> + score + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Double.compare(score, student.score) == <span class="hljs-number">0</span> &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age, score);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//方式1：实现Comparable接口</span><br>Map&lt;Student, String&gt; map4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br>map4.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;szu&quot;</span>);<br>map4.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>map4.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>System.out.println(map4);<br><span class="hljs-comment">//按照age比较：&#123;Student&#123;name=&#x27;scb&#x27;, age=16, score=99.8&#125;=gzu, Student&#123;name=&#x27;srr&#x27;, age=18, score=100.0&#125;=szu&#125;</span><br><br><span class="hljs-comment">//方式2：创建Comparator比较器对象</span><br>Map&lt;Student, String&gt; map5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getScore(), o2.getScore());<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//简化写法：</span><br><span class="hljs-comment">//Map&lt;Student, String&gt; map5 = new TreeMap&lt;&gt;((o1, o2) -&gt; Double.compare(o1.getScore(), o2.getScore()));</span><br>map5.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;szu&quot;</span>);<br>map5.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>map5.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;scb&quot;</span>, <span class="hljs-number">16</span>, <span class="hljs-number">99.8</span>), <span class="hljs-string">&quot;gzu&quot;</span>);<br>System.out.println(map5);<br><span class="hljs-comment">//按照score比较：&#123;Student&#123;name=&#x27;scb&#x27;, age=16, score=99.8&#125;=gzu, Student&#123;name=&#x27;srr&#x27;, age=18, score=100.0&#125;=szu&#125;</span><br></code></pre></td></tr></table></figure><h4 id="集合的嵌套"><a href="#集合的嵌套" class="headerlink" title="集合的嵌套"></a>集合的嵌套</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;String, List&lt;String&gt;&gt; citymap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>List&lt;String&gt; cities1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(cities1, <span class="hljs-string">&quot;南京&quot;</span>, <span class="hljs-string">&quot;苏州&quot;</span>);<br>citymap.put(<span class="hljs-string">&quot;江苏&quot;</span>, cities1);<br><br>List&lt;String&gt; cities2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(cities2, <span class="hljs-string">&quot;广州&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;珠海&quot;</span>);<br>citymap.put(<span class="hljs-string">&quot;广东&quot;</span>, cities2);<br><br>citymap.forEach((k, v) -&gt; System.out.println(k + <span class="hljs-string">&quot;-&gt;&quot;</span> + v));<br><span class="hljs-comment">//广东-&gt;[广州, 深圳, 珠海]</span><br><span class="hljs-comment">//江苏-&gt;[南京, 苏州]</span><br></code></pre></td></tr></table></figure><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><h5 id="获取Stream流"><a href="#获取Stream流" class="headerlink" title="获取Stream流"></a>获取Stream流</h5><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/%E8%8E%B7%E5%8F%96Stream%E6%B5%81%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Double.compare(student.height, height) == <span class="hljs-number">0</span> &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age, height);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, height=&quot;</span> + height +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 1、获取List集合的Stream流</span><br>List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(names, <span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>,<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张强&quot;</span>);<br>Stream&lt;String&gt; stream = names.stream();<br><br><span class="hljs-comment">// 2、获取Set集合的Stream流</span><br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>Collections.addAll(set, <span class="hljs-string">&quot;刘德华&quot;</span>,<span class="hljs-string">&quot;张曼玉&quot;</span>,<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-string">&quot;马德&quot;</span>,<span class="hljs-string">&quot;德玛西亚&quot;</span>);<br>Stream&lt;String&gt; stream1 = set.stream();<br>stream1.filter(s -&gt; s.contains(<span class="hljs-string">&quot;德&quot;</span>)).forEach(s -&gt; System.out.println(s));<br><br><span class="hljs-comment">// 3、获取Map集合的Stream流</span><br>Map&lt;String, Double&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;古力娜扎&quot;</span>, <span class="hljs-number">172.3</span>);<br>map.put(<span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-number">168.3</span>);<br>map.put(<span class="hljs-string">&quot;马尔扎哈&quot;</span>, <span class="hljs-number">166.3</span>);<br>map.put(<span class="hljs-string">&quot;卡尔扎巴&quot;</span>, <span class="hljs-number">168.3</span>);<br><br>Set&lt;String&gt; keys = map.keySet();<br>Stream&lt;String&gt; ks = keys.stream();<br><br>Collection&lt;Double&gt; values = map.values();<br>Stream&lt;Double&gt; vs = values.stream();<br><br>Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();<br>Stream&lt;Map.Entry&lt;String, Double&gt;&gt; kvs = entries.stream();<br>kvs.filter(e -&gt; e.getKey().contains(<span class="hljs-string">&quot;巴&quot;</span>))<br>    .forEach(e -&gt; System.out.println(e.getKey()+ <span class="hljs-string">&quot;--&gt;&quot;</span> + e.getValue()));<br><br><span class="hljs-comment">// 4、获取数组的Stream流</span><br>String[] names2 = &#123;<span class="hljs-string">&quot;张翠山&quot;</span>, <span class="hljs-string">&quot;东方不败&quot;</span>, <span class="hljs-string">&quot;唐大山&quot;</span>, <span class="hljs-string">&quot;独孤求败&quot;</span>&#125;;<br>Stream&lt;String&gt; s1 = Arrays.stream(names2);<br>Stream&lt;String&gt; s2 = Stream.of(names2);<br></code></pre></td></tr></table></figure><h5 id="Stream流的中间方法"><a href="#Stream流的中间方法" class="headerlink" title="Stream流的中间方法"></a>Stream流的中间方法</h5><p>中间方法指的是调用完成后会返回新的<code>Stream</code>流，可以继续使用（支持链式编程）。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Stream%E6%B5%81%E7%9A%84%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;Double&gt; scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Collections.addAll(scores, <span class="hljs-number">88.5</span>, <span class="hljs-number">100.0</span>, <span class="hljs-number">60.0</span>, <span class="hljs-number">99.0</span>, <span class="hljs-number">9.5</span>, <span class="hljs-number">99.6</span>, <span class="hljs-number">25.0</span>);<br><span class="hljs-comment">// 需求1：找出成绩大于等于60分的数据，并升序后，再输出。</span><br>scores.stream().filter(s -&gt; s &gt;= <span class="hljs-number">60</span>).sorted().forEach(s -&gt; System.out.println(s));<br><br>List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">167.6</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;白晶晶&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">169.0</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">183.3</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛夫人&quot;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">168.5</span>);<br>Collections.addAll(students, s1, s2, s3, s4, s5, s6);<br><span class="hljs-comment">// 需求2：找出年龄大于等于23,且年龄小于等于30岁的学生，并按照年龄降序输出.</span><br>students.stream().filter(s -&gt; s.getAge() &gt;= <span class="hljs-number">23</span> &amp;&amp; s.getAge() &lt;= <span class="hljs-number">30</span>)<br>    .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())<br>    .forEach(s -&gt; System.out.println(s));<br><br><span class="hljs-comment">// 需求3：取出身高最高的前3名学生，并输出。</span><br>students.stream().sorted((o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()))<br>    .limit(<span class="hljs-number">3</span>).forEach(System.out::println);<br>System.out.println(<span class="hljs-string">&quot;----------------------------------------------------------------&quot;</span>);<br><br><span class="hljs-comment">// 需求4：取出身高倒数的2名学生，并输出。   s1 s2 s3 s4 s5 s6</span><br>students.stream().sorted((o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()))<br>    .skip(students.size() - <span class="hljs-number">2</span>).forEach(System.out::println);<br><br><span class="hljs-comment">// 需求5：找出身高超过168的学生叫什么名字，要求去除重复的名字，再输出。</span><br>students.stream().filter(s -&gt; s.getHeight() &gt; <span class="hljs-number">168</span>).map(Student::getName)<br>    .distinct().forEach(System.out::println);<br><br><span class="hljs-comment">// distinct去重复，自定义类型的对象（希望内容一样就认为重复，重写hashCode,equals）</span><br>students.stream().filter(s -&gt; s.getHeight() &gt; <span class="hljs-number">168</span>)<br>    .distinct().forEach(System.out::println);<br><br>Stream&lt;String&gt; st1 = Stream.of(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>Stream&lt;String&gt; st2 = Stream.of(<span class="hljs-string">&quot;张三2&quot;</span>, <span class="hljs-string">&quot;李四2&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>);<br>Stream&lt;String&gt; allSt = Stream.concat(st1, st2);<br>allSt.forEach(System.out::println);<br></code></pre></td></tr></table></figure><h5 id="Stream流的终结方法"><a href="#Stream流的终结方法" class="headerlink" title="Stream流的终结方法"></a>Stream流的终结方法</h5><p>终结方法指的是调用完成后，不会返回新<code>Stream</code>了，没法继续使用流了。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/Stream%E6%B5%81%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%88%E7%BB%93%E6%96%B9%E6%B3%95.png"></p><p>收集<code>Stream</code>流：就是把<code>Stream</code>流操作后的结果转回到集合或者数组中去返回。</p><p><code>Stream</code>流：方便操作集合&#x2F;数组的手段。集合&#x2F;数组：才是开发中的目的。</p><p><img src="/2024/09/25/Java%E9%9B%86%E5%90%88/%E6%94%B6%E9%9B%86Stream%E6%B5%81.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java">List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>, <span class="hljs-number">26</span>, <span class="hljs-number">172.5</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;紫霞&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">167.6</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;白晶晶&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">169.0</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>, <span class="hljs-number">35</span>, <span class="hljs-number">183.3</span>);<br><span class="hljs-type">Student</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;牛夫人&quot;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">168.5</span>);<br>Collections.addAll(students, s1, s2, s3, s4, s5, s6);<br><span class="hljs-comment">// 需求1：请计算出身高超过168的学生有几人。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> students.stream().filter(s -&gt; s.getHeight() &gt; <span class="hljs-number">168</span>).count();<br>System.out.println(size);<br><br><span class="hljs-comment">// 需求2：请找出身高最高的学生对象，并输出。</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> students.stream().max((o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight())).get();<br>System.out.println(s);<br><br><span class="hljs-comment">// 需求3：请找出身高最矮的学生对象，并输出。</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> students.stream().min((o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight())).get();<br>System.out.println(ss);<br><br><span class="hljs-comment">// 需求4：请找出身高超过170的学生对象，并放到一个新集合中去返回。</span><br><span class="hljs-comment">// 流只能收集一次。</span><br>List&lt;Student&gt; students1 = students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>).collect(Collectors.toList());<br>System.out.println(students1);<br><br>Set&lt;Student&gt; students2 = students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>).collect(Collectors.toSet());<br>System.out.println(students2);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：上面这两段代码不能简化为：</span><br><span class="hljs-comment">    Stream&lt;Student&gt; stream = students.stream().filter(a -&gt; a.getHeight() &gt; 170);</span><br><span class="hljs-comment">    List&lt;Student&gt; students1 = stream.collect(Collectors.toList());</span><br><span class="hljs-comment">    System.out.println(students1);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Set&lt;Student&gt; students2 = stream.collect(Collectors.toSet());</span><br><span class="hljs-comment">    System.out.println(students2);</span><br><span class="hljs-comment">报错：java.lang.IllegalStateException: stream has already been operated upon or closed</span><br><span class="hljs-comment">流只能收集一次，所以这次使用了下次就不能再使用了。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 需求5：请找出身高超过170的学生对象，并把学生对象的名字和身高，存入到一个Map集合返回。</span><br>Map&lt;String, Double&gt; map =<br>    students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>)<br>    .distinct().collect(Collectors.toMap(a -&gt; a.getName(), a -&gt; a.getHeight()));<br><span class="hljs-comment">//toMap(a -&gt; a.getName(), a -&gt; a.getHeight()))这里是声明键key和值value</span><br>System.out.println(map);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：这里没有distinct()的话会报错：java.lang.IllegalStateException: Duplicate key 蜘蛛精 (attempted merging values 172.5 and 172.5)</span><br><span class="hljs-comment">因为toMap方法不能自动去掉重复的键，所以需要加distinct()来去掉重复的键。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// Object[] arr = students.stream().filter(a -&gt; a.getHeight() &gt; 170).toArray();</span><br>Student[] arr = students.stream().filter(a -&gt; a.getHeight() &gt; <span class="hljs-number">170</span>).toArray(len -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[len]);<br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java常用API</title>
    <link href="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/"/>
    <url>/2024/09/22/Java%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>API(Application Programming interface)  ：应用程序编程接口。</p><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p><code>Object</code>类是Java中所有类的祖宗类。Java中所有类的对象都可以直接使用<code>Object</code>类中提供的一些方法。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Object%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h5><p>返回对象的字符串形式。让子类重写，返回子类对象的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//重写toString方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h5><p>默认比较两个对象的地址是否相等。让子类重写，用于比较对象的内容是否相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<span class="hljs-comment">//上述Student类重写equals方法</span><br>    <span class="hljs-comment">//1.判断两个对象地址是否一样</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">//2.判断o是否为null，或者两个对象类型是否一样</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//3.o不是null，且为学生类型，比较两个对象内容是否一样</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>    <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5><p>当某个对象调用这个方法时，<code>clone</code>方法会复制一个一模一样的新对象返回。</p><p><code>clone</code>方法是<code>protected</code>，只能在<code>Object</code>所在的<code>lang</code>包下或者<code>Object</code>的子类中访问。需要在子类中重写<code>clone</code>方法才能在其他包下使用<code>clone</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//User类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<span class="hljs-comment">//2.重写clone方法需要实现Cloneable接口，该接口啥也没有，但必须implements Cloneable</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] scores;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span>[] scores)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.scores = scores;<br>    &#125;<br><br>    <span class="hljs-comment">//1.重写clone()方法时要throws CloneNotSupportedException</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<span class="hljs-comment">//浅拷贝</span><br>        <span class="hljs-comment">//返回的是Object类型，clone后赋值时要强转为User类型</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, scores=&quot;</span> + Arrays.toString(scores) +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span> + <span class="hljs-string">&quot;, scores addr=&quot;</span> + scores;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<span class="hljs-comment">//运行时需要throws CloneNotSupportedException </span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;surourou&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">100</span>,<span class="hljs-number">99.8</span>&#125;);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> (User) u1.clone();<span class="hljs-comment">//clone返回的是Object类型，clone后赋值时要强转为User类型</span><br><br>    System.out.println(u1);<br>    System.out.println(u2);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h6><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E6%B5%85%E5%85%8B%E9%9A%86.png"></p><h6 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h6><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E6%B7%B1%E5%85%8B%E9%9A%86.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//实现浅克隆和深克隆</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>    <span class="hljs-comment">//return super.clone();//浅拷贝</span><br>    <span class="hljs-comment">//深拷贝</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> (User) <span class="hljs-built_in">super</span>.clone();<br>    u2.scores = u2.scores.clone();<br>    <span class="hljs-keyword">return</span> u2;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><p>操作对象</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Objects%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;girl&quot;</span>;<br><span class="hljs-comment">//System.out.println(s1.equals(s2));//报错NullPointerException</span><br>System.out.println(Objects.equals(s1, s2));<span class="hljs-comment">//更安全</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Objects.equals源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object a, Object b)</span> &#123;<br>    <span class="hljs-keyword">return</span> (a == b) || (a != <span class="hljs-literal">null</span> &amp;&amp; a.equals(b));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>包装类<strong>把基本类型的数据包装成对象</strong>。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E5%8C%85%E8%A3%85%E7%B1%BB.png"></p><p><strong>自动装箱</strong>：基本数据类型可以自动转换为包装类型。</p><p><strong>自动拆箱</strong>：包装类型可以自动转换为基本数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">12</span>);<span class="hljs-comment">//已过时</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">12</span>);<br>System.out.println(i1 + i2);<br><br><span class="hljs-comment">//自动装箱：自动把基本类型数据转换成对象</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><span class="hljs-comment">//自动拆箱：自动把包装类型的对象转换成对应的基本数字类型</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> i3;<br><br>ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">18</span>);<span class="hljs-comment">//自动装箱</span><br>list.add(<span class="hljs-number">19</span>);<span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//自动拆箱</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//1.基本类型数据转换成字符串</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">in1</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">23</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">st1</span> <span class="hljs-operator">=</span> Integer.toString(in1);<span class="hljs-comment">//&quot;23&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">st2</span> <span class="hljs-operator">=</span> in1.toString();<span class="hljs-comment">//&quot;23&quot;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">st3</span> <span class="hljs-operator">=</span> in1 + <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//&quot;23&quot;</span><br><br><span class="hljs-comment">//2.字符串类型数值转换成对应的基本类型</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;18&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.valueOf(str1);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;99.88&quot;</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> Double.valueOf(str2);<br></code></pre></td></tr></table></figure><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><p><code>StringBuilder</code>是<strong>可变字符串对象</strong>，相当于一个容器，它里面装的<strong>字符串可以改变</strong>，用来操作字符串。</p><p><code>StringBuilder</code>比<code>String</code>更适合做字符串的修改操作，效率更高。对于字符串相关的操作，如<strong>频繁的拼接、修改</strong>等，建议用<code>StringBuidler</code>效率更高。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/StringBuilder.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sb.append(<span class="hljs-string">&quot;srr&quot;</span>).append(<span class="hljs-string">&quot;666&quot;</span>).append(<span class="hljs-number">18</span>).append(<span class="hljs-literal">true</span>);<span class="hljs-comment">//支持链式编程，且append可以是任意类型</span><br>System.out.println(sb);<span class="hljs-comment">//srr66618true</span><br></code></pre></td></tr></table></figure><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p><code>StringBuffer</code>的用法与<code>StringBuilder</code>一模一样。</p><p><code> StringBuilder</code>是<strong>线程不安全</strong>的<code>StringBuffer</code>是<strong>线程安全</strong>的。</p><h4 id="StringJoiner（JDK8）"><a href="#StringJoiner（JDK8）" class="headerlink" title="StringJoiner（JDK8）"></a>StringJoiner（JDK8）</h4><p>JDK8开始才有，跟<code>StringBuilder</code>一样用来<strong>操作字符串</strong>的，也可以看成是一个容器，创建之后里面的<strong>内容可变</strong>。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/StringJoiner.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>sj.add(<span class="hljs-string">&quot;srr&quot;</span>).add(<span class="hljs-string">&quot;666&quot;</span>);<span class="hljs-comment">//srr,666</span><br><br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>sj1.add(<span class="hljs-string">&quot;srr&quot;</span>).add(<span class="hljs-string">&quot;666&quot;</span>);<span class="hljs-comment">//[srr,666]</span><br></code></pre></td></tr></table></figure><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Math%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><h4 id="System"><a href="#System" class="headerlink" title="System"></a>System</h4><p><code>System</code>代表程序所在的系统。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/System%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><p>注意：<code>exit</code>方法参数为0代表人为操作，非零代表异常值。</p><h4 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h4><p><code>Runtime</code>代表程序所在的运行环境。<code>Runtime</code>是一个单例类。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Runtime%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><p>注意：</p><p>1.<code>System</code>的<code>exit</code>方法就是调用<code>Runtime</code>的<code>exit</code>方法，两者是一样的。</p><p>2.<code>totalMemory</code>和<code>freeMemory</code>返回的单位<code>Byte</code>，<code>/1024</code>得到单位<code>KB</code>，<code>/1024/1024</code>得到单位<code>MB</code>。</p><p>3.使用<code>exec</code>方法启动程序需要<code>throws IOException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> rt.exec(<span class="hljs-string">&quot;D:\\software\\ToDesk\\ToDesk.exe&quot;</span>);<span class="hljs-comment">//需要throws IOException</span><br>Thread.sleep(<span class="hljs-number">5000</span>);<span class="hljs-comment">//需要throws InterruptedException</span><br>p.destroy();<span class="hljs-comment">//销毁该程序</span><br></code></pre></td></tr></table></figure><h4 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h4><p><code>BigDecimal</code>用于解决浮点型运算时，出现<strong>结果失真</strong>的问题。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E6%B5%AE%E7%82%B9%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C%E5%A4%B1%E7%9C%9F.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/BigDecimal%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E5%92%8C%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><p>注意：</p><p>1.使用<code>BigDecimal(double val)</code>会出现精度问题，使用<code>BigDecimal(String val)</code>来进行构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//两种方法构造BigDecimal类，效果一样</span><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.1</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(Double.toString(<span class="hljs-number">0.2</span>));<br><span class="hljs-comment">//不要使用new BigDecimal(0.2)来构造，会出现精度错误</span><br><br>System.out.println(b1.add(b2));<br><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.3</span>);<br><span class="hljs-comment">//System.out.println(b1.divide(b3));//报错，java.lang.ArithmeticException: Non-terminating decimal expansion，无法确定精度</span><br>System.out.println(b1.divide(b3, <span class="hljs-number">3</span>, BigDecimal.ROUND_HALF_UP));<br><span class="hljs-comment">//保留3位小数，BigDecimal.ROUND_HALF_UP表示四舍五入</span><br></code></pre></td></tr></table></figure><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p><code>Date</code>代表日期和时间。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Date%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E5%92%8C%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Date对象代表系统当前时间信息</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d1.getTime();<br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<span class="hljs-comment">//时间毫秒值</span><br><br><span class="hljs-type">Date</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>d3.setTime(time);<br><br>System.out.println(d1.toString() + <span class="hljs-string">&quot;\n&quot;</span> + d2 + <span class="hljs-string">&quot;\n&quot;</span> + d3);<span class="hljs-comment">//三者一样：Sun Sep 22 14:57:55 CST 2024</span><br></code></pre></td></tr></table></figure><h4 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h4><p><code>SimpleDateFormat</code>代表简单<strong>日期格式化</strong>，可以用来把<strong>日期对象</strong>、<strong>时间毫秒值</strong>格式化成想要的形式。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/SimpleDateFormat%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E5%92%8C%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AC%A6%E5%8F%B7.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> d.getTime();<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span>);<span class="hljs-comment">//指定格式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> sdf.format(d);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> sdf.format(t);<br>System.out.println(s1 + <span class="hljs-string">&quot;\n&quot;</span> + s2);<span class="hljs-comment">//两者一样：2024年09月22日 15:01:38 周日 下午</span><br></code></pre></td></tr></table></figure><p><code>SimpleDateFormat</code>可以解析字符串时间成为日期对象。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/SimpleDateFormat%E8%A7%A3%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%B6%E9%97%B4%E6%88%90%E4%B8%BA%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//指定的时间格式必须与被解析的时间格式一模一样，否则报错java.text.ParseException:</span><br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2024-09-15 12:18:08&quot;</span>;<br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf1.parse(s3);<span class="hljs-comment">//必须throws ParseException</span><br>System.out.println(date);<br></code></pre></td></tr></table></figure><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p><code>Calendar</code>代表的是<strong>系统此刻时间对应的日历</strong>，通过它可以单独<strong>获取、修改时间</strong>中的年、月、日、时、分、秒等。</p><p>注意：<code>calendar</code>是<strong>可变对象</strong>，一旦<strong>修改后其对象本身表示的时间将产生变化</strong>。</p><p><code>Calendar</code>是抽象类，类方法<code>getInstance</code>获取该类的通用对象，返回一个<code>Calendar</code>对象。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Calendar%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<span class="hljs-comment">//系统此刻时间的日历对象</span><br>System.out.println(calendar);<span class="hljs-comment">//该日历对象的全部信息</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        java.util.GregorianCalendar[time=1726989854082,areFieldsSet=true,areAllFieldsSet=true,</span><br><span class="hljs-comment">        lenient=true,zone=sun.util.calendar.ZoneInfo[id=&quot;Asia/Shanghai&quot;,offset=28800000,</span><br><span class="hljs-comment">        dstSavings=0,useDaylight=false,transitions=31,lastRule=null],firstDayOfWeek=2,</span><br><span class="hljs-comment">        minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=4,</span><br><span class="hljs-comment">        DAY_OF_MONTH=22,DAY_OF_YEAR=266,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,</span><br><span class="hljs-comment">        HOUR_OF_DAY=15,MINUTE=24,SECOND=14,MILLISECOND=82,ZONE_OFFSET=28800000,DST_OFFSET=0]</span><br><span class="hljs-comment">        上面的关键字都是可以使用Calendar.关键字获取</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> calendar.get(Calendar.MONTH);<span class="hljs-comment">//月份从0开始算，九月为8</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> calendar.getTime();<span class="hljs-comment">//获取日期对象</span><br><span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> calendar.getTimeInMillis();<span class="hljs-comment">//获取时间毫秒值</span><br>calendar.set(Calendar.YEAR, <span class="hljs-number">2016</span>);<span class="hljs-comment">//修改日历信息</span><br></code></pre></td></tr></table></figure><h4 id="JDK8新增的时间API"><a href="#JDK8新增的时间API" class="headerlink" title="JDK8新增的时间API"></a>JDK8新增的时间API</h4><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/JDK8%E4%B9%8B%E5%89%8D%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%97%B6%E9%97%B4API%E4%B8%8EJDK8%E6%96%B0%E5%A2%9E%E7%9A%84%E6%97%B6%E9%97%B4API%E5%AF%B9%E6%AF%94.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/JDK8%E6%96%B0%E5%A2%9E%E7%9A%84%E6%97%B6%E9%97%B4API.png"></p><h4 id="LocalDate、LocalTime、LocalDateTime"><a href="#LocalDate、LocalTime、LocalDateTime" class="headerlink" title="LocalDate、LocalTime、LocalDateTime"></a>LocalDate、LocalTime、LocalDateTime</h4><p>LocalDate：代表本地日期(年、月、日、星期)</p><p>LocalTime：代表本地时间(时、分、秒、纳秒)</p><p>LocalDateTime：代表本地日期、时间(年、月、日、星期、时、分、秒、纳秒)</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/LocalDate%E3%80%81LocalTime%E5%92%8CLocalDateTime%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/LocalDate%E7%9A%84%E5%B8%B8%E7%94%A8API.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/LocalTime%E7%9A%84%E5%B8%B8%E7%94%A8API.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/LocalDateTime%E7%9A%84%E5%B8%B8%E7%94%A8API.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/LocalDate%E3%80%81LocalTime%E5%92%8CLocalDateTime%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//LocalDate、LocalTime和LocalDateTime互相转换</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> ldt.toLocalDate();<br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">lt</span> <span class="hljs-operator">=</span> ldt.toLocalTime();<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt1</span> <span class="hljs-operator">=</span> LocalDateTime.of(ld, lt);<br></code></pre></td></tr></table></figure><h4 id="ZoneID、ZonedDateTime"><a href="#ZoneID、ZonedDateTime" class="headerlink" title="ZoneID、ZonedDateTime"></a>ZoneID、ZonedDateTime</h4><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/ZoneId%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/ZonedDateTime%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">ZoneId</span> <span class="hljs-variable">zone</span> <span class="hljs-operator">=</span> ZoneId.systemDefault();<span class="hljs-comment">//系统默认时区</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zdt</span> <span class="hljs-operator">=</span> ZonedDateTime.now(zone);<span class="hljs-comment">//获取某个时区的ZonedDateTime对象</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zdt1</span> <span class="hljs-operator">=</span> ZonedDateTime.now(Clock.systemUTC());<span class="hljs-comment">//世界标准时间</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zdt2</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<span class="hljs-comment">//系统默认时区的ZonedDateTime对象</span><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar1</span> <span class="hljs-operator">=</span> Calendar.getInstance(TimeZone.getTimeZone(zone));<span class="hljs-comment">//某个时区对应Calendar对象</span><br></code></pre></td></tr></table></figure><h4 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h4><p>通过获取<code>Instant</code>的对象可以拿到此刻的时间，该时间由两部分组成：<strong>从1970-01-01 00:00:00 开始走到此刻的总秒数 + 不够1秒的纳秒数</strong>。</p><p>作用：可以用来记录代码的执行时间，或用于记录用户操作某个事件的时间点。</p><p>传统的<code>Date</code>类，只能精确到毫秒，并且是可变对象；新增的<code>Instant</code>类，可以精确到纳秒，并且是不可变对象，推荐用<code>Instant</code>代替<code>Date</code>。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Instant%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><h4 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h4><p><code>DateTimeFormatter</code>是格式化器，用于时间的格式化、解析。和<code>SimpleDateFormat</code>相比，<code>DateTimeFormatter</code>是线程安全的。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/DateTimeFormatter%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dtf</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt2</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dtf.format(ldt2);<span class="hljs-comment">//正向格式化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> ldt2.format(dtf);<span class="hljs-comment">//方向格式化</span><br><br><span class="hljs-comment">//解析时间：LocalDateTime.parse</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2024-09-08 12:08:22&quot;</span>;<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt3</span> <span class="hljs-operator">=</span> LocalDateTime.parse(string, dtf);<br></code></pre></td></tr></table></figure><h4 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h4><p>用于计算两个<code>LocalDate</code>对象相差的年数、月数、天。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Period%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2020</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2024</span>, <span class="hljs-number">9</span>, <span class="hljs-number">26</span>);<br><span class="hljs-type">Period</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Period.between(d1, d2);<br>System.out.println(p.getYears());<span class="hljs-comment">//3</span><br>System.out.println(p.getMonths());<span class="hljs-comment">//11</span><br>System.out.println(p.getDays());<span class="hljs-comment">//25</span><br><span class="hljs-comment">//总共差了3年11月25天</span><br></code></pre></td></tr></table></figure><h4 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h4><p>用于计算两个时间对象相差的天数、小时数、分数、秒数、纳秒数；支持<code>LocalTime</code>、<code>LocalDateTime</code>、<code>Instant</code>等时间。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Duration%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2024</span>, <span class="hljs-number">9</span>, <span class="hljs-number">25</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">22</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2024</span>, <span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">21</span>);<br><span class="hljs-type">Duration</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Duration.between(t1, t2);<br>System.out.println(d.toDays());<br><br>System.out.println(<span class="hljs-string">&quot;天：&quot;</span> + d.toDays());<span class="hljs-comment">//seconds / SECONDS_PER_DAY</span><br>System.out.println(<span class="hljs-string">&quot;时：&quot;</span> + d.toHours());<span class="hljs-comment">//seconds / SECONDS_PER_HOUR</span><br>System.out.println(<span class="hljs-string">&quot;分：&quot;</span> + d.toMinutes());<span class="hljs-comment">//seconds / SECONDS_PER_MINUTE</span><br>System.out.println(<span class="hljs-string">&quot;秒：&quot;</span> + d.toSeconds());<span class="hljs-comment">//seconds</span><br><span class="hljs-comment">//注意：天、小时、分、秒都是通过seconds（秒）进行换算的</span><br>System.out.println(<span class="hljs-string">&quot;毫秒：&quot;</span> + d.toMillis());<br>System.out.println(<span class="hljs-string">&quot;纳秒：&quot;</span> + d.toNanos());<br></code></pre></td></tr></table></figure><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><p>用来<strong>操作数组</strong>的一个工具类。</p><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/Arrays%E7%B1%BB%E7%9A%84%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">double</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;;<br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[10.0, 20.0, 30.0, 40.0, 50.0]</span><br><br><span class="hljs-type">double</span>[] arr1 = Arrays.copyOf(arr, <span class="hljs-number">3</span>);<br><span class="hljs-type">double</span>[] arr2 = Arrays.copyOfRange(arr, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br><br>Arrays.setAll(arr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">return</span> arr[value] * <span class="hljs-number">0.8</span>;<br>    &#125;<br>&#125;);<br>System.out.println(Arrays.toString(arr));<span class="hljs-comment">//[8.0, 16.0, 24.0, 32.0, 40.0]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//setAll方法的源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAll</span><span class="hljs-params">(<span class="hljs-type">double</span>[] array, IntToDoubleFunction generator)</span> &#123;<br>    Objects.requireNonNull(generator);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++)<br>        array[i] = generator.applyAsDouble(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Arrays</code>使用<code>sort</code>方法进行排序。使用Arrays对对象进行排序时，有两种方法：</p><p>1.让该对象的类实现<code>Comparable</code>（比较规则）接口，然后重写<code>compareTo</code>方法，自己来制定比较规则。</p><p>2.使用下面这个<code>sort</code>方法，创建<code>Comparator</code>比较器接口的匿名内部类对象，然后自己制定比较规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span> <span class="hljs-comment">//对数组进行排序(支持自定义排序规则）</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Student类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<span class="hljs-comment">//方法一：实现Comparable接口，重写compareTo方法</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.age &gt; o.age) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.age &lt; o.age) &#123;<span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//升序</span><br>        <span class="hljs-comment">//return this.age - o.age;//升序</span><br>        <span class="hljs-comment">//return o.age - this.age;//降序</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> height, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.height = height;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, height=&quot;</span> + height +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeight</span><span class="hljs-params">(<span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java">Student[] student = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">3</span>];<br>student[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr1&quot;</span>, <span class="hljs-number">168.2</span>, <span class="hljs-number">18</span>);<br>student[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr2&quot;</span>, <span class="hljs-number">163.2</span>, <span class="hljs-number">16</span>);<br>student[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;srr3&quot;</span>, <span class="hljs-number">160.2</span>, <span class="hljs-number">19</span>);<br><br>Arrays.sort(student);<span class="hljs-comment">//方法一：Student类内部实现Comparable接口，重写compareTo方法</span><br>System.out.println(Arrays.toString(student));<br><br>Arrays.sort(student, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<span class="hljs-comment">////方法二：创造Comparator比较器接口的匿名内部类对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-comment">//if(o1.getHeight() &gt; o2.getHeight()) &#123;return 1;&#125;</span><br>        <span class="hljs-comment">//else if(o1.getHeight() &lt; o2.getHeight()) &#123;return -1;&#125;</span><br>        <span class="hljs-comment">//return 0;//升序</span><br>        <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());<span class="hljs-comment">//升序</span><br>        <span class="hljs-comment">//return Double.compare(o2.getHeight(), o1.getHeight());//降序</span><br>    &#125;<br>&#125;);<br>System.out.println(Arrays.toString(student));<br></code></pre></td></tr></table></figure><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p><code>Lambda</code>表达式是JDK8开始新增的一种语法形式，用于简化匿名内部类的代码写法。</p><p>Lambda表达式只能简化<strong>函数式接口</strong>的<strong>匿名内部类</strong>。</p><p><strong>函数式接口</strong>：有且<strong>仅有一个抽象方法</strong>的接口。</p><p>注意：大部分函数式接口，上面都可能会有一个<code>@FunctionalInterface</code>的注解，有该注解的接口就必定是函数式接口。</p><p>Lambda表达式的省略写法(进一步简化Lambda表达式的写法)：</p><p>1.参数类型可以省略不写。</p><p>2.如果只有一个参数，参数类型可以省略，同时<code>()</code>也可以省略。</p><p>3.如果<code>Lambda</code>表达式中的方法体代码只有一行代码，可以省略大括号不写，同时要省略分号<code>;</code>。此时，如果这行代码是<code>return</code>语句，也必须去掉<code>return</code>不写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java">Arrays.sort(student, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<span class="hljs-comment">//原始写法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-comment">//if(o1.getHeight() &gt; o2.getHeight()) &#123;return 1;&#125;</span><br>        <span class="hljs-comment">//else if(o1.getHeight() &lt; o2.getHeight()) &#123;return -1;&#125;</span><br>        <span class="hljs-comment">//return 0;//升序</span><br>        <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight());<span class="hljs-comment">//升序</span><br>        <span class="hljs-comment">//return Double.compare(o2.getHeight(), o1.getHeight());//降序</span><br>    &#125;<br>&#125;);<br><br>Arrays.sort(student, (Student o1, Student o2) -&gt; &#123;<span class="hljs-comment">//Lambda表达式</span><br>    <span class="hljs-keyword">return</span> Double.compare(o2.getHeight(), o1.getHeight());<br>&#125;);<br><br>Arrays.sort(student, (o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()));<span class="hljs-comment">//简化的Lambda表达式</span><br></code></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用：进一步简化<code>Lambda</code>表达式，方法引用的标志性符号<code>::</code>。</p><h4 id="静态方法的引用"><a href="#静态方法的引用" class="headerlink" title="静态方法的引用"></a>静态方法的引用</h4><p>格式：<code>类名::静态方法</code>。</p><p>如果某个Lambda表达式里只是调用一个静态方法，并且前后参数的形式一致，就可以使用静态方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareByData</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareByAge</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareByAgeDesc</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<span class="hljs-comment">//降序</span><br>        <span class="hljs-keyword">return</span> o2.getAge() - o1.getAge();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java">Arrays.sort(student, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<span class="hljs-comment">//原始写法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();<span class="hljs-comment">//按照年龄升序排序</span><br>    &#125;<br>&#125;);<br><br>Arrays.sort(student, (o1, o2) -&gt; o1.getAge() - o2.getAge() );<span class="hljs-comment">//Lambda简化</span><br><br>Arrays.sort(student, (o1, o2) -&gt; CompareByData.compareByAge(o1, o2));<span class="hljs-comment">//调用CompareByData的静态方法</span><br><br>Arrays.sort(student, CompareByData::compareByAge );<span class="hljs-comment">//静态方法引用</span><br>System.out.println(Arrays.toString(student));<br></code></pre></td></tr></table></figure><h4 id="实例方法的引用"><a href="#实例方法的引用" class="headerlink" title="实例方法的引用"></a>实例方法的引用</h4><p>格式：<code>对象名::实例方法</code>。</p><p>如果某个Lambda表达式里只是调用一个实例方法，并且前后参数的形式一致，就可以使用实例方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//compareByAgeDesc是上述CompareByData类的实例方法</span><br><span class="hljs-type">CompareByData</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompareByData</span>();<br>Arrays.sort(student, (o1, o2) -&gt; compare.compareByAgeDesc(o1, o2));<span class="hljs-comment">//调用CompareByData的实例方法</span><br><br>Arrays.sort(student, compare::compareByAgeDesc);<span class="hljs-comment">//实例方法引用</span><br>System.out.println(Arrays.toString(student));<br></code></pre></td></tr></table></figure><h4 id="特定类型的方法引用"><a href="#特定类型的方法引用" class="headerlink" title="特定类型的方法引用"></a>特定类型的方法引用</h4><p>格式：<code>类型::方法</code>。</p><p>如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数是作为方法的主调，后面的所有参数都是作为该实例方法的入参的，则此时就可以使用特定类型的方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">String[] names = &#123;<span class="hljs-string">&quot;srr&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-string">&quot;Lin&quot;</span>, <span class="hljs-string">&quot;Su&quot;</span>, <span class="hljs-string">&quot;irina&quot;</span>, <span class="hljs-string">&quot;Anna&quot;</span>&#125;;<br>Arrays.sort(names, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<span class="hljs-comment">//常规方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.compareToIgnoreCase(o2);<span class="hljs-comment">//忽略首字母大小写进行排序</span><br>    &#125;<br>&#125;);<br><br>Arrays.sort(names, (o1, o2) -&gt; o1.compareToIgnoreCase(o2));<span class="hljs-comment">//调用String类的compareToIgnoreCase方法</span><br><br>Arrays.sort(names, String::compareToIgnoreCase);<span class="hljs-comment">//特点类型的方法引用</span><br>System.out.println(Arrays.toString(names));<br></code></pre></td></tr></table></figure><h4 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h4><p>格式：<code>类名::new</code>。</p><p>如果某个Lambda表达式里只是在创建对象，并且前后参数情况一致，就可以使用构造器引用。（开发中用的少，了解就行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">cc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCar</span>() &#123;<span class="hljs-comment">//原始写法</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price);<br>            &#125;<br>        &#125;;<br><span class="hljs-type">Car</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> cc1.create(<span class="hljs-string">&quot;奔驰&quot;</span>, <span class="hljs-number">50</span>);<span class="hljs-comment">//再通过CreateCar接口的create得到Car，很鸡肋的用法，直接Car c = new (&quot;奔驰&quot;, 50);就可以实现了</span><br>        <br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">cc2</span> <span class="hljs-operator">=</span> (name, price) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price);<span class="hljs-comment">//Lambda表达式</span><br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">cc3</span> <span class="hljs-operator">=</span> Car::<span class="hljs-keyword">new</span>;<span class="hljs-comment">//构造器引用</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CreateCar</span>&#123;<br>    Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>冒泡排序：每次从数组中找出最大值放在数组的后面去。</p><p>选择排序：每轮选择当前位置，开始找出后面的较小值与该位置交换</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>二分查找<code>Arrays.binarySearch</code></p><p>前提条件：数组中的数据必须是有序的</p><p>核心思想：每次排除一半的数据。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><code>String</code>提供了一个匹配正则表达式的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(String regex)</span><span class="hljs-comment">//判断字符串是否匹配正则表达式，匹配返回true，不匹配返回false。</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E5%88%99.png"></p><table><thead><tr><th><strong>符号</strong></th><th><strong>含义</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>?</td><td>0次或1次</td><td>\d?</td></tr><tr><td>*</td><td>0次或多次</td><td>\d*    (abc)*</td></tr><tr><td>+</td><td>1次或多次</td><td>\d+    (abc)+</td></tr><tr><td>{}</td><td>具体次数</td><td>a{7}     \d{7,19}</td></tr><tr><td>(?i)</td><td>忽略后面字符的大小写</td><td>(?i)abc</td></tr><tr><td>a((?i)b)c</td><td>只忽略b的大小写</td><td>a((?i)b)c</td></tr><tr><td>[]</td><td>里面的内容出现一次</td><td>[abc]</td></tr><tr><td>^</td><td>取反</td><td>[^abc]</td></tr><tr><td>&amp;&amp;</td><td>交集，不能写单个的&amp;</td><td>[a-z&amp;&amp;m-p]</td></tr><tr><td>.</td><td>任意字符</td><td>\n 回车符号不匹配</td></tr><tr><td>\</td><td>转义字符</td><td>\d</td></tr><tr><td>\d</td><td>0-9</td><td>\d+</td></tr><tr><td>\D</td><td>非0-9</td><td>\D+</td></tr><tr><td>\s</td><td>空白字符</td><td></td></tr><tr><td>\S</td><td>非空白字符</td><td>[^\s]</td></tr><tr><td>\w</td><td>单词字符</td><td>[a-zA-Z_0-9]</td></tr><tr><td>\W</td><td>非单词字符</td><td>[^\w]</td></tr><tr><td>()</td><td>分组</td><td>a(bc)+</td></tr><tr><td>|</td><td>写在方括号外面表示并集</td><td>ab|AB</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//正则表达式实例代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、字符类(只能匹配单个字符)</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>));    <span class="hljs-comment">// true [abc]只能匹配a、b、c</span><br>        System.out.println(<span class="hljs-string">&quot;e&quot;</span>.matches(<span class="hljs-string">&quot;[abcd]&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;d&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>));   <span class="hljs-comment">// true [^abc] 不能是abc</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>));  <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>.matches(<span class="hljs-string">&quot;[a-zA-Z]&quot;</span>)); <span class="hljs-comment">// true [a-zA-Z] 只能是a-z A-Z的字符</span><br>        System.out.println(<span class="hljs-string">&quot;2&quot;</span>.matches(<span class="hljs-string">&quot;[a-zA-Z]&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;k&quot;</span>.matches(<span class="hljs-string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="hljs-comment">// true ： a到z，除了b和c</span><br>        System.out.println(<span class="hljs-string">&quot;b&quot;</span>.matches(<span class="hljs-string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;ab&quot;</span>.matches(<span class="hljs-string">&quot;[a-zA-Z0-9]&quot;</span>)); <span class="hljs-comment">// false 注意：以上带 [内容] 的规则都只能用于匹配单个字符</span><br><br>        <span class="hljs-comment">// 2、预定义字符(只能匹配单个字符)  .  \d  \D   \s  \S  \w  \W</span><br>        System.out.println(<span class="hljs-string">&quot;徐&quot;</span>.matches(<span class="hljs-string">&quot;.&quot;</span>)); <span class="hljs-comment">// .可以匹配任意字符</span><br>        System.out.println(<span class="hljs-string">&quot;徐徐&quot;</span>.matches(<span class="hljs-string">&quot;.&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// \转义</span><br>        System.out.println(<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>        <span class="hljs-comment">// \n \t</span><br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">// true \d: 0-9</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>));  <span class="hljs-comment">//false</span><br><br>        System.out.println(<span class="hljs-string">&quot; &quot;</span>.matches(<span class="hljs-string">&quot;\\s&quot;</span>));   <span class="hljs-comment">// true \s: 代表一个空白字符</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\s&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\S&quot;</span>));  <span class="hljs-comment">// true \S: 代表一个非空白字符</span><br>        System.out.println(<span class="hljs-string">&quot; &quot;</span>.matches(<span class="hljs-string">&quot;\\S&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>));  <span class="hljs-comment">// true \w: [a-zA-Z_0-9]</span><br>        System.out.println(<span class="hljs-string">&quot;_&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;徐&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;徐&quot;</span>.matches(<span class="hljs-string">&quot;\\W&quot;</span>));  <span class="hljs-comment">// true [^\w]不能是a-zA-Z_0-9</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\W&quot;</span>));  <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;23232&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>)); <span class="hljs-comment">// false 注意：以上预定义字符都只能匹配单个字符。</span><br><br>        <span class="hljs-comment">// 3、数量词： ?   *   +   &#123;n&#125;   &#123;n, &#125;  &#123;n, m&#125;</span><br>        System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>));   <span class="hljs-comment">// true ? 代表0次或1次</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>));    <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;abc12&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>));   <span class="hljs-comment">// true * 代表0次或多次</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>));        <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;abc12张&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;abc12&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>));   <span class="hljs-comment">// true + 代表1次或多次</span><br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>));       <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abc12张&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        System.out.println(<span class="hljs-string">&quot;a3c&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3&#125;&quot;</span>));   <span class="hljs-comment">// true &#123;3&#125; 代表要正好是n次</span><br>        System.out.println(<span class="hljs-string">&quot;abcd&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3&#125;&quot;</span>));  <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abcd&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,&#125;&quot;</span>));     <span class="hljs-comment">// true &#123;3,&#125; 代表是&gt;=3次</span><br>        System.out.println(<span class="hljs-string">&quot;ab&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,&#125;&quot;</span>));     <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abcde徐&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,&#125;&quot;</span>));     <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;abc232d&quot;</span>.matches(<span class="hljs-string">&quot;\\w&#123;3,9&#125;&quot;</span>));     <span class="hljs-comment">// true &#123;3, 9&#125; 代表是  大于等于3次，小于等于9次</span><br><br>        <span class="hljs-comment">// 4、其他几个常用的符号：(?i)忽略大小写 、 或：| 、  分组：()</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;(?i)abc&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;ABC&quot;</span>.matches(<span class="hljs-string">&quot;(?i)abc&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;aBc&quot;</span>.matches(<span class="hljs-string">&quot;a((?i)b)c&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;ABc&quot;</span>.matches(<span class="hljs-string">&quot;a((?i)b)c&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 需求1：要求要么是3个小写字母，要么是3个数字。</span><br>        System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;ABC&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;123&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;A12&quot;</span>.matches(<span class="hljs-string">&quot;[a-z]&#123;3&#125;|\\d&#123;3&#125;&quot;</span>)); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 需求2：必须是”我爱“开头，中间可以是至少一个”编程“，最后至少是1个”666“</span><br>        System.out.println(<span class="hljs-string">&quot;我爱编程编程666666&quot;</span>.matches(<span class="hljs-string">&quot;我爱(编程)+(666)+&quot;</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;我爱编程编程66666&quot;</span>.matches(<span class="hljs-string">&quot;我爱(编程)+(666)+&quot;</span>)); <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例：使用正则表达式查找一段文本中的内容"><a href="#案例：使用正则表达式查找一段文本中的内容" class="headerlink" title="案例：使用正则表达式查找一段文本中的内容"></a>案例：使用正则表达式查找一段文本中的内容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        method1();<br>    &#125;<br>    <span class="hljs-comment">// 需求1：从以下内容中爬取出，手机，邮箱，座机、400电话等信息。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; 来黑马程序员学习Java，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        电话：1866668888，18699997777\n&quot;</span> +<br>                <span class="hljs-string">&quot;        或者联系邮箱：boniu@itcast.cn，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        座机电话：01036517895，010-98951256\n&quot;</span> +<br>                <span class="hljs-string">&quot;        邮箱：bozai@itcast.cn，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        邮箱：dlei0009@163.com，\n&quot;</span> +<br>                <span class="hljs-string">&quot;        热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;<br>        <span class="hljs-comment">// 1、定义爬取规则</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,7&#125;-?[1-9]\\d&#123;4,19&#125;)|(\\w&#123;2,&#125;@\\w&#123;2,20&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;)&quot;</span><br>                + <span class="hljs-string">&quot;|(400-?\\d&#123;3,7&#125;-?\\d&#123;3,7&#125;)&quot;</span>;<br>        <span class="hljs-comment">// 2、把正则表达式封装成一个Pattern对象</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br>        <span class="hljs-comment">// 3、通过pattern对象去获取查找内容的匹配器对象。</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(data);<br>        <span class="hljs-comment">// 4、定义一个循环开始爬取信息</span><br>        <span class="hljs-keyword">while</span> (matcher.find())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> matcher.group(); <span class="hljs-comment">// 获取到了找到的内容了。</span><br>            System.out.println(rs);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正则表达式用于搜索替换、分割内容，需要结合String提供的如下方法完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">replaceAll</span><span class="hljs-params">(String regex , String newStr)</span><span class="hljs-comment">//按照正则表达式匹配的内容进行替换</span><br><span class="hljs-keyword">public</span> String[] split(String regex)：<span class="hljs-comment">//按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、public String replaceAll(String regex , String newStr)：按照正则表达式匹配的内容进行替换</span><br>        <span class="hljs-comment">// 需求1：请把 古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴，中间的非中文字符替换成 “-”</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span>;<br>        System.out.println(s1.replaceAll(<span class="hljs-string">&quot;\\w+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>));<span class="hljs-comment">//古力娜扎-迪丽热巴-马尔扎哈-卡尔扎巴</span><br><br>        <span class="hljs-comment">// 需求2(拓展)：某语音系统，收到一个口吃的人说的“我我我喜欢编编编编编编编编编编编编程程程！”，需要优化成“我喜欢编程！”。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我我我喜欢编编编编编编编编编编编编程程程&quot;</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * (.)一组：.匹配任意字符的。</span><br><span class="hljs-comment">         * \\1 :为这个组声明一个组号：1号</span><br><span class="hljs-comment">         * +：声明必须是重复的字</span><br><span class="hljs-comment">         * $1可以去取到第1组代表的那个重复的字</span><br><span class="hljs-comment">         */</span><br>        System.out.println(s2.replaceAll(<span class="hljs-string">&quot;(.)\\1+&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>));<span class="hljs-comment">//我喜欢编程</span><br><br>        <span class="hljs-comment">// 2、public String[] split(String regex)：按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。</span><br>        <span class="hljs-comment">// 需求1：请把 古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴，中的人名获取出来。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span>;<br>        String[] names = s3.split(<span class="hljs-string">&quot;\\w+&quot;</span>);<br>        System.out.println(Arrays.toString(names));<span class="hljs-comment">//[古力娜扎, 迪丽热巴, 马尔扎哈, 卡尔扎巴]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//爬取用户的名字</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;欢迎张全蛋光临本系统！他删库并跑路，欢迎李二狗子光临本系统！&quot;</span> +<br>                <span class="hljs-string">&quot;欢迎马六子光临本系统！它浏览了很多好看的照片！欢迎夏洛光临本系统！他在六点钟购买了一台拖拉机！&quot;</span>;<br>        <span class="hljs-comment">// 1、定义爬取规则</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;欢迎(.+)光临&quot;</span>; <span class="hljs-comment">// .+是贪婪匹配&quot;</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">regex2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;欢迎(.+?)光临&quot;</span>;  <span class="hljs-comment">// .+?是非贪婪匹配</span><br>        <span class="hljs-comment">// 2、把正则表达式封装成一个Pattern对象</span><br>        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex2);<br>        <span class="hljs-comment">// 3、通过pattern对象去获取查找内容的匹配器对象。</span><br>        <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(data);<br>        <span class="hljs-comment">// 4、定义一个循环开始爬取信息</span><br>        <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>            System.out.println(matcher.group()); <span class="hljs-comment">// 获取到了找到的内容了。</span><br>            System.out.println(matcher.group(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 获取第一组内容（就是人的名字）</span><br>            <span class="hljs-comment">//group(0)指的整个串，group(1)指的是第一个括号里的东西，group(2)指的第二个括号里的东西。 以此类推</span><br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        欢迎张全蛋光临</span><br><span class="hljs-comment">        张全蛋</span><br><span class="hljs-comment">        欢迎李二狗子光临</span><br><span class="hljs-comment">        李二狗子</span><br><span class="hljs-comment">        欢迎马六子光临</span><br><span class="hljs-comment">        马六子</span><br><span class="hljs-comment">        欢迎夏洛光临</span><br><span class="hljs-comment">        夏洛</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><img src="/2024/09/22/Java%E5%B8%B8%E7%94%A8API/%E5%BC%82%E5%B8%B8%E7%9A%84%E4%BD%93%E7%B3%BB.png"></p><p><code>Error</code>：代表的系统级别错误（属于严重问题），也就是说系统一旦出现问题，sun公司会把这些问题封装成<code>Error</code>对象给出来，<code>Error</code>是给sun公司自己用的，不是给程序员用的，开发人员不用管它。</p><p><code>Exception</code>：异常，代表程序可能出现的问题，程序员通常会用<code>Exception</code>以及它的子类来封装程序出现的问题。</p><p><strong>运行时异常</strong>：<code>RuntimeException</code>及其子类，编译阶段不会出现错误提醒，运行时出现的异常（如：数组索引越界异常）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">Integer.valueOf(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">// 运行时异常：java.lang.NumberFormatException</span><br><span class="hljs-type">int</span> [] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>System.out.println(arr[<span class="hljs-number">3</span>]);<span class="hljs-comment">// 运行时异常：java.lang.ArrayIndexOutOfBoundsException</span><br></code></pre></td></tr></table></figure><p><strong>编译时异常</strong>：编译阶段就会出现错误提醒的。（如：日期解析异常）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2024-9-18 12:28:22&quot;</span>);<span class="hljs-comment">//编译时异常：未运行时就会报错</span><br></code></pre></td></tr></table></figure><p><strong>编译时异常的解决方法</strong>：</p><p>1.<strong>抛出异常（throws）</strong>：在方法上使用<code>throws</code>关键字，可以将方法内部出现的异常抛出去给调用者处理。使用<code>throws</code>把异常抛给<code>main</code>方法，<code>main</code>方法不是最终调用者，<code>main</code>方法会把异常抛给JVM进行处理，<code>JVM</code>无法处理异常就会显示出错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2024-9-18 12:28&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.<strong>捕获异常（try…catch）</strong>：直接捕获程序出现的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2024-9-18 12:28&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>    e.printStackTrace();<br>    <span class="hljs-comment">//throw new RuntimeException(e);</span><br>    <span class="hljs-comment">//上述两句都可以输出报错原因</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><h5 id="自定义运行时异常"><a href="#自定义运行时异常" class="headerlink" title="自定义运行时异常"></a>自定义运行时异常</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>.定义一个异常类继承<span class="hljs-built_in">RuntimeException</span>。<br><span class="hljs-number">2</span>.重写构造器。<br><span class="hljs-number">3</span>.通过<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> 异常类(xxx)来创建异常对象并抛出。<br></code></pre></td></tr></table></figure><p>自定义运行时异常编译阶段不报错，提醒不强烈，运行时才可能出现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//自定义运行时异常，该类必须继承自RuntimeException才能成为运行时异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeIllegalRuntimeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeIllegalRuntimeException</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeIllegalRuntimeException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            checkAge(<span class="hljs-number">188</span>);<br>            System.out.println(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;执行失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">150</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄合法&quot;</span> + age);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//用一个异常对象封装这个问题</span><br>            <span class="hljs-comment">//throw 抛出去这个异常对象</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeIllegalRuntimeException</span>(<span class="hljs-string">&quot;/age is illegal, your age is &quot;</span> + age);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*运行结果：</span><br><span class="hljs-comment">com.itheima.Exception_.AgeIllegalRuntimeException: /age is illegal, your age is 188</span><br><span class="hljs-comment">at com.itheima.Exception_.Test.checkAge(Test.java:33)</span><br><span class="hljs-comment">at com.itheima.Exception_.Test.main(Test.java:18)</span><br><span class="hljs-comment">执行失败</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="自定义编译时异常"><a href="#自定义编译时异常" class="headerlink" title="自定义编译时异常"></a>自定义编译时异常</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>.定义一个异常类继承<span class="hljs-built_in">Exception</span>。<br><span class="hljs-number">2</span>.重写构造器。<br><span class="hljs-number">3</span>.通过<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> 异常类(xxx)来创建异常对象并抛出。<br></code></pre></td></tr></table></figure><p><code>throw</code>抛出去异常对象。</p><p><code>throws</code>用在方法上，抛出方法内部的异常。</p><p>自定义编译时异常编译阶段就报错，提醒更加强烈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//自定义编译时异常，该类必须继承自Exception才能成为编译时异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeIllegalException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeIllegalException</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeIllegalException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            checkAge2(<span class="hljs-number">188</span>);<br>            System.out.println(<span class="hljs-string">&quot;执行成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (AgeIllegalException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;执行失败&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAge2</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> <span class="hljs-keyword">throws</span> AgeIllegalException&#123;<br>        <span class="hljs-comment">//需要throws抛出代码内部异常才不会报错，抛出的异常会抛给上层调用者</span><br>        <span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">150</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄合法&quot;</span> + age);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//用一个异常对象封装这个问题</span><br>            <span class="hljs-comment">//throw 抛出去这个异常对象</span><br>            <span class="hljs-comment">//throws 用在方法上，抛出方法内部的异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeIllegalException</span>(<span class="hljs-string">&quot;/age is illegal, your age is &quot;</span> + age);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*运行结果：</span><br><span class="hljs-comment">com.itheima.Exception_.AgeIllegalException: /age is illegal, your age is 188</span><br><span class="hljs-comment">at com.itheima.Exception_.Test.checkAge2(Test.java:54)</span><br><span class="hljs-comment">at com.itheima.Exception_.Test.main(Test.java:26)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>注意：异常使用<code>try…catch</code>进行处理后，还能继续往下进行。</p><h4 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h4><p>1.捕获异常，记录异常并响应合适的信息给用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test1();<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;解析的世界格式有问题&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//若test1()和test()均改为throws Exception，则可以改为如下形式：</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            test1();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;操作有误&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException, FileNotFoundException &#123;<br>        <span class="hljs-comment">//因为Exception是所有异常的父类，所以可以改为throws Exception即可</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2025-9-10 13:14:22&quot;</span>);<br>        System.out.println(d);<br>        test2();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<span class="hljs-comment">//或：throws Exception</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/image.png&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.捕获异常，尝试重新修复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                getMoney();<span class="hljs-comment">//如果遇到不合法输入则会抛出异常，catch捕获后会继续往下执行</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;输入价格有误&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入合法的价格：&quot;</span>);<br>            <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextDouble();<span class="hljs-comment">//可能会有不合法输入，如abc，则会抛出异常</span><br>            <span class="hljs-keyword">if</span>(money &gt;= <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> money;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;输入价格有误&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象</title>
    <link href="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>静态，可以修饰成员变量、成员方法。</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p><strong>成员变量</strong>按照有无static修饰，分为两种:</p><p><strong>类变量</strong>：有static修饰，属于类，在计算机里只有一份，被类的全部对象共享。</p><p>访问方式：类名.类变量 (推荐)，对象.类变量(不推荐)。</p><p><strong>实例变量</strong>（对象的变量）：无static修饰，属于每个对象的。</p><p>访问方式：对象.实例变量。</p><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F.png"></p><h5 id="成员变量的执行原理"><a href="#成员变量的执行原理" class="headerlink" title="成员变量的执行原理"></a>成员变量的执行原理</h5><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.png"></p><h5 id="类变量的应用场景"><a href="#类变量的应用场景" class="headerlink" title="类变量的应用场景"></a>类变量的应用场景</h5><p>如果某个数据<strong>只需要一份</strong>，且希望能够被<strong>共享</strong>(访问、修改），则将该数据定义成类变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//类变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        count++;<span class="hljs-comment">//每new一个User对象，用户类可以记住自己创建了多少个用户对象。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><br>        System.out.println(User.count);<span class="hljs-comment">//2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p><strong>类方法</strong>（静态方法）：有static修饰的成员方法，属于类。<strong>类方法只能访问类变量</strong>，不能访问实例变量。</p><p>访问方式：类名.类方法 (推荐)，对象名.类方法(不推荐)</p><p><strong>实例方法</strong>（对象的方法）：无static修饰的成员方法，属于对象。</p><p>访问方式：对象.实例方法</p><h5 id="成员方法的执行原理"><a href="#成员方法的执行原理" class="headerlink" title="成员方法的执行原理"></a>成员方法的执行原理</h5><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.png"></p><p>注意：</p><p><strong>main方法</strong>是类方法。调用<code>java Test</code>执行程序时，实际执行的是<code>Test.main()</code>，所以main方法能直接跑起来。</p><h5 id="类方法的应用场景：设计工具类"><a href="#类方法的应用场景：设计工具类" class="headerlink" title="类方法的应用场景：设计工具类"></a>类方法的应用场景：设计工具类</h5><p><strong>工具类优点：</strong></p><p>工具类中的方法都是类方法，每个类方法都是用来完成一个功能的，提高代码的复用性。</p><p>实例方法需要创建对象来调用，此时对象只是为了调用方法，对象占内存，这样会浪费内存。使用类方法，直接用类名调用即可，调用方便，节省内存。</p><p>注意：工具类不需要创建对象， 建议将<strong>工具类的构造器私有化</strong>。</p><p>注意：</p><p>1.类方法中可以直接访问类的成员，不可以直接访问实例成员。</p><p>2.实例方法中既可以直接访问类成员，也可以直接访问实例成员。</p><p>3.实例方法中可以出现this关键字，类方法中不可以出现this关键字的。</p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>代码块是类的5大成分之一（成员变量、构造器、方法、代码块、内部类）。</p><p><strong>静态代码块</strong>：</p><p>格式：static { }</p><p>特点：<strong>类加载时自动执行</strong>，由于类只会加载一次，所以<strong>静态代码块只会执行一次</strong>。</p><p>作用：完成类的初始化，例如：<strong>对类变量的初始化赋值</strong>。</p><p><strong>实例代码块</strong>：</p><p>格式：{ }</p><p>特点：<strong>每次创建对象时执行实例代码块</strong>，并<strong>在构造器前执行</strong>。</p><p>作用：和构造器一样，都是用来完成对象的初始化的，例如：<strong>对实例变量进行初始化赋值</strong>。</p><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>设计模式就是<strong>具体问题的最优解决方案</strong>。</p><h5 id="单例设计模式：确保一个类只有一个对象。"><a href="#单例设计模式：确保一个类只有一个对象。" class="headerlink" title="单例设计模式：确保一个类只有一个对象。"></a>单例设计模式：确保一个类只有一个对象。</h5><p>分类：</p><h5 id="饿汉式单例：拿对象时，对象早就创建好了。"><a href="#饿汉式单例：拿对象时，对象早就创建好了。" class="headerlink" title="饿汉式单例：拿对象时，对象早就创建好了。"></a>饿汉式单例：拿对象时，对象早就创建好了。</h5><p>写法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.把类的构造器私有。<br>2.定义一个类变量记住类的一个对象。<br>3.定义一个类方法，返回对象。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//单例类（饿汉式单例）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><br>    <span class="hljs-comment">//2.定义一个类变量记住类的一个对象。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><br>    <span class="hljs-comment">//1.私有类的构造器。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//3.定义一个类方法返回对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> A <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//使用枚举enum创建单例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span>&#123;<br>X;<span class="hljs-comment">//单例</span><br>&#125;<br></code></pre></td></tr></table></figure><p>应用场景：<strong>任务管理器对象</strong>、<strong>获取运行时对象</strong>。可以避免浪费内存。</p><h5 id="懒汉式单例：拿对象时，才开始创建对象。（延迟加载对象）"><a href="#懒汉式单例：拿对象时，才开始创建对象。（延迟加载对象）" class="headerlink" title="懒汉式单例：拿对象时，才开始创建对象。（延迟加载对象）"></a>懒汉式单例：拿对象时，才开始创建对象。（延迟加载对象）</h5><p>写法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.把类的构造器私有。<br>2.定义一个类变量用于存储对象。<br>3.提供一个类方法，保证返回的是同一个对象。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//单例类（懒汉式单例）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-comment">//2.定义一个类变量用于存储对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> B b;<br><br>    <span class="hljs-comment">//1.把类的构造器私有。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//3.提供一个类方法，保证返回的是同一个对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> B <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-literal">null</span>)&#123;<br>            b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="继承extends"><a href="#继承extends" class="headerlink" title="继承extends"></a>继承extends</h3><p>继承就是用extends关键字，让一个类和另一个类建立起一种父子关系。</p><p>子类能继承父类的<strong>非私有成员</strong>（成员变量、成员方法）。</p><p>子类的对象是由子类、父类共同完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="继承的执行原理"><a href="#继承的执行原理" class="headerlink" title="继承的执行原理"></a>继承的执行原理</h4><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%BB%A7%E6%89%BF%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.png"></p><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><p>权限修饰符：限制类中的成员（成员变量、成员方法、构造器、代码块…）能够被访问的范围。</p><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p><h4 id="单继承、Object类"><a href="#单继承、Object类" class="headerlink" title="单继承、Object类"></a>单继承、Object类</h4><p>Java是单继承的：一个类只能继承一个直接父类；Java中的类不支持多继承，但是支持多层继承。</p><p>Object类是Java中所有类的祖宗。</p><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>子类重写一个<strong>方法名称、参数列表一样</strong>的方法，去<strong>覆盖父类</strong>的这个方法，这就是<strong>方法重写</strong>。</p><p>重写后方法的访问，Java会遵循<strong>就近原则</strong> 。</p><p>注意事项</p><p>1.使用<code>@Override</code>注解可以指定java编译器，检查方法重写的格式是否正确。</p><p>2.子类重写父类方法时，<strong>访问权限必须大于或者等于父类该方法的权限</strong>（ public &gt; protected &gt; 缺省 ）。</p><p>3.重写的方法返回值类型，必须与被重写方法的<strong>返回值类型一样，或者范围更小</strong>。</p><p>4.<strong>私有方法、静态方法不能被重写</strong>，如果重写会报错的。</p><p>5.子类重写<code>Object</code>类的<code>toString()</code>方法，以便返回对象的内容。</p><h4 id="子类访问其他成员（成员变量、成员方法）依照就近原则"><a href="#子类访问其他成员（成员变量、成员方法）依照就近原则" class="headerlink" title="子类访问其他成员（成员变量、成员方法）依照就近原则"></a>子类访问其他成员（成员变量、成员方法）依照就近原则</h4><p>1.先子类局部范围找。</p><p>2.然后子类成员范围找。</p><p>3.然后父类成员范围找，如果父类范围还没有找到则报错。</p><p>注意：</p><p>如果子父类中，出现了重名的成员，会优先使用子类的。可以通过<code>super</code>关键字，指定访问父类的成员：<code>super.父类成员变量/父类成员方法</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;父类name&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的print方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;子类name&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showName</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(name);<span class="hljs-comment">//局部变量</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);<span class="hljs-comment">//子类成员变量</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name);<span class="hljs-comment">//父类成员变量</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类的print方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMethod</span><span class="hljs-params">()</span>&#123;<br>        print();<span class="hljs-comment">//子类成员方法</span><br>        <span class="hljs-built_in">super</span>.print();<span class="hljs-comment">//父类成员方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        b.showName(<span class="hljs-string">&quot;外部&quot;</span>);<br>        b.showMethod();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果：</span><br><span class="hljs-comment">//外部</span><br><span class="hljs-comment">//子类name</span><br><span class="hljs-comment">//父类name</span><br><span class="hljs-comment">//子类的print方法</span><br><span class="hljs-comment">//父类的print方法</span><br></code></pre></td></tr></table></figure><h4 id="子类构造器"><a href="#子类构造器" class="headerlink" title="子类构造器"></a>子类构造器</h4><p>子类的全部构造器，都会<strong>先调用父类的构造器</strong>，再执行自己。</p><p>注意：</p><p>1.默认情况下，子类全部构造器的第一行代码都是<code>super()</code>（写不写都有） ，它先会调用父类的无参数构造器。</p><p>2.如果父类没有无参数构造器，则必须在子类构造器的第一行手写super(….)，指定去调用父类的有参数构造器。</p><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%AD%90%E7%B1%BB%E6%9E%84%E9%80%A0%E5%99%A8%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E6%9E%84%E9%80%A0%E5%99%A8.png"></p><h4 id="this-调用兄弟构造器"><a href="#this-调用兄弟构造器" class="headerlink" title="this()调用兄弟构造器"></a>this()调用兄弟构造器</h4><p>任意类的构造器中，是可以通过<code>this(…) </code>去调用<strong>该类的其他构造器</strong>的。</p><p>注意：</p><p>this(…) 、super(…) 都只能放在<strong>构造器的第一行</strong>，因此，<strong>有了this(…)就不能写super(…)了</strong>，反之亦然。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String gender;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;no one&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;no gender&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<span class="hljs-comment">//只传入两个参数，可以使用this去调用该类的其他构造器</span><br>        <span class="hljs-built_in">this</span>(name,age,<span class="hljs-string">&quot;女&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot;, 年龄：&quot;</span>+age+<span class="hljs-string">&quot;, 性别：&quot;</span>+gender;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态是在<strong>继承&#x2F;实现</strong>情况下的一种现象，表现为：<strong>对象多态</strong>、<strong>行为多态</strong>。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>有<strong>继承&#x2F;实现</strong>关系；存在<strong>父类引用子类</strong>对象；存在<strong>方法重写</strong>。</p><p>注意：</p><p>多态是对象、行为的多态，Java中的属性<strong>（成员变量）没有多态</strong>。</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>1.在多态形式下，右边对象是解耦合的，即<strong>右边对象可以随时切换</strong>。</p><p>2.定义方法时，使用<strong>父类类型的形参，可以接收一切子类对象</strong>。</p><p>注意：</p><p>多态下<strong>不能使用子类的独有功能</strong>。</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p><strong>自动类型转换</strong>：父类 变量名 &#x3D; new 子类(); <code>People p1 = new Student();</code></p><p><strong>强制类型转换</strong>：子类 变量名 &#x3D; (子类) 父类变量; <code>Student s1 = (Student) p1;</code></p><p>注意：</p><p>1.存在<strong>继承&#x2F;实现</strong>关系就可以在<strong>编译阶段进行强制类型转换</strong>，编译阶段不会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">People</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <span class="hljs-comment">//自动类型转换</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) p1;<span class="hljs-comment">//强制类型转换</span><br></code></pre></td></tr></table></figure><p>2.运行时，如果发现<strong>对象的真实类型与强转后的类型不同</strong>，就会报<strong>类型转换异常（ClassCastException）</strong>的错误出来。</p><p>3.强制类型转换之前，使用<code>instanceof</code>关键字，<strong>判断当前对象的真实类型</strong>，再进行强转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//父类People</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;People&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人跑步&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//子类Student</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Student&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生跑步&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生考试&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//子类Teacher</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Teacher&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;老师跑步&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;老师上课&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//测试</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.在多态形式下，右边对象是解耦合的，即右边对象可以随时切换。</span><br>        <span class="hljs-type">People</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <span class="hljs-comment">//自动类型转换</span><br>        p1.run();<span class="hljs-comment">//运行结果：学生跑步</span><br>        <span class="hljs-comment">// 编译看左边，运行看右边：编译时看左边p1是People类，People类有run方法可以编译通过，运行时执行右边Student类的run方法</span><br><br>        System.out.println(p1.name);<span class="hljs-comment">//运行结果：People</span><br>        <span class="hljs-comment">// 对于成员变量，编译看左边，运行看左边：编译时看左边p1是People类，运行时使用左边People类的成员变量</span><br><br>        <span class="hljs-comment">//p1.test(); //会报错，多态下无法直接调用子类的独有功能。</span><br><br>        <span class="hljs-comment">//Student s1 = p1;//会报错，需要强制类型转换</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) p1;<span class="hljs-comment">//强制类型转换</span><br>        s1.run();<span class="hljs-comment">//运行结果：学生跑步</span><br><br>        <span class="hljs-comment">//Teacher t1 = (Teacher) p1;//运行时出现错误：java.lang.ClassCastException</span><br><br>        <span class="hljs-type">People</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        p2.run();<br>        System.out.println(p2.name);<br><br>        <span class="hljs-comment">//2.定义方法时，使用父类类型的形参，可以接收一切子类对象。</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        go(s);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        go(t);<br>    &#125;<br>    <span class="hljs-comment">//2.定义方法时，使用父类类型的形参，可以接收一切子类对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(People p)</span>&#123;<br>        p.run();<br>        <span class="hljs-keyword">if</span>(p <span class="hljs-keyword">instanceof</span> Student)&#123;<br>            <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Student) p;<br>            s.test();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p <span class="hljs-keyword">instanceof</span> Teacher)&#123;<br>            <span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> (Teacher) p;<br>            t.teach();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p><code>final</code>关键字是最终的意思，可以修饰（类、方法、变量）</p><p>1.修饰类：该类被称为最终类，特点是<strong>不能被继承</strong>。</p><p>2.修饰方法：该方法被称为最终方法，特点是<strong>不能被重写</strong>。</p><p>3.修饰变量：该变量<strong>只能被赋值一次</strong>。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">final</span>修饰变量：<br>一、局部变量：<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> a; a = <span class="hljs-number">12</span>;<br>二、成员变量<br><span class="hljs-number">1.</span>静态成员变量：<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-literal">PI</span> = <span class="hljs-string">&quot;3.1415926&quot;</span>;<br><span class="hljs-comment">//常量：public static final修饰的成员变量</span><br><span class="hljs-number">2.</span>实例成员变量：<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> name = <span class="hljs-string">&quot;surourou&quot;</span>;<br><span class="hljs-comment">//这种用法没有意义</span><br></code></pre></td></tr></table></figure><p>注意：</p><p>1.final修饰<strong>基本类型</strong>的变量，变量存储的<strong>数据不能被改变</strong>。</p><p>2.final修饰<strong>引用类型</strong>的变量，变量存储的<strong>地址不能被改变</strong>，但<strong>地址所指向对象的内容可以改变</strong>。</p><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p><code>static final</code>修饰的<strong>成员变量</strong>就被称为常量。</p><h5 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h5><p>程序编译后，常量会被<strong>宏替换</strong>：出现常量的地方全部会被替换成其记住的字面量，这样可以保证使用常量<strong>和直接用字面量的性能一样</strong>。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><code>abstract</code>修饰类，这个类就是<strong>抽象类</strong>。</p><p><code>abstract</code>修饰方法，这个方法就是<strong>抽象方法</strong>。抽象方法只有方法签名，不能有方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-comment">// 抽象方法：必须abstract修饰，只有方法签名，不能有方法体。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类。</p><p>2.类该有的成员（成员变量、方法、构造器）抽象类都可以有。</p><p>3.抽象类最主要的特点：抽象类<strong>不能创建对象</strong>，仅作为一种特殊的父类，让子类继承并实现。</p><p>4.一个类继承抽象类，必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。</p><h4 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h4><p>解决方法中<strong>存在重复代码</strong>的问题。</p><p>实现方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1、定义一个抽象类。<br>2、在里面定义2个方法：<br>模板方法：把相同代码放里面去。<br>抽象方法：具体实现交给子类完成。<br></code></pre></td></tr></table></figure><p>注意：</p><p>使用<code>final</code>关键字修饰模板方法。<strong>模板方法是给对象直接使用</strong>的，<strong>不能被子类重写</strong>。一旦子类重写了模板方法，模板方法就失效。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>关键字<code>interface</code>定义接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-comment">// 成员变量（常量）</span><br><span class="hljs-comment">// 成员方法（抽象方法）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.接口里面的成员变量是<strong>常量</strong>，成员方法是<strong>抽象方法</strong>，只有这两种东西。</p><p>2.接口内不能有构造器和代码块<code>static&#123;&#125;</code>，所以<strong>接口不能创造对象</strong>。接口是用来被类<strong>实现</strong><code>implements</code>的，实现接口的类称为<strong>实现类</strong>。</p><p>3.<strong>一个类可以实现多个接口</strong>（接口可以理解成干爹），实现类实现多个接口，必须重写完全部接口的全部抽象方法，否则实现类需要定义成抽象类。接口弥补了类单继承的不足。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//实现接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A1</span>, A2, A3&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//使用接口</span><br><span class="hljs-type">A1</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br></code></pre></td></tr></table></figure><h4 id="JDK8接口新增的三种方法"><a href="#JDK8接口新增的三种方法" class="headerlink" title="JDK8接口新增的三种方法"></a>JDK8接口新增的三种方法</h4><p>1.默认方法（实例方法）：使用用<code>default</code>修饰，默认会被加上<code>public</code>修饰。只能使用<strong>接口的实现类对象</strong>调用。</p><p>2.私有方法：必须用<code>private</code>修饰(JDK 9开始才支持)。只能在<strong>接口内部</strong>调用。</p><p>3.类方法（静态方法）：使用<code>static</code>修饰，默认会被加上<code>public</code>修饰。只能用<strong>接口名</strong>来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">// 1、默认方法（实例方法）：使用用default修饰，默认会被加上public修饰</span><br>    <span class="hljs-comment">// 注意：只能使用接口的实现类对象调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-comment">//2、私有方法：必须用private修饰(JDK 9开始才支持)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;&#125;   <br>    <br>    <span class="hljs-comment">//3、类方法（静态方法）：使用static修饰，默认会被加上public修饰。</span><br>    <span class="hljs-comment">//注意：只能用接口名来调用。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口是多继承的"><a href="#接口是多继承的" class="headerlink" title="接口是多继承的"></a>接口是多继承的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>&#123;&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span>&#123;&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>,B,C&#123;&#125;<span class="hljs-comment">//接口是多继承</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">D</span>&#123;&#125;<span class="hljs-comment">//便于实现类去实现</span><br></code></pre></td></tr></table></figure><p>注意：<br>1.一个接口继承多个接口，如果多个接口中存在方法签名冲突，则此时不支持多继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">J</span>&#123;<br>    String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//interface K extends I,J&#123;&#125;//I和J的test方法存在冲突，不支持多继承。</span><br></code></pre></td></tr></table></figure><p>2.一个类实现多个接口，如果多个接口中存在方法签名冲突，则此时不支持多实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">I</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">J</span>&#123;<br>    String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;E<br><br><span class="hljs-comment">//class E implements I,J&#123;&#125;//I和J的test方法存在冲突，不支持多实现。</span><br><span class="hljs-comment">//两个test函数名和参数一致，但是返回值不一致，会导致冲突。</span><br><span class="hljs-comment">//若是一个是void test();一个是void test(String s);则两个参数不一致，可以重写，则可以支持多实现。</span><br></code></pre></td></tr></table></figure><p>3.一个类继承了父类，又同时实现了接口，父类中和接口中有<strong>同名的默认方法</strong>，实现类会<strong>优先用父类</strong>的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的run方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IT</span>&#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接口IT的run方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IT</span>&#123;&#125;<span class="hljs-comment">//调用Zi的run方法时，会优先使用父类Fu的run方法</span><br><span class="hljs-comment">//class Zi implements IT extends Fu &#123;&#125;//错误，只能先继承父类再继承接口</span><br></code></pre></td></tr></table></figure><p>4.一个类实现了多个接口，多个接口中存在<strong>同名的默认方法</strong>，可以不冲突，这个类<strong>重写该方法</strong>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IT1</span>&#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;IT1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IT2</span>&#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;IT2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">N</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IT1</span>, IT2&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//重写test方法则不会发生冲突</span><br>        System.out.println(<span class="hljs-string">&quot;class N&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>1.成员内部类：类中的普通成员。成员内部类可以定义成员变量、构造器和成员方法。JDK16开始可以定义静态成员。</p><p>2.和实例方法一样，成员内部类的实例方法中，<strong>可以直接访问外部类的实例成员、静态成员</strong>。</p><p>3.成员内部类可以在成员内部类的实例方法中，拿到当前外部类对象，格式是：<code>外部类名.this</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String name;<br><br>    <span class="hljs-comment">//成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String gender;<span class="hljs-comment">//JDK16之后才支持定义静态成员。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">66</span>;<br>            System.out.println(age);<span class="hljs-comment">//66</span><br>            System.out.println(<span class="hljs-built_in">this</span>.age);<span class="hljs-comment">//88</span><br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.age);<span class="hljs-comment">//99</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//创建对象的格式</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>inner.test();<span class="hljs-comment">//调用成员内部类的方法</span><br></code></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>静态内部类：有<code>static</code>修饰的内部类，属于外部类自己持有。</p><p>注意：静态内部类<strong>可以直接访问外部类的静态成员</strong>，<strong>不可以直接访问外部类的实例成员</strong>。（和静态方法类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Outer&quot;</span>;<br><br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String gender;<span class="hljs-comment">//JDK16之后才支持定义静态成员。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> a;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(name);<br>            <span class="hljs-comment">//System.out.println(age);//错误，静态内部类不可以访问外部类的实例成员</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//创建对象的格式</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br>inner.test();<span class="hljs-comment">//调用成员内部类的方法</span><br></code></pre></td></tr></table></figure><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>局部内部类是定义在在方法中、代码块中、构造器等执行体中。</p><p>鸡肋语法。</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>匿名内部类：一种特殊的局部内部类。匿名：指的是程序员不需要为这个类声明名字。</p><p><strong>特点</strong>：匿名内部类本质就是<strong>一个子类</strong>，并会<strong>立即创建出一个子类对象</strong>。</p><p><strong>作用</strong>：</p><p>1.用于更方便的<strong>创建一个子类对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//这个匿名内部类会编译成一个子类，然后立即创建出一个子类对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;猫在哭&quot;</span>);<br>            &#125;<br>        &#125;;<br>        animal.cry();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Java会编译出以下匿名内部类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test$1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    Test$<span class="hljs-number">1</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫在哭&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.作为一个<strong>参数</strong>传输给方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//匿名内部类作为一个参数传输给方法</span><br>        <span class="hljs-comment">//注意，这里new Swimming并不是new一个接口对象，而是一个匿名内部类</span><br>        go(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;狗在游泳&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(Swimming s)</span>&#123;<br>        s.swim();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Swimming</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举是一种<strong>特殊类</strong>。</p><p>枚举类中的第一行，只能写一些合法的标识符(名称)，多个名称用逗号隔开。这些名称本质是<strong>常量</strong>，每个常量都会记住枚举类的一个<strong>对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//枚举类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">//枚举类的第一行必须罗列一些名称，这些名称都是常量，每个常量是一个枚举对象</span><br>    X,Y,Z;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">A</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> A.X;<br>System.out.println(a1);<span class="hljs-comment">//X</span><br><br><span class="hljs-comment">//A a = new A();//报错，枚举类的构造器是私有的，不能对外创造对象</span><br><br>A[] as = A.values();<span class="hljs-comment">//拿到枚举类的所有对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; as.length; i++) &#123;<br>    System.out.println(as[i]);<span class="hljs-comment">//X Y Z</span><br>&#125;<br><br><span class="hljs-type">A</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> A.valueOf(<span class="hljs-string">&quot;Y&quot;</span>);<span class="hljs-comment">//</span><br>System.out.println(a2.name());<span class="hljs-comment">//枚举类对象的名称 &#x27;Y&#x27;</span><br>System.out.println(a2.ordinal());<span class="hljs-comment">//枚举类对象的索引 1</span><br></code></pre></td></tr></table></figure><p>下面是枚举类反编译的代码：</p><p><img src="/2024/09/20/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E7%9A%84%E7%89%B9%E7%82%B9.png"></p><h4 id="抽象枚举"><a href="#抽象枚举" class="headerlink" title="抽象枚举"></a>抽象枚举</h4><p>在枚举类中定义<strong>抽象方法</strong>就是抽象枚举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//抽象枚举</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-comment">//枚举类第一行枚举类抽象对象，而具有抽象方法无法new一个对象，所以需要重写</span><br>    X &#123;<span class="hljs-comment">//这里用X&#123;&#125;或者X()&#123;&#125;进行重写都可以</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br>    &#125;,Y(<span class="hljs-string">&quot;surourou&quot;</span>) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;你好&quot;</span>);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//在枚举类中定义抽象方法就是抽象枚举</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">private</span>  String name;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">B</span><span class="hljs-params">(String name)</span>&#123;<span class="hljs-built_in">this</span>.name=name;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">B</span> <span class="hljs-variable">by</span> <span class="hljs-operator">=</span> B.Y;<br>by.go();<span class="hljs-comment">//运行结果：surourou你好</span><br></code></pre></td></tr></table></figure><h4 id="枚举类实现单例"><a href="#枚举类实现单例" class="headerlink" title="枚举类实现单例"></a>枚举类实现单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">C</span> &#123;<br>X;<span class="hljs-comment">//单例即一个类只有一个对象。</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>枚举类用来表示一组信息，然后作为参数进行传输。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Constant</span> &#123;<br>    BOY, GIRL;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>check(Constant.BOY);<br>check(Constant.GIRL);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(Constant sex)</span>&#123;<br><span class="hljs-keyword">switch</span> (sex)&#123;<br><span class="hljs-keyword">case</span> Constant.BOY:<span class="hljs-comment">//或case BOY: 带不带Constant前缀都行</span><br>System.out.println(<span class="hljs-string">&quot;男孩&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Constant.GIRL:<br>System.out.println(<span class="hljs-string">&quot;女孩&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>定义类、接口、方法时，同时声明了一个或者多个类型变量（如：<code>&lt;E&gt;</code>） ，称为泛型类、泛型接口，泛型方法，统称为泛型。如：<code>ArrayList</code>是泛型类。</p><p>本质：把<strong>具体的数据类型作为参数</strong>传给类型变量。</p><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//自定义泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayList</span> &lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> Object[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(E e)</span>&#123;<br>        arr[size++] = e;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">return</span> (E) arr[index];<br>        <span class="hljs-comment">//return arr[index];//会报错，因为arr数组是Object类型，需要强转为E类型</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//使用自定义泛型类</span><br>MyArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;srr&quot;</span>);<br>list.add(<span class="hljs-string">&quot;girl&quot;</span>);<br>list.add(<span class="hljs-string">&quot;18&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br>System.out.println(s);<br></code></pre></td></tr></table></figure><p>其他类型的泛型类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass1</span>&lt;E, T&gt;&#123;&#125;<span class="hljs-comment">//可以放多个类型变量</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass2</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&gt;&#123;&#125;<span class="hljs-comment">//限制类型变量，要求E必须继承Animal类，或者为Animal类</span><br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//泛型接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span>&lt;T&gt; &#123;<br><span class="hljs-comment">//public interface Data&lt;T extends Animal&gt; //要求T是Animal类或其子类</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T t)</span>;<br>    ArrayList&lt;T&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//实现泛型接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span>&lt;Student&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Student student)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;surourou&quot;</span>);<br>    System.out.println(s1);<br><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<br>    System.out.println(st);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">test</span><span class="hljs-params">(T t)</span>&#123;<span class="hljs-comment">//泛型方法</span><br><span class="hljs-comment">//public static &lt;T extends Student&gt; T test(T t)//限定T是Student类或其子类</span><br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符?"></a>通配符?</h4><p>通配符<code>?</code>：在使用泛型时可以代表一切类型</p><p><code>? extends Car</code>代表上限，<code>?</code>只能是<code>Car</code>或者<code>Car</code>的子类。</p><p><code>? super Car</code>代表下限，<code>?</code>只能是<code>Car</code>或者<code>Car</code>的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(ArrayList&lt;? extends Student&gt; t)</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">(ArrayList&lt;?&gt; t)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h4><p>泛型是<strong>工作在编译阶段</strong>的，一旦程序编译成class文件<strong>，class文件中就不存在泛型</strong>了，这就是<strong>泛型擦除</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//源文件.java</span><br>ArrayList&lt;String&gt; a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>a.add(<span class="hljs-string">&quot;srr&quot;</span>);<br>a.add(<span class="hljs-string">&quot;girl&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> a.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//编译后的class文件</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//a是Object类型</span><br>a.add(<span class="hljs-string">&quot;srr&quot;</span>);<br>a.add(<span class="hljs-string">&quot;girl&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String)a.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//编译器强转成String类型</span><br><span class="hljs-comment">//编译时进行了泛型擦除，底层是基于Object类型操作的</span><br></code></pre></td></tr></table></figure><p>注意：泛型<strong>不支持基本数据类型</strong>，只能<strong>支持对象类型</strong>（引用数据类型）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//ArrayList&lt;int&gt; a1 = new ArrayList&lt;&gt;();//错误，泛型不支持基本类型</span><br><span class="hljs-comment">//ArrayList&lt;double&gt; a2 = new ArrayList&lt;&gt;();//错误，泛型不支持基本类型</span><br>ArrayList&lt;Integer&gt; a3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>a3.add(<span class="hljs-number">1</span>);<br>ArrayList&lt;Double&gt; a4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>a4.add(<span class="hljs-number">1.0</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2024/09/19/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/09/19/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a>Java快速入门</h3><p>视频链接：<a href="https://www.bilibili.com/video/BV1Cv411372m/">Java入门基础视频教程，java零基础自学就选黑马程序员Java入门教程（含Java项目和Java真题）_哔哩哔哩_bilibili</a></p><h4 id="JDK的选择安装和下载"><a href="#JDK的选择安装和下载" class="headerlink" title="JDK的选择安装和下载"></a>JDK的选择安装和下载</h4><p>LTS：long-term support 长期支持版</p><p>JDK-8 LTS（目前企业常用）</p><p>下载JDK：oracle.com官网</p><p>Java 17 Windows x64 installer</p><p>JDK是否安装成功：java.exe和javac.exe是否安装成功（命令行窗口cmd输入：java和javac）</p><p>验证版本：java -version和javac -version（版本为17）</p><p><code>javac.exe</code>：编译工具</p><p><code>java.exe</code>：执行工具（对编译后的程序进行执行）</p><h5 id="VSCode配置java运行环境"><a href="#VSCode配置java运行环境" class="headerlink" title="VSCode配置java运行环境"></a>VSCode配置java运行环境</h5><p>1.下载插件<code>Extension Pack for Java</code>（Microsoft官方）</p><p>2.<code>FIle</code>-&gt;<code>Preferences</code>-&gt;<code>Settings</code>（或者快捷键Ctrl+’,’），搜索<code>java home</code>，在<code>Startup</code>选项中点击<code>Edit in setting.json</code>，修改如下（这里填写的是安装的Java的路径）：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-string">&quot;java.jdt.ls.java.home&quot;</span>: <span class="hljs-string">&quot;D:<span class="hljs-subst">\\</span>Programs<span class="hljs-subst">\\</span>Java<span class="hljs-subst">\\</span>jdk-21&quot;</span>,<br></code></pre></td></tr></table></figure><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/VScode%E5%AE%89%E8%A3%85Java%E9%85%8D%E7%BD%AEsettings.png" alt="1660152660273"></p><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_39287724/article/details/115765445">VSCode下载安装和配置Java环境_java下载vscode-CSDN博客</a></p><p><a href="https://www.zhihu.com/question/278838022">如何在vscode中配置java运行环境？ - 知乎 (zhihu.com)</a></p><h4 id="Java：开发helloworld"><a href="#Java：开发helloworld" class="headerlink" title="Java：开发helloworld"></a>Java：开发helloworld</h4><p>HelloWorld.java（源代码）–&gt;（使用javac编译）HelloWorld.class（字节码文件）–&gt;（使用java运行）</p><p>运行命令：</p><p><code>javac HelloWorld.java</code></p><p><code>java HelloWorld</code></p><h4 id="Java程序的执行原理"><a href="#Java程序的执行原理" class="headerlink" title="Java程序的执行原理"></a>Java程序的执行原理</h4><p>编译成计算机底层能识别的机器语言</p><p>机器语言-&gt;汇编语言-&gt;高级语言</p><h4 id="JDK的组成和跨平台原理"><a href="#JDK的组成和跨平台原理" class="headerlink" title="JDK的组成和跨平台原理"></a>JDK的组成和跨平台原理</h4><p>JVM（Java Virtual Machine）：Java虚拟机，运行Java程序</p><p>核心类库：Java写好的程序，给程序员调用</p><p>JRE（Java Runtime Environment）：Java的运行环境，包括JVM和核心类库</p><p>JDK（Java Development Kit）：Java开发工具包，包括JRE和开发工具（java、javac、等）</p><p>Java的跨平台：</p><p>一次编译，处处可用（对不同电脑系统提供了不同虚拟机）</p><h4 id="IDEA开发Java程序"><a href="#IDEA开发Java程序" class="headerlink" title="IDEA开发Java程序"></a>IDEA开发Java程序</h4><p>1.创建工程new Project（空工程）</p><p>2.创建模块new Module</p><p>3.创建包new Package</p><p>4.创建类new class</p><p>编译后的class文件在工程路径下的out文件夹。</p><p><code>HelloWorld.java</code>文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h3><p>‘A’：65</p><p>‘a’：97</p><p>‘0’：48</p><p>二进制：0B或0b开头</p><p>八进制：0开头</p><p>十六进制：0X或0x开头</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>基本数据类型+引用数据类型</p><p>基本数据类型：4大类8种</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p><p>注意：</p><p>1.整型默认是int，加上l&#x2F;L为long，如888L</p><p>2.浮点型默认是double，加上f&#x2F;F为float，如3.14F</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><h5 id="自动类型转换（小-大）"><a href="#自动类型转换（小-大）" class="headerlink" title="自动类型转换（小-&gt;大）"></a>自动类型转换（小-&gt;大）</h5><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png"></p><h5 id="表达式的自动类型转换"><a href="#表达式的自动类型转换" class="headerlink" title="表达式的自动类型转换"></a>表达式的自动类型转换</h5><p>（最终结果由表达式中的<code>最高类型</code>决定）</p><p>表达式中，<code>byte</code>、<code>short</code>、<code>char</code>是直接转成<code>int</code>类型参与运算。（目的：防止加法超出表示范围，所以扩大字节为int）</p><p>注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">byte</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><span class="hljs-comment">// x = x + y; //这句话会编译错误，因为byte类型是转成int类型进行运算，无法赋值给byte类型，应改为：</span><br>x = (<span class="hljs-type">byte</span>)x+y;<br><span class="hljs-comment">//上述形式也可以相当于 x+=y;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png"></p><h5 id="强制类型转换（大-小，会报错）"><a href="#强制类型转换（大-小，会报错）" class="headerlink" title="强制类型转换（大-&gt;小，会报错）"></a>强制类型转换（大-&gt;小，会报错）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)a;<br></code></pre></td></tr></table></figure><p>强制类型转换只截取最低的字节。</p><p>浮点-&gt;整形：只保留整数部分，截断小数部分</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>逻辑运算符：&amp;（逻辑与）、|（逻辑或）、！（非）、^（异或：前后条件结果相同返回false，不同返回true）</p><p>&amp;&amp;（短路与）：结果与&amp;一样，左边为false，则右边不执行</p><p>||（短路或）：结果与|一样，左边为true，则右边不执行</p><p>&amp;和|左右边都要执行</p><p>注：一般用&amp;&amp;、||、！</p><h3 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h3><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><p>switch的表达式类型只能是byte、short、int、char，JDK5开始支持枚举，JDK7开始支持String，不支持double（精度问题，0.1+0.2&#x3D;0.3000004，无法和正确的0.3匹配）、float、long（long的范围太大了）</p><p>case的值<strong>不允许重复</strong>，且只能是<strong>字面量</strong>（具体的数、字母），不能是变量</p><p>case必须写break，不然会有<strong>穿透性</strong>（穿透性可以用于：多个值对应的case块的操作是相同的）</p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>for和while功能上完全一样</p><p>do-while：一定会执行一次（可用于抢票软件，先执行抢票再进行判断）</p><h3 id="数组（引用数据类型）"><a href="#数组（引用数据类型）" class="headerlink" title="数组（引用数据类型）"></a>数组（引用数据类型）</h3><h4 id="静态初始化数组"><a href="#静态初始化数组" class="headerlink" title="静态初始化数组"></a>静态初始化数组</h4><p>定义数组时同时确定具体元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//完整格式</span><br><span class="hljs-type">int</span>[] ages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><span class="hljs-type">double</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">99</span>, <span class="hljs-number">98.5</span>, <span class="hljs-number">98.888</span>&#125;;<br><br><span class="hljs-comment">//简化格式</span><br><span class="hljs-type">int</span>[] ages = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><span class="hljs-comment">//也可以写成</span><br><span class="hljs-type">int</span> ages[] = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><br><span class="hljs-comment">//数组长度：数组.length</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ; i &lt; ages.length; i++)&#123;<br>     System.out.print(ages[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态初始化数组"><a href="#动态初始化数组" class="headerlink" title="动态初始化数组"></a>动态初始化数组</h4><p>定义数组时不存入具体元素值，只确定数组存储的<strong>数据类型</strong>和<strong>数据长度</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] ages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">//默认值全为0，ages=[0,0,0]</span><br></code></pre></td></tr></table></figure><p>动态初始化数组元素默认值：</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E9%BB%98%E8%AE%A4%E5%80%BC.png"></p><h4 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h4><p>.java文件是编译成.class文件，然后将.class文件放到JVM虚拟机中运行的。</p><p>JVM虚拟机内存分配（Java内存分配）：方法区、堆、栈</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png"></p><p>数组在计算机中的执行原理：</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.png"></p><p>多个变量指向同一个数组：</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84.png"></p><p>如果某个数组变量存储的地址是null，那么该变量将不再指向任何数组对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = arr1;<br>System.out.println(arr2);<br><br>arr2 = <span class="hljs-literal">null</span>;<br>System.out.println(arr2);<span class="hljs-comment">//输出为null，但不可访问arr2[0]，这是空指针，无法访问</span><br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="方法的格式"><a href="#方法的格式" class="headerlink" title="方法的格式"></a>方法的格式</h4><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E6%96%B9%E6%B3%95%E7%9A%84%E6%A0%BC%E5%BC%8F.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//有参数，有返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span> <span class="hljs-params">( <span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b )</span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">//无参数，无返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span> <span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//有参数，无返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printN</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意问题：</p><p>1.方法在类中的位置放前放后无所谓，但是一个方法不能定义在另一个方法里面。</p><p>2.return之后不能写代码。（运用<code>return ;</code>在无返回值方法中，可以跳出并立即结束当前方法的执行。）</p><h4 id="方法在计算机中的执行原理"><a href="#方法在计算机中的执行原理" class="headerlink" title="方法在计算机中的执行原理"></a>方法在计算机中的执行原理</h4><p>方法被调用时，进入<strong>栈内存</strong>中运行。</p><h4 id="Java的参数传递机制（都是值传递）"><a href="#Java的参数传递机制（都是值传递）" class="headerlink" title="Java的参数传递机制（都是值传递）"></a>Java的参数传递机制（都是值传递）</h4><p><strong>值传递</strong>：传输实参变量中存储的值的<strong>副本</strong>。</p><p>基本类型的参数传递：值传递（存储的数据）</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.png"></p><p>引用类型的参数传递：值传递（存储的地址）</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.png"></p><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>方法重载：一个类中，多个方法名称相同，但是形参列表不同。</p><p>注意：</p><p>1.方法重载只要求：<strong>方法名称相同</strong>、<strong>形参列表不同</strong>。（修饰符，返回值类型是否一样无所谓）</p><p>2.<strong>形参列表不同</strong>：形参<strong>个数</strong>、<strong>类型</strong>、<strong>顺序</strong>不同，与形参名称无关。</p><h3 id="面向对象编程（OOP）"><a href="#面向对象编程（OOP）" class="headerlink" title="面向对象编程（OOP）"></a>面向对象编程（OOP）</h3><p>对象：特殊的数据结构。对象是用<strong>类</strong>new出来的。</p><p>class（类）：对象的设计图&#x2F;对象的模板。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//编写一个类作为对象</span><br><span class="hljs-keyword">package</span> com.itheima.hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//成员变量：类中定义的变量（对象的属性）</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//面向对象的方法不要加static</span><br>    <span class="hljs-comment">//成员方法：类中定义的方法（对象的行为）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//使用上述的对象</span><br><span class="hljs-keyword">package</span> com.itheima.hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.name = <span class="hljs-string">&quot;surourou&quot;</span>;<br>        s1.age = <span class="hljs-number">18</span>;<br>        s1.printName();<br>        s1.printAge();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象在计算机中的执行原理"><a href="#对象在计算机中的执行原理" class="headerlink" title="对象在计算机中的执行原理"></a>对象在计算机中的执行原理</h4><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.png"></p><p>注意：</p><p>1.<strong>成员变量</strong>：类中定义的变量（对象的属性）。</p><p><strong>成员方法</strong>：类中定义的方法（对象的行为）。</p><p>2.成员变量存在默认值（和数组一样）。</p><p>3.一个代码文件中，可以写多个class类，但只能有一个用public修饰。且public修饰的类名必须为代码文件名。</p><p>4.Java存在<strong>自动垃圾回收机制</strong>，会自动清楚垃圾对象。</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p><strong>this</strong>：一个变量，用在方法中，<strong>来拿到当前对象</strong>。</p><p>应用：解决变量名称冲突问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThis</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//打印当前对象的地址，不同对象的地址不一样</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法里的this是如何拿到调用它的对象的：传入了参数this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printThis</span><span class="hljs-params">(Student <span class="hljs-built_in">this</span>)</span>&#123;<br>System.out.println(<span class="hljs-built_in">this</span>);<span class="hljs-comment">//打印当前对象的地址，不同对象的地址不一样</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//无参数构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//有参数构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.类在设计时，如果不写构造器，Java会为类自动生成一个无参构造器。</p><p>2.若定义了有参数构造器，Java不会自动生成无参构造器。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>面向对象的三大特征：封装、继承、多态</p><p>封装：用类设计对象处理某一个事物的数据时，应该把<strong>要处理的数据</strong>，以及<strong>处理这些数据的方法</strong>，设计到<strong>一个对象中</strong>去。</p><p>封装的设计规范：合理隐藏，合理暴露</p><p>公开成员：public</p><p>隐藏成员：private</p><h4 id="实体类JavaBean"><a href="#实体类JavaBean" class="headerlink" title="实体类JavaBean"></a>实体类JavaBean</h4><p>实体类：</p><p>1.这个类中的成员变量都要私有，并且要对外提供相应的getXxx ，setXxx方法。</p><p>2.类中必须要有一个公共的无参的构造器。</p><p>实体操作类：具体的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.itheima.hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentOperator</span> &#123;<br>    <span class="hljs-keyword">private</span> Student student;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StudentOperator</span><span class="hljs-params">(Student student)</span> &#123;<br>        <span class="hljs-built_in">this</span>.student = student;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(student.name + <span class="hljs-string">&quot;,&quot;</span> + student.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="成本变量和局部变量"><a href="#成本变量和局部变量" class="headerlink" title="成本变量和局部变量"></a>成本变量和局部变量</h4><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB.png"></p><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><p>包：类似文件夹</p><p>注意：<br>1.同一个包下的类，互相可以直接调用。</p><p>2.调用其他包下的程序，必须在当前程序中导包。导包格式：import 包名.类名;</p><p>3.调用Java提供的程序需要先导包才可以使用；但是Java.lang包下的程序不需要导包的，可以直接使用。</p><p>4.要调用多个不同包下的程序，而这些程序名正好一样，此时默认只能导入一个程序，另一个程序必须带包名访问。</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><h5 id="String创建对象"><a href="#String创建对象" class="headerlink" title="String创建对象"></a>String创建对象</h5><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/String%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//1.直接创建</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;surourou&quot;</span>;<br><br><span class="hljs-comment">//2.调用String类的构造器</span><br><span class="hljs-comment">//(1)空白字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name0</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><span class="hljs-comment">//(2)字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;surourou&quot;</span>);<br><span class="hljs-comment">//(3)字符数组</span><br><span class="hljs-type">char</span>[] names = &#123;<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">name2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(names);<br><span class="hljs-comment">//(4)字节数组</span><br><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">115</span>, <span class="hljs-number">114</span>, <span class="hljs-number">114</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">name3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br><br>System.out.println(name+ <span class="hljs-string">&quot; &quot;</span> + name0 + <span class="hljs-string">&quot; &quot;</span> + name1  + <span class="hljs-string">&quot; &quot;</span> + name2 +<span class="hljs-string">&quot; &quot;</span>+ name3);<br></code></pre></td></tr></table></figure><h5 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h5><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/String%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p><p>注意：</p><p>1.String的对象是<strong>不可变字符串对象</strong>。</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/String%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1.png"></p><p>2.只要是以“…”方式写出的字符串对象，会在<strong>堆内存中的字符串常量池</strong>中存储，且相同内容的字符串只存储一份。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;srr&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;srr&quot;</span>;<br>System.out.println(s1 == s2);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E9%80%9A%E8%BF%87%E2%80%9C%E2%80%9D%E5%AE%9A%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E5%AD%98%E5%8E%9F%E7%90%86.png"></p><p>3.通过new方式创建字符串对象，每new一次都会产生一个新的对象放在堆内存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">char</span>[] names = &#123;<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(names);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(names);<br>System.out.println(s3 == s4);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/%E9%80%9A%E8%BF%87new%E6%9E%84%E9%80%A0%E5%99%A8%E5%BE%97%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1.png"></p><p>案例：</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/String%E4%BE%8B%E9%A2%981.png"></p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/String%E4%BE%8B%E9%A2%982.png"></p><h4 id="ArrayList（集合的一种）"><a href="#ArrayList（集合的一种）" class="headerlink" title="ArrayList（集合的一种）"></a>ArrayList（集合的一种）</h4><p>集合：容器，存储数据，大小可变。</p><p>ArrayList：一种集合，是泛型类，可以用来约束存储的数据类型。</p><p>注意：集合和泛型都不支持基本数据类型，只能支持引用数据类型。</p><p>如：<code>ArrayList&lt;int&gt;</code>是错误的，应该使用<code>ArrayList&lt;Integer&gt;</code>。</p><p><img src="/2024/09/19/Java%E5%9F%BA%E7%A1%80/ArrayList%E6%96%B9%E6%B3%95.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//1.不约束存储的数据类型</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-comment">//或者ArrayList&lt;Object&gt; list = new ArrayList&lt;&gt;();//推荐这样写</span><br>list.add(<span class="hljs-string">&quot;A&quot;</span>);<br>list.add(<span class="hljs-string">&quot;B&quot;</span>);<br>list.add(<span class="hljs-number">999</span>);<br>list.add(<span class="hljs-number">55.4</span>);<br>System.out.println(list);<br><br><span class="hljs-comment">//2.约束存储的数据类型</span><br><span class="hljs-comment">//ArrayList&lt;String&gt; list1 = new ArrayList&lt;String&gt;(); //法一</span><br>ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">//法二，jdk1.7之后支持，不用在后面的ArrayList中写&lt;String&gt;</span><br>list1.add(<span class="hljs-string">&quot;S&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;R&quot;</span>);<br>list1.add(<span class="hljs-string">&quot;R&quot;</span>);<br>System.out.println(list1);<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.从集合中遍历元素，并筛选出元素删除它，应该如何操作才能不出bug？</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">方式一：每次删除一个数据后，索引<span class="hljs-string">-1</span>。<br>方式二：从集合后面遍历然后删除，可以避免漏掉元素。<br></code></pre></td></tr></table></figure><p>2.集合容器中存储的是<strong>每个对象在堆内存中的地址</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo插入图片</title>
    <link href="/2024/09/18/Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <url>/2024/09/18/Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h3 id="Hexo插入图片"><a href="#Hexo插入图片" class="headerlink" title="Hexo插入图片"></a>Hexo插入图片</h3><p>修改Hexo博客目录中的<code> _config.yml</code>文件，设置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>该配置<strong>在生成文章的时候生成一个同名的资源目录用于存放图片文件</strong>。</p><p>创建一篇新文章：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo new post &quot;filename&quot;<br></code></pre></td></tr></table></figure><p>执行完成后在<code>source/_posts</code>目录下生成了一个<strong>md文件</strong>和一个<strong>同名的资源目录（用于存放图片）</strong>。</p><h4 id="1-官方推荐用法"><a href="#1-官方推荐用法" class="headerlink" title="1.官方推荐用法"></a>1.官方推荐用法</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> image.png 图片引用方法一 %&#125;</span><br></code></pre></td></tr></table></figure><p>注意，该方法在本地电脑无法显示，得deploy到GitHub上才能看到效果。但是使用该方法我会失败，生成的路径会变成：</p><p><code>/2024/09/16/GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/09/16/GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/my.jpg</code></p><p>正确的路径应该是：</p><p><code>/2024/09/16/GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/my.jpg</code></p><p>不知道什么原因多生成了一段，暂时还没解决这个问题。<strong>待定</strong>。</p><h4 id="2-markdown语法，图片存放的位置在source-posts-该文章的同名资源目录"><a href="#2-markdown语法，图片存放的位置在source-posts-该文章的同名资源目录" class="headerlink" title="2.markdown语法，图片存放的位置在source/_posts/该文章的同名资源目录"></a>2.markdown语法，图片存放的位置在<code>source/_posts/该文章的同名资源目录</code></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[图片引用方法二]</span>(<span class="hljs-selector-tag">image</span><span class="hljs-selector-class">.png</span>)<br></code></pre></td></tr></table></figure><p>一开始使用这个方法也是会出现图像路径错误的情况，生成的路径会变成：<code>/.com//my.jpg</code>，正确能显示图片的路径应该是<code>my.jpg</code>。后来我又重新安装了下面两个插件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br>npm install hexo-renderer-marked<br></code></pre></td></tr></table></figure><p>之后就莫名其妙的成功了，至于为什么成功我还是有点不理解，以后研究。</p><h4 id="3-markdown语法，图片存放的位置在source-images-image-png"><a href="#3-markdown语法，图片存放的位置在source-images-image-png" class="headerlink" title="3.markdown语法，图片存放的位置在source/images/image.png"></a>3.markdown语法，图片存放的位置在<code>source/images/image.png</code></h4><p>这种方法和前两种图片存放位置不一样，是将图片放在<code>/source/images</code>目录下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[图片引用方法三]</span>(/images/<span class="hljs-selector-tag">image</span><span class="hljs-selector-class">.png</span>)<br></code></pre></td></tr></table></figure><p>这个方法一定能成功，没有bug。</p><p>参考链接：</p><p>1.<a href="https://blog.asroads.com/post/95d84581.html">Hexo生成博文插入图片 | Asroads’Blog</a></p><p>这是要安装hexo-asset-image和改index.js，但是我没有成功。</p><p>2.<a href="https://andavid.github.io/2019/01/15/insert-local-image-in-hexo/">Hexo 中完美插入本地图片 | JK Notes (andavid.github.io)</a></p><p>这个也是修改hexo-asset-image中的index.js，我没试过。</p><p>3.<a href="https://cloud.tencent.com/developer/article/2446584">HEXO系列教程 | 发布文章 | 解决静态图片路径错误问题 | 小白向教程-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>这个也是修改hexo-asset-image中的index.js，我没有成功。</p><p>4.<a href="https://blog.csdn.net/weixin_43694227/article/details/135735519">使用hexo-asset-image在hexo博客中插入图片-CSDN博客</a></p><p>这个也是修改hexo-asset-image中的index.js，我没试过。</p><p>5.<a href="https://blog.fedfans.com/2023/03/28/hexo-markdown-render/">【hexo专栏】hexo如何进行文章渲染的 - 金炳的博客 (fedfans.com)</a></p><p>这个是关于<strong>hexo渲染文章</strong>的，写的很全面。这个人的专栏写了很多hexo，可以多看看。</p><p>6.<a href="https://blog.csdn.net/qq_43401552/article/details/104805466">【Hexo博客】Hexo+markdown之引用图片方法汇集_markdown 图片引用-CSDN博客</a></p><p>这个还新增了使用<code>base64</code>来存储图片的方法，可以参考一下。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搭建博客</title>
    <link href="/2024/09/16/GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/09/16/GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="GitHub搭建博客"><a href="#GitHub搭建博客" class="headerlink" title="GitHub搭建博客"></a>GitHub搭建博客</h3><p>参考链接：</p><p>1.<a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程_hexo博客-CSDN博客</a></p><p>我的博客surourou8.github.io完全是根据这个来设置的。</p><p>hexo官网：<a href="https://hexo.io/zh-cn/">Hexo</a></p><p>注意事项：</p><p>（1）新建仓库new repository时，填写仓库名格式必须为<code>&lt;用户名&gt;.github.io</code>，比如我的就是<code>surourou8.github.io</code>。访问时可以通过链接<code>https://surourou8.github.io</code>来访问</p><p>如果设置其他名字，如<code>surourou.github.io</code>，则需要到<code>https://surourou8.github.io/surourou.github.io</code>下才能访问。</p><p>（2）选择<code>Settings</code>-&gt;<code>Pages</code>，将<code>Source</code>设置为<code>Deploy from a branch</code>,<code>Branch</code>设置为<code>main</code>，文件夹选择<code>/(root)</code>。</p><p>设置完之后，稍等片刻就就会显示<code>Your site is live at https://surourou8.github.io/</code>。</p><p>（3）使用<code>Leancloud</code>实现<strong>单篇文章阅读量计数</strong>和<strong>页面底部展示网站的 PV、UV 统计数</strong>这两个功能时，按照教程配置后无法实现这两个功能。</p><p>查阅评论区之后，评论说：“leancloud分<a href="https://www.leancloud.cn/">国内版</a>和<a href="https://www.leancloud.app/">国际版</a>，国内需要备案稳定才支持访问统计功能。国际版无需备案。”但是我换成国际版之后也无法实现该功能。关于这部分解释：<a href="https://blog.msxcn.top/posts/1130/">配置LeanCloud的网站统计 | David-123’s Blog (msxcn.top)</a></p><p><strong>解决办法：</strong>在对应教程的 <a href="https://blog.csdn.net/yaorongke/article/details/119089190#:~:text=%E4%BF%AE%E6%94%B9%E5%A6%82%E4%B8%8B%E9%85%8D%E7%BD%AE-,%E5%8D%95%E7%AF%87%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E8%AE%A1%E6%95%B0,-%E6%89%93%E5%BC%80%E7%BB%9F%E8%AE%A1%E5%BC%80%E5%85%B3"><code>七、添加阅读量统计</code></a> 下的 <code>配置 leancloud的 app_id 和 app_key</code> 环节，这里少复制了一个 <code>REST API 服务器地址</code>，对应主题配置文件下的 <code>leancloud的server_url</code>。如果不添加这个服务器地址，会无法显示访客量和阅读量。<strong>配置<code>server_url</code>的值为 <code>REST API 服务器地址</code> 即可实现该功能。</strong></p><p>使用<code>Leancloud</code>实现<strong>评论功能</strong>时，使用国内版的可以实现，但是使用国际版的不行。</p><p>综上，使用国内版。</p><p>（4）发布到GitHub Pages时，需要配置<code>token</code>信息。其中<code>token</code>为 <code>GitHub</code> 的 <code>Personal access tokens</code>，获取方式：<code>Setting</code>-&gt;<code>Developer setting</code>-&gt;<code>Personal access token</code>-&gt;<code>Tokens(classic)</code>（有两种token可以选，Fine-grained tokens更安全一点，但我选了经典classic的）-&gt;<code>Generate new token</code>，我把时间限制设置成了无期限，所有权限都选上了。</p><p>这个token生成之后只能看一次（Make sure to copy your token now as you will not be able to see it again.），如果没有复制下来，只需要点重新生成即可。</p><p>2.<a href="https://zhuanlan.zhihu.com/p/392994381">【保姆级】利用Github搭建自己的个人博客，看完就会 - 知乎 (zhihu.com)</a></p><p>这个是使用ssh方式来部署的。</p><p>3.<a href="https://pianfan.github.io/build_own_website/">零基础小白如何搭建自己的 github.io 个人网站 – Pianfan’s blog</a></p><p>这个是直接fork人家的，我没试过，应该很简单。</p><p>4.<a href="https://zhuanlan.zhihu.com/p/548396509">利用 GitHub 快速搭建一个免费个人网站 | 2022（无需编程） - 知乎 (zhihu.com)</a></p><p>这个是使用了Github自带的主题部署，没有使用hexo。</p><p>5.<a href="https://blog.csdn.net/qq_20042935/article/details/133920722">保姆级教程：从零构建GitHub Pages静态网站-CSDN博客</a></p><p>这里备注了一些静态网站生成工具，主要是使用Jekyll来部署（还是mac版本）。</p><p>6.<a href="https://zhuanlan.zhihu.com/p/76063614">Github pages, 快速部署你的静态网页 - 知乎 (zhihu.com)</a></p><p>这个使用了vue，没试过。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nodejs</title>
    <link href="/2024/09/16/Nodejs/"/>
    <url>/2024/09/16/Nodejs/</url>
    
    <content type="html"><![CDATA[<h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载链接：<a href="https://nodejs.org/en/">Node.js — Run JavaScript Everywhere (nodejs.org)</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>一般无脑next安装就行，也不需要配置啥。</p><p>注意：</p><p><code>node_modules</code>模块文件夹，文件夹是用于放用包管理工具下载安装的包。</p><p>在执行<code>npm install webpack -g</code>等命令全局安装的时候，默认会将模块安装在<code>C:\Users\用户名\AppData\Roaming</code>路径下的<code>npm</code>和<code>npm_cache</code>中，可以改变这个路径，从而减少C盘的使用。</p><h5 id="配置npm在安装全局模块时的路径以及缓存cache的路径"><a href="#配置npm在安装全局模块时的路径以及缓存cache的路径" class="headerlink" title="配置npm在安装全局模块时的路径以及缓存cache的路径"></a>配置npm在安装全局模块时的路径以及缓存cache的路径</h5><p>安装结束后，在安装路径的根目录下（D:\Programs\nodejs目录下）新建两个文件夹：<code>node_cache</code> 和 <code>node_global</code>。</p><p>新建系统变量：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livescript">变量名：NODE_HOME<br>变量值：D:<span class="hljs-string">\Programs\nodejs</span><br></code></pre></td></tr></table></figure><p>修改用户变量：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">修改前：<span class="hljs-name">C</span>:\Users\srr18\AppData\Roaming\npm<br>修改后：<span class="hljs-name">D</span>:\Programs\nodejs\node_global<br></code></pre></td></tr></table></figure><p>在cmd中执行如下命令，配置缓存目录和全局目录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 设置缓存：<br>npm config <span class="hljs-built_in">set</span> cache &quot;D:\Programs\nodejs\node_cache&quot;<br><br># 设置全局模块：<br>npm config <span class="hljs-built_in">set</span> prefix &quot;D:\Programs\nodejs\node_global&quot;<br></code></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/Nicolecocol/article/details/136788200">Node.js安装及环境配置超详细教程【Windows系统】_windows 安装nodejs-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/148188987">Node.js的安装以及配置npm全局模块路径和缓存路径 - 知乎 (zhihu.com)</a></p><p>注意事项：</p><p>1.如果出现npm install失败，可能是遇到了文件夹没有写入权限的问题。解决方法有两种：</p><p>（1）设置文件夹<strong>安全</strong>属性为<strong>完全控制</strong>。</p><p>（2）使用<strong>管理员权限</strong>打开cmd窗口。</p><p>2.npm install的时候太慢，可以设置镜像源：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># 查询当前使用的镜像源</span><br>npm get <span class="hljs-keyword">registry</span><br><br><span class="hljs-comment"># 设置为淘宝镜像源</span><br>npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> https://<span class="hljs-keyword">registry</span>.npmmirror.com/<br><br><span class="hljs-comment"># 还原为官方镜像源</span><br>npm config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> https://<span class="hljs-keyword">registry</span>.npmjs.org/<br></code></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_43940789/article/details/131449710">国内npm源镜像（npm加速下载） 指定npm镜像_npm 国内镜像-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/16/hello-world/"/>
    <url>/2024/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
